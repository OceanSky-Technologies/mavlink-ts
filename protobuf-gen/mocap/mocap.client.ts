/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "mocap/mocap.proto" (package "mavsdk.rpc.mocap", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MocapService } from "./mocap";
import type { SetOdometryResponse } from "./mocap";
import type { SetOdometryRequest } from "./mocap";
import type { SetAttitudePositionMocapResponse } from "./mocap";
import type { SetAttitudePositionMocapRequest } from "./mocap";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SetVisionPositionEstimateResponse } from "./mocap";
import type { SetVisionPositionEstimateRequest } from "./mocap";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * *
 * Allows interfacing a vehicle with a motion capture system in
 * order to allow navigation without global positioning sources available
 * (e.g. indoors, or when flying under a bridge. etc.).
 *
 * @generated from protobuf service mavsdk.rpc.mocap.MocapService
 */
export interface IMocapServiceClient {
    /**
     * Send Global position/attitude estimate from a vision source.
     *
     * @generated from protobuf rpc: SetVisionPositionEstimate(mavsdk.rpc.mocap.SetVisionPositionEstimateRequest) returns (mavsdk.rpc.mocap.SetVisionPositionEstimateResponse);
     */
    setVisionPositionEstimate(input: SetVisionPositionEstimateRequest, options?: RpcOptions): UnaryCall<SetVisionPositionEstimateRequest, SetVisionPositionEstimateResponse>;
    /**
     * Send motion capture attitude and position.
     *
     * @generated from protobuf rpc: SetAttitudePositionMocap(mavsdk.rpc.mocap.SetAttitudePositionMocapRequest) returns (mavsdk.rpc.mocap.SetAttitudePositionMocapResponse);
     */
    setAttitudePositionMocap(input: SetAttitudePositionMocapRequest, options?: RpcOptions): UnaryCall<SetAttitudePositionMocapRequest, SetAttitudePositionMocapResponse>;
    /**
     * Send odometry information with an external interface.
     *
     * @generated from protobuf rpc: SetOdometry(mavsdk.rpc.mocap.SetOdometryRequest) returns (mavsdk.rpc.mocap.SetOdometryResponse);
     */
    setOdometry(input: SetOdometryRequest, options?: RpcOptions): UnaryCall<SetOdometryRequest, SetOdometryResponse>;
}
/**
 * *
 * Allows interfacing a vehicle with a motion capture system in
 * order to allow navigation without global positioning sources available
 * (e.g. indoors, or when flying under a bridge. etc.).
 *
 * @generated from protobuf service mavsdk.rpc.mocap.MocapService
 */
export class MocapServiceClient implements IMocapServiceClient, ServiceInfo {
    typeName = MocapService.typeName;
    methods = MocapService.methods;
    options = MocapService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Send Global position/attitude estimate from a vision source.
     *
     * @generated from protobuf rpc: SetVisionPositionEstimate(mavsdk.rpc.mocap.SetVisionPositionEstimateRequest) returns (mavsdk.rpc.mocap.SetVisionPositionEstimateResponse);
     */
    setVisionPositionEstimate(input: SetVisionPositionEstimateRequest, options?: RpcOptions): UnaryCall<SetVisionPositionEstimateRequest, SetVisionPositionEstimateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetVisionPositionEstimateRequest, SetVisionPositionEstimateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Send motion capture attitude and position.
     *
     * @generated from protobuf rpc: SetAttitudePositionMocap(mavsdk.rpc.mocap.SetAttitudePositionMocapRequest) returns (mavsdk.rpc.mocap.SetAttitudePositionMocapResponse);
     */
    setAttitudePositionMocap(input: SetAttitudePositionMocapRequest, options?: RpcOptions): UnaryCall<SetAttitudePositionMocapRequest, SetAttitudePositionMocapResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetAttitudePositionMocapRequest, SetAttitudePositionMocapResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Send odometry information with an external interface.
     *
     * @generated from protobuf rpc: SetOdometry(mavsdk.rpc.mocap.SetOdometryRequest) returns (mavsdk.rpc.mocap.SetOdometryResponse);
     */
    setOdometry(input: SetOdometryRequest, options?: RpcOptions): UnaryCall<SetOdometryRequest, SetOdometryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetOdometryRequest, SetOdometryResponse>("unary", this._transport, method, opt, input);
    }
}
