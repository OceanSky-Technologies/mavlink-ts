/* eslint-disable */

// source: mocap/mocap.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.mocap.AngleBody', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.AngularVelocityBody', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.AttitudePositionMocap', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.Covariance', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.MocapResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.MocapResult.Result', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.Odometry', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.Odometry.MavFrame', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.PositionBody', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.Quaternion', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.SetOdometryRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.SetOdometryResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.SpeedBody', null, global);
goog.exportSymbol('proto.mavsdk.rpc.mocap.VisionPositionEstimate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.displayName = 'proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.displayName = 'proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.displayName = 'proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.displayName = 'proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.SetOdometryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.SetOdometryRequest.displayName = 'proto.mavsdk.rpc.mocap.SetOdometryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.SetOdometryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.SetOdometryResponse.displayName = 'proto.mavsdk.rpc.mocap.SetOdometryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.PositionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.PositionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.PositionBody.displayName = 'proto.mavsdk.rpc.mocap.PositionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.AngleBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.AngleBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.AngleBody.displayName = 'proto.mavsdk.rpc.mocap.AngleBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.SpeedBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.SpeedBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.SpeedBody.displayName = 'proto.mavsdk.rpc.mocap.SpeedBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.AngularVelocityBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.AngularVelocityBody.displayName = 'proto.mavsdk.rpc.mocap.AngularVelocityBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.Covariance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.mocap.Covariance.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.Covariance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.Covariance.displayName = 'proto.mavsdk.rpc.mocap.Covariance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.Quaternion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.Quaternion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.Quaternion.displayName = 'proto.mavsdk.rpc.mocap.Quaternion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.VisionPositionEstimate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.VisionPositionEstimate.displayName = 'proto.mavsdk.rpc.mocap.VisionPositionEstimate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.AttitudePositionMocap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.AttitudePositionMocap.displayName = 'proto.mavsdk.rpc.mocap.AttitudePositionMocap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.Odometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.Odometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.Odometry.displayName = 'proto.mavsdk.rpc.mocap.Odometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.mocap.MocapResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.mocap.MocapResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.mocap.MocapResult.displayName = 'proto.mavsdk.rpc.mocap.MocapResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    visionPositionEstimate: (f = msg.getVisionPositionEstimate()) && proto.mavsdk.rpc.mocap.VisionPositionEstimate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest;
  return proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.mocap.VisionPositionEstimate;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.VisionPositionEstimate.deserializeBinaryFromReader);
      msg.setVisionPositionEstimate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisionPositionEstimate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.mocap.VisionPositionEstimate.serializeBinaryToWriter
    );
  }
};


/**
 * optional VisionPositionEstimate vision_position_estimate = 1;
 * @return {?proto.mavsdk.rpc.mocap.VisionPositionEstimate}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.prototype.getVisionPositionEstimate = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.VisionPositionEstimate} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.VisionPositionEstimate, 1));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.VisionPositionEstimate|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest} returns this
*/
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.prototype.setVisionPositionEstimate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest} returns this
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.prototype.clearVisionPositionEstimate = function() {
  return this.setVisionPositionEstimate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.prototype.hasVisionPositionEstimate = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mocapResult: (f = msg.getMocapResult()) && proto.mavsdk.rpc.mocap.MocapResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse;
  return proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.mocap.MocapResult;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.MocapResult.deserializeBinaryFromReader);
      msg.setMocapResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMocapResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.mocap.MocapResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional MocapResult mocap_result = 1;
 * @return {?proto.mavsdk.rpc.mocap.MocapResult}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.prototype.getMocapResult = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.MocapResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.MocapResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.MocapResult|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse} returns this
*/
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.prototype.setMocapResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse} returns this
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.prototype.clearMocapResult = function() {
  return this.setMocapResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.prototype.hasMocapResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    attitudePositionMocap: (f = msg.getAttitudePositionMocap()) && proto.mavsdk.rpc.mocap.AttitudePositionMocap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest;
  return proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.mocap.AttitudePositionMocap;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.AttitudePositionMocap.deserializeBinaryFromReader);
      msg.setAttitudePositionMocap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttitudePositionMocap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.mocap.AttitudePositionMocap.serializeBinaryToWriter
    );
  }
};


/**
 * optional AttitudePositionMocap attitude_position_mocap = 1;
 * @return {?proto.mavsdk.rpc.mocap.AttitudePositionMocap}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.prototype.getAttitudePositionMocap = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.AttitudePositionMocap} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.AttitudePositionMocap, 1));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.AttitudePositionMocap|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest} returns this
*/
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.prototype.setAttitudePositionMocap = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest} returns this
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.prototype.clearAttitudePositionMocap = function() {
  return this.setAttitudePositionMocap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.prototype.hasAttitudePositionMocap = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mocapResult: (f = msg.getMocapResult()) && proto.mavsdk.rpc.mocap.MocapResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse;
  return proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.mocap.MocapResult;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.MocapResult.deserializeBinaryFromReader);
      msg.setMocapResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMocapResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.mocap.MocapResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional MocapResult mocap_result = 1;
 * @return {?proto.mavsdk.rpc.mocap.MocapResult}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.prototype.getMocapResult = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.MocapResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.MocapResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.MocapResult|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse} returns this
*/
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.prototype.setMocapResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse} returns this
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.prototype.clearMocapResult = function() {
  return this.setMocapResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.prototype.hasMocapResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.SetOdometryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.SetOdometryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    odometry: (f = msg.getOdometry()) && proto.mavsdk.rpc.mocap.Odometry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.SetOdometryRequest}
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.SetOdometryRequest;
  return proto.mavsdk.rpc.mocap.SetOdometryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.SetOdometryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.SetOdometryRequest}
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.mocap.Odometry;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.Odometry.deserializeBinaryFromReader);
      msg.setOdometry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.SetOdometryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.SetOdometryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOdometry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.mocap.Odometry.serializeBinaryToWriter
    );
  }
};


/**
 * optional Odometry odometry = 1;
 * @return {?proto.mavsdk.rpc.mocap.Odometry}
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.prototype.getOdometry = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.Odometry} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.Odometry, 1));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.Odometry|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.SetOdometryRequest} returns this
*/
proto.mavsdk.rpc.mocap.SetOdometryRequest.prototype.setOdometry = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.SetOdometryRequest} returns this
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.prototype.clearOdometry = function() {
  return this.setOdometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.SetOdometryRequest.prototype.hasOdometry = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.SetOdometryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.SetOdometryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mocapResult: (f = msg.getMocapResult()) && proto.mavsdk.rpc.mocap.MocapResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.SetOdometryResponse}
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.SetOdometryResponse;
  return proto.mavsdk.rpc.mocap.SetOdometryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.SetOdometryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.SetOdometryResponse}
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.mocap.MocapResult;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.MocapResult.deserializeBinaryFromReader);
      msg.setMocapResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.SetOdometryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.SetOdometryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMocapResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.mocap.MocapResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional MocapResult mocap_result = 1;
 * @return {?proto.mavsdk.rpc.mocap.MocapResult}
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.prototype.getMocapResult = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.MocapResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.MocapResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.MocapResult|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.SetOdometryResponse} returns this
*/
proto.mavsdk.rpc.mocap.SetOdometryResponse.prototype.setMocapResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.SetOdometryResponse} returns this
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.prototype.clearMocapResult = function() {
  return this.setMocapResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.SetOdometryResponse.prototype.hasMocapResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.PositionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.PositionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.PositionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.PositionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    xM: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    yM: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    zM: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.PositionBody}
 */
proto.mavsdk.rpc.mocap.PositionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.PositionBody;
  return proto.mavsdk.rpc.mocap.PositionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.PositionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.PositionBody}
 */
proto.mavsdk.rpc.mocap.PositionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXM(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYM(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZM(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.PositionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.PositionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.PositionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.PositionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXM();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getYM();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZM();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x_m = 1;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.PositionBody.prototype.getXM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.PositionBody} returns this
 */
proto.mavsdk.rpc.mocap.PositionBody.prototype.setXM = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y_m = 2;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.PositionBody.prototype.getYM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.PositionBody} returns this
 */
proto.mavsdk.rpc.mocap.PositionBody.prototype.setYM = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z_m = 3;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.PositionBody.prototype.getZM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.PositionBody} returns this
 */
proto.mavsdk.rpc.mocap.PositionBody.prototype.setZM = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.AngleBody.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.AngleBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.AngleBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.AngleBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollRad: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitchRad: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    yawRad: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.AngleBody}
 */
proto.mavsdk.rpc.mocap.AngleBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.AngleBody;
  return proto.mavsdk.rpc.mocap.AngleBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.AngleBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.AngleBody}
 */
proto.mavsdk.rpc.mocap.AngleBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollRad(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchRad(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawRad(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.AngleBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.AngleBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.AngleBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.AngleBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRollRad();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPitchRad();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getYawRad();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float roll_rad = 1;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.AngleBody.prototype.getRollRad = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.AngleBody} returns this
 */
proto.mavsdk.rpc.mocap.AngleBody.prototype.setRollRad = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float pitch_rad = 2;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.AngleBody.prototype.getPitchRad = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.AngleBody} returns this
 */
proto.mavsdk.rpc.mocap.AngleBody.prototype.setPitchRad = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float yaw_rad = 3;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.AngleBody.prototype.getYawRad = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.AngleBody} returns this
 */
proto.mavsdk.rpc.mocap.AngleBody.prototype.setYawRad = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.SpeedBody.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.SpeedBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.SpeedBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SpeedBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    xMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    yMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    zMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.SpeedBody}
 */
proto.mavsdk.rpc.mocap.SpeedBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.SpeedBody;
  return proto.mavsdk.rpc.mocap.SpeedBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.SpeedBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.SpeedBody}
 */
proto.mavsdk.rpc.mocap.SpeedBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXMS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYMS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZMS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.SpeedBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.SpeedBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.SpeedBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.SpeedBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXMS();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getYMS();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZMS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x_m_s = 1;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.SpeedBody.prototype.getXMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.SpeedBody} returns this
 */
proto.mavsdk.rpc.mocap.SpeedBody.prototype.setXMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y_m_s = 2;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.SpeedBody.prototype.getYMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.SpeedBody} returns this
 */
proto.mavsdk.rpc.mocap.SpeedBody.prototype.setYMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z_m_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.SpeedBody.prototype.getZMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.SpeedBody} returns this
 */
proto.mavsdk.rpc.mocap.SpeedBody.prototype.setZMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.AngularVelocityBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.AngularVelocityBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollRadS: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitchRadS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    yawRadS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.AngularVelocityBody}
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.AngularVelocityBody;
  return proto.mavsdk.rpc.mocap.AngularVelocityBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.AngularVelocityBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.AngularVelocityBody}
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollRadS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchRadS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawRadS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.AngularVelocityBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.AngularVelocityBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRollRadS();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPitchRadS();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getYawRadS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float roll_rad_s = 1;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.prototype.getRollRadS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.AngularVelocityBody} returns this
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.prototype.setRollRadS = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float pitch_rad_s = 2;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.prototype.getPitchRadS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.AngularVelocityBody} returns this
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.prototype.setPitchRadS = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float yaw_rad_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.prototype.getYawRadS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.AngularVelocityBody} returns this
 */
proto.mavsdk.rpc.mocap.AngularVelocityBody.prototype.setYawRadS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.mocap.Covariance.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.Covariance.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.Covariance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.Covariance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.Covariance.toObject = function(includeInstance, msg) {
  var f, obj = {
    covarianceMatrixList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.Covariance}
 */
proto.mavsdk.rpc.mocap.Covariance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.Covariance;
  return proto.mavsdk.rpc.mocap.Covariance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.Covariance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.Covariance}
 */
proto.mavsdk.rpc.mocap.Covariance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCovarianceMatrix(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.Covariance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.Covariance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.Covariance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.Covariance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCovarianceMatrixList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float covariance_matrix = 1;
 * @return {!Array<number>}
 */
proto.mavsdk.rpc.mocap.Covariance.prototype.getCovarianceMatrixList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mavsdk.rpc.mocap.Covariance} returns this
 */
proto.mavsdk.rpc.mocap.Covariance.prototype.setCovarianceMatrixList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.mocap.Covariance} returns this
 */
proto.mavsdk.rpc.mocap.Covariance.prototype.addCovarianceMatrix = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.mocap.Covariance} returns this
 */
proto.mavsdk.rpc.mocap.Covariance.prototype.clearCovarianceMatrixList = function() {
  return this.setCovarianceMatrixList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.Quaternion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.Quaternion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.Quaternion.toObject = function(includeInstance, msg) {
  var f, obj = {
    w: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.Quaternion}
 */
proto.mavsdk.rpc.mocap.Quaternion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.Quaternion;
  return proto.mavsdk.rpc.mocap.Quaternion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.Quaternion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.Quaternion}
 */
proto.mavsdk.rpc.mocap.Quaternion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setW(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.Quaternion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.Quaternion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.Quaternion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getW();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float w = 1;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.Quaternion} returns this
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.setW = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.Quaternion} returns this
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.Quaternion} returns this
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float z = 4;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.Quaternion} returns this
 */
proto.mavsdk.rpc.mocap.Quaternion.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.VisionPositionEstimate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeUsec: jspb.Message.getFieldWithDefault(msg, 1, 0),
    positionBody: (f = msg.getPositionBody()) && proto.mavsdk.rpc.mocap.PositionBody.toObject(includeInstance, f),
    angleBody: (f = msg.getAngleBody()) && proto.mavsdk.rpc.mocap.AngleBody.toObject(includeInstance, f),
    poseCovariance: (f = msg.getPoseCovariance()) && proto.mavsdk.rpc.mocap.Covariance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.VisionPositionEstimate;
  return proto.mavsdk.rpc.mocap.VisionPositionEstimate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeUsec(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.mocap.PositionBody;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.PositionBody.deserializeBinaryFromReader);
      msg.setPositionBody(value);
      break;
    case 3:
      var value = new proto.mavsdk.rpc.mocap.AngleBody;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.AngleBody.deserializeBinaryFromReader);
      msg.setAngleBody(value);
      break;
    case 4:
      var value = new proto.mavsdk.rpc.mocap.Covariance;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.Covariance.deserializeBinaryFromReader);
      msg.setPoseCovariance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.VisionPositionEstimate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeUsec();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPositionBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.mocap.PositionBody.serializeBinaryToWriter
    );
  }
  f = message.getAngleBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mavsdk.rpc.mocap.AngleBody.serializeBinaryToWriter
    );
  }
  f = message.getPoseCovariance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mavsdk.rpc.mocap.Covariance.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 time_usec = 1;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.getTimeUsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} returns this
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.setTimeUsec = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PositionBody position_body = 2;
 * @return {?proto.mavsdk.rpc.mocap.PositionBody}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.getPositionBody = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.PositionBody} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.PositionBody, 2));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.PositionBody|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} returns this
*/
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.setPositionBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} returns this
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.clearPositionBody = function() {
  return this.setPositionBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.hasPositionBody = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AngleBody angle_body = 3;
 * @return {?proto.mavsdk.rpc.mocap.AngleBody}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.getAngleBody = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.AngleBody} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.AngleBody, 3));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.AngleBody|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} returns this
*/
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.setAngleBody = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} returns this
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.clearAngleBody = function() {
  return this.setAngleBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.hasAngleBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Covariance pose_covariance = 4;
 * @return {?proto.mavsdk.rpc.mocap.Covariance}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.getPoseCovariance = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.Covariance} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.Covariance, 4));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.Covariance|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} returns this
*/
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.setPoseCovariance = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.VisionPositionEstimate} returns this
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.clearPoseCovariance = function() {
  return this.setPoseCovariance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.VisionPositionEstimate.prototype.hasPoseCovariance = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.AttitudePositionMocap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeUsec: jspb.Message.getFieldWithDefault(msg, 1, 0),
    q: (f = msg.getQ()) && proto.mavsdk.rpc.mocap.Quaternion.toObject(includeInstance, f),
    positionBody: (f = msg.getPositionBody()) && proto.mavsdk.rpc.mocap.PositionBody.toObject(includeInstance, f),
    poseCovariance: (f = msg.getPoseCovariance()) && proto.mavsdk.rpc.mocap.Covariance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.AttitudePositionMocap;
  return proto.mavsdk.rpc.mocap.AttitudePositionMocap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeUsec(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.mocap.Quaternion;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.Quaternion.deserializeBinaryFromReader);
      msg.setQ(value);
      break;
    case 3:
      var value = new proto.mavsdk.rpc.mocap.PositionBody;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.PositionBody.deserializeBinaryFromReader);
      msg.setPositionBody(value);
      break;
    case 4:
      var value = new proto.mavsdk.rpc.mocap.Covariance;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.Covariance.deserializeBinaryFromReader);
      msg.setPoseCovariance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.AttitudePositionMocap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeUsec();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQ();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.mocap.Quaternion.serializeBinaryToWriter
    );
  }
  f = message.getPositionBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mavsdk.rpc.mocap.PositionBody.serializeBinaryToWriter
    );
  }
  f = message.getPoseCovariance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mavsdk.rpc.mocap.Covariance.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 time_usec = 1;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.getTimeUsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} returns this
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.setTimeUsec = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Quaternion q = 2;
 * @return {?proto.mavsdk.rpc.mocap.Quaternion}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.getQ = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.Quaternion} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.Quaternion, 2));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.Quaternion|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} returns this
*/
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.setQ = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} returns this
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.clearQ = function() {
  return this.setQ(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.hasQ = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PositionBody position_body = 3;
 * @return {?proto.mavsdk.rpc.mocap.PositionBody}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.getPositionBody = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.PositionBody} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.PositionBody, 3));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.PositionBody|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} returns this
*/
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.setPositionBody = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} returns this
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.clearPositionBody = function() {
  return this.setPositionBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.hasPositionBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Covariance pose_covariance = 4;
 * @return {?proto.mavsdk.rpc.mocap.Covariance}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.getPoseCovariance = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.Covariance} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.Covariance, 4));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.Covariance|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} returns this
*/
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.setPoseCovariance = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.AttitudePositionMocap} returns this
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.clearPoseCovariance = function() {
  return this.setPoseCovariance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.AttitudePositionMocap.prototype.hasPoseCovariance = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.Odometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.Odometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.Odometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeUsec: jspb.Message.getFieldWithDefault(msg, 1, 0),
    frameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    positionBody: (f = msg.getPositionBody()) && proto.mavsdk.rpc.mocap.PositionBody.toObject(includeInstance, f),
    q: (f = msg.getQ()) && proto.mavsdk.rpc.mocap.Quaternion.toObject(includeInstance, f),
    speedBody: (f = msg.getSpeedBody()) && proto.mavsdk.rpc.mocap.SpeedBody.toObject(includeInstance, f),
    angularVelocityBody: (f = msg.getAngularVelocityBody()) && proto.mavsdk.rpc.mocap.AngularVelocityBody.toObject(includeInstance, f),
    poseCovariance: (f = msg.getPoseCovariance()) && proto.mavsdk.rpc.mocap.Covariance.toObject(includeInstance, f),
    velocityCovariance: (f = msg.getVelocityCovariance()) && proto.mavsdk.rpc.mocap.Covariance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.Odometry}
 */
proto.mavsdk.rpc.mocap.Odometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.Odometry;
  return proto.mavsdk.rpc.mocap.Odometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.Odometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.Odometry}
 */
proto.mavsdk.rpc.mocap.Odometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeUsec(value);
      break;
    case 2:
      var value = /** @type {!proto.mavsdk.rpc.mocap.Odometry.MavFrame} */ (reader.readEnum());
      msg.setFrameId(value);
      break;
    case 3:
      var value = new proto.mavsdk.rpc.mocap.PositionBody;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.PositionBody.deserializeBinaryFromReader);
      msg.setPositionBody(value);
      break;
    case 4:
      var value = new proto.mavsdk.rpc.mocap.Quaternion;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.Quaternion.deserializeBinaryFromReader);
      msg.setQ(value);
      break;
    case 5:
      var value = new proto.mavsdk.rpc.mocap.SpeedBody;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.SpeedBody.deserializeBinaryFromReader);
      msg.setSpeedBody(value);
      break;
    case 6:
      var value = new proto.mavsdk.rpc.mocap.AngularVelocityBody;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.AngularVelocityBody.deserializeBinaryFromReader);
      msg.setAngularVelocityBody(value);
      break;
    case 7:
      var value = new proto.mavsdk.rpc.mocap.Covariance;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.Covariance.deserializeBinaryFromReader);
      msg.setPoseCovariance(value);
      break;
    case 8:
      var value = new proto.mavsdk.rpc.mocap.Covariance;
      reader.readMessage(value,proto.mavsdk.rpc.mocap.Covariance.deserializeBinaryFromReader);
      msg.setVelocityCovariance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.Odometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.Odometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.Odometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeUsec();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFrameId();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPositionBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mavsdk.rpc.mocap.PositionBody.serializeBinaryToWriter
    );
  }
  f = message.getQ();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mavsdk.rpc.mocap.Quaternion.serializeBinaryToWriter
    );
  }
  f = message.getSpeedBody();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mavsdk.rpc.mocap.SpeedBody.serializeBinaryToWriter
    );
  }
  f = message.getAngularVelocityBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.mavsdk.rpc.mocap.AngularVelocityBody.serializeBinaryToWriter
    );
  }
  f = message.getPoseCovariance();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.mavsdk.rpc.mocap.Covariance.serializeBinaryToWriter
    );
  }
  f = message.getVelocityCovariance();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.mavsdk.rpc.mocap.Covariance.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.mocap.Odometry.MavFrame = {
  MAV_FRAME_MOCAP_NED: 0,
  MAV_FRAME_LOCAL_FRD: 1
};

/**
 * optional uint64 time_usec = 1;
 * @return {number}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.getTimeUsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.setTimeUsec = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MavFrame frame_id = 2;
 * @return {!proto.mavsdk.rpc.mocap.Odometry.MavFrame}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.getFrameId = function() {
  return /** @type {!proto.mavsdk.rpc.mocap.Odometry.MavFrame} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mavsdk.rpc.mocap.Odometry.MavFrame} value
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.setFrameId = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional PositionBody position_body = 3;
 * @return {?proto.mavsdk.rpc.mocap.PositionBody}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.getPositionBody = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.PositionBody} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.PositionBody, 3));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.PositionBody|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
*/
proto.mavsdk.rpc.mocap.Odometry.prototype.setPositionBody = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.clearPositionBody = function() {
  return this.setPositionBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.hasPositionBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Quaternion q = 4;
 * @return {?proto.mavsdk.rpc.mocap.Quaternion}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.getQ = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.Quaternion} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.Quaternion, 4));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.Quaternion|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
*/
proto.mavsdk.rpc.mocap.Odometry.prototype.setQ = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.clearQ = function() {
  return this.setQ(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.hasQ = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SpeedBody speed_body = 5;
 * @return {?proto.mavsdk.rpc.mocap.SpeedBody}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.getSpeedBody = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.SpeedBody} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.SpeedBody, 5));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.SpeedBody|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
*/
proto.mavsdk.rpc.mocap.Odometry.prototype.setSpeedBody = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.clearSpeedBody = function() {
  return this.setSpeedBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.hasSpeedBody = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AngularVelocityBody angular_velocity_body = 6;
 * @return {?proto.mavsdk.rpc.mocap.AngularVelocityBody}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.getAngularVelocityBody = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.AngularVelocityBody} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.AngularVelocityBody, 6));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.AngularVelocityBody|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
*/
proto.mavsdk.rpc.mocap.Odometry.prototype.setAngularVelocityBody = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.clearAngularVelocityBody = function() {
  return this.setAngularVelocityBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.hasAngularVelocityBody = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Covariance pose_covariance = 7;
 * @return {?proto.mavsdk.rpc.mocap.Covariance}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.getPoseCovariance = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.Covariance} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.Covariance, 7));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.Covariance|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
*/
proto.mavsdk.rpc.mocap.Odometry.prototype.setPoseCovariance = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.clearPoseCovariance = function() {
  return this.setPoseCovariance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.hasPoseCovariance = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Covariance velocity_covariance = 8;
 * @return {?proto.mavsdk.rpc.mocap.Covariance}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.getVelocityCovariance = function() {
  return /** @type{?proto.mavsdk.rpc.mocap.Covariance} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.mocap.Covariance, 8));
};


/**
 * @param {?proto.mavsdk.rpc.mocap.Covariance|undefined} value
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
*/
proto.mavsdk.rpc.mocap.Odometry.prototype.setVelocityCovariance = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.mocap.Odometry} returns this
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.clearVelocityCovariance = function() {
  return this.setVelocityCovariance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.mocap.Odometry.prototype.hasVelocityCovariance = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.mocap.MocapResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.mocap.MocapResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.mocap.MocapResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.MocapResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.mocap.MocapResult}
 */
proto.mavsdk.rpc.mocap.MocapResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.mocap.MocapResult;
  return proto.mavsdk.rpc.mocap.MocapResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.mocap.MocapResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.mocap.MocapResult}
 */
proto.mavsdk.rpc.mocap.MocapResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.mocap.MocapResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.mocap.MocapResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.mocap.MocapResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.mocap.MocapResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.mocap.MocapResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.mocap.MocapResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_NO_SYSTEM: 2,
  RESULT_CONNECTION_ERROR: 3,
  RESULT_INVALID_REQUEST_DATA: 4,
  RESULT_UNSUPPORTED: 5
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.mocap.MocapResult.Result}
 */
proto.mavsdk.rpc.mocap.MocapResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.mocap.MocapResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.mocap.MocapResult.Result} value
 * @return {!proto.mavsdk.rpc.mocap.MocapResult} returns this
 */
proto.mavsdk.rpc.mocap.MocapResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.mocap.MocapResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.mocap.MocapResult} returns this
 */
proto.mavsdk.rpc.mocap.MocapResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.mavsdk.rpc.mocap);


// fix autocompletion
module.exports = exports;
