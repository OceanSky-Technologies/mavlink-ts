/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "log_streaming/log_streaming.proto" (package "mavsdk.rpc.log_streaming", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { LogStreamingService } from "./log_streaming";
import type { LogStreamingRawResponse } from "./log_streaming";
import type { SubscribeLogStreamingRawRequest } from "./log_streaming";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { StopLogStreamingResponse } from "./log_streaming";
import type { StopLogStreamingRequest } from "./log_streaming";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartLogStreamingResponse } from "./log_streaming";
import type { StartLogStreamingRequest } from "./log_streaming";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Provide log streaming data.
 *
 * @generated from protobuf service mavsdk.rpc.log_streaming.LogStreamingService
 */
export interface ILogStreamingServiceClient {
    /**
     * Start streaming logging data.
     *
     * @generated from protobuf rpc: StartLogStreaming(mavsdk.rpc.log_streaming.StartLogStreamingRequest) returns (mavsdk.rpc.log_streaming.StartLogStreamingResponse);
     */
    startLogStreaming(input: StartLogStreamingRequest, options?: RpcOptions): UnaryCall<StartLogStreamingRequest, StartLogStreamingResponse>;
    /**
     * Stop streaming logging data.
     *
     * @generated from protobuf rpc: StopLogStreaming(mavsdk.rpc.log_streaming.StopLogStreamingRequest) returns (mavsdk.rpc.log_streaming.StopLogStreamingResponse);
     */
    stopLogStreaming(input: StopLogStreamingRequest, options?: RpcOptions): UnaryCall<StopLogStreamingRequest, StopLogStreamingResponse>;
    /**
     * Subscribe to logging messages
     *
     * @generated from protobuf rpc: SubscribeLogStreamingRaw(mavsdk.rpc.log_streaming.SubscribeLogStreamingRawRequest) returns (stream mavsdk.rpc.log_streaming.LogStreamingRawResponse);
     */
    subscribeLogStreamingRaw(input: SubscribeLogStreamingRawRequest, options?: RpcOptions): ServerStreamingCall<SubscribeLogStreamingRawRequest, LogStreamingRawResponse>;
}
/**
 * Provide log streaming data.
 *
 * @generated from protobuf service mavsdk.rpc.log_streaming.LogStreamingService
 */
export class LogStreamingServiceClient implements ILogStreamingServiceClient, ServiceInfo {
    typeName = LogStreamingService.typeName;
    methods = LogStreamingService.methods;
    options = LogStreamingService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Start streaming logging data.
     *
     * @generated from protobuf rpc: StartLogStreaming(mavsdk.rpc.log_streaming.StartLogStreamingRequest) returns (mavsdk.rpc.log_streaming.StartLogStreamingResponse);
     */
    startLogStreaming(input: StartLogStreamingRequest, options?: RpcOptions): UnaryCall<StartLogStreamingRequest, StartLogStreamingResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartLogStreamingRequest, StartLogStreamingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Stop streaming logging data.
     *
     * @generated from protobuf rpc: StopLogStreaming(mavsdk.rpc.log_streaming.StopLogStreamingRequest) returns (mavsdk.rpc.log_streaming.StopLogStreamingResponse);
     */
    stopLogStreaming(input: StopLogStreamingRequest, options?: RpcOptions): UnaryCall<StopLogStreamingRequest, StopLogStreamingResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopLogStreamingRequest, StopLogStreamingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to logging messages
     *
     * @generated from protobuf rpc: SubscribeLogStreamingRaw(mavsdk.rpc.log_streaming.SubscribeLogStreamingRawRequest) returns (stream mavsdk.rpc.log_streaming.LogStreamingRawResponse);
     */
    subscribeLogStreamingRaw(input: SubscribeLogStreamingRawRequest, options?: RpcOptions): ServerStreamingCall<SubscribeLogStreamingRawRequest, LogStreamingRawResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeLogStreamingRawRequest, LogStreamingRawResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
