/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "log_streaming/log_streaming.proto" (package "mavsdk.rpc.log_streaming", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.log_streaming.StartLogStreamingRequest
 */
export interface StartLogStreamingRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.log_streaming.StartLogStreamingResponse
 */
export interface StartLogStreamingResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result = 1;
     */
    logStreamingResult?: LogStreamingResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.log_streaming.StopLogStreamingRequest
 */
export interface StopLogStreamingRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.log_streaming.StopLogStreamingResponse
 */
export interface StopLogStreamingResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result = 1;
     */
    logStreamingResult?: LogStreamingResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.log_streaming.SubscribeLogStreamingRawRequest
 */
export interface SubscribeLogStreamingRawRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.log_streaming.LogStreamingRawResponse
 */
export interface LogStreamingRawResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_streaming.LogStreamingRaw logging_raw = 1;
     */
    loggingRaw?: LogStreamingRaw; // A message containing logged data
}
/**
 * Raw logging data type
 *
 * @generated from protobuf message mavsdk.rpc.log_streaming.LogStreamingRaw
 */
export interface LogStreamingRaw {
    /**
     * @generated from protobuf field: string data_base64 = 1;
     */
    dataBase64: string; // Ulog file stream data encoded as base64
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.log_streaming.LogStreamingResult
 */
export interface LogStreamingResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_streaming.LogStreamingResult.Result result = 1;
     */
    result: LogStreamingResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for logging requests
 *
 * @generated from protobuf enum mavsdk.rpc.log_streaming.LogStreamingResult.Result
 */
export enum LogStreamingResult_Result {
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 0;
     */
    SUCCESS = 0,
    /**
     * No system connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 1;
     */
    NO_SYSTEM = 1,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 2;
     */
    CONNECTION_ERROR = 2,
    /**
     * System busy
     *
     * @generated from protobuf enum value: RESULT_BUSY = 3;
     */
    BUSY = 3,
    /**
     * Command denied
     *
     * @generated from protobuf enum value: RESULT_COMMAND_DENIED = 4;
     */
    COMMAND_DENIED = 4,
    /**
     * Timeout
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 5;
     */
    TIMEOUT = 5,
    /**
     * Unsupported
     *
     * @generated from protobuf enum value: RESULT_UNSUPPORTED = 6;
     */
    UNSUPPORTED = 6,
    /**
     * Unknown error
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 7;
     */
    UNKNOWN = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class StartLogStreamingRequest$Type extends MessageType<StartLogStreamingRequest> {
    constructor() {
        super("mavsdk.rpc.log_streaming.StartLogStreamingRequest", []);
    }
    create(value?: PartialMessage<StartLogStreamingRequest>): StartLogStreamingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartLogStreamingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartLogStreamingRequest): StartLogStreamingRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartLogStreamingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_streaming.StartLogStreamingRequest
 */
export const StartLogStreamingRequest = new StartLogStreamingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartLogStreamingResponse$Type extends MessageType<StartLogStreamingResponse> {
    constructor() {
        super("mavsdk.rpc.log_streaming.StartLogStreamingResponse", [
            { no: 1, name: "log_streaming_result", kind: "message", T: () => LogStreamingResult }
        ]);
    }
    create(value?: PartialMessage<StartLogStreamingResponse>): StartLogStreamingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartLogStreamingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartLogStreamingResponse): StartLogStreamingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result */ 1:
                    message.logStreamingResult = LogStreamingResult.internalBinaryRead(reader, reader.uint32(), options, message.logStreamingResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartLogStreamingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result = 1; */
        if (message.logStreamingResult)
            LogStreamingResult.internalBinaryWrite(message.logStreamingResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_streaming.StartLogStreamingResponse
 */
export const StartLogStreamingResponse = new StartLogStreamingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopLogStreamingRequest$Type extends MessageType<StopLogStreamingRequest> {
    constructor() {
        super("mavsdk.rpc.log_streaming.StopLogStreamingRequest", []);
    }
    create(value?: PartialMessage<StopLogStreamingRequest>): StopLogStreamingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopLogStreamingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopLogStreamingRequest): StopLogStreamingRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopLogStreamingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_streaming.StopLogStreamingRequest
 */
export const StopLogStreamingRequest = new StopLogStreamingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopLogStreamingResponse$Type extends MessageType<StopLogStreamingResponse> {
    constructor() {
        super("mavsdk.rpc.log_streaming.StopLogStreamingResponse", [
            { no: 1, name: "log_streaming_result", kind: "message", T: () => LogStreamingResult }
        ]);
    }
    create(value?: PartialMessage<StopLogStreamingResponse>): StopLogStreamingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopLogStreamingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopLogStreamingResponse): StopLogStreamingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result */ 1:
                    message.logStreamingResult = LogStreamingResult.internalBinaryRead(reader, reader.uint32(), options, message.logStreamingResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopLogStreamingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_streaming.LogStreamingResult log_streaming_result = 1; */
        if (message.logStreamingResult)
            LogStreamingResult.internalBinaryWrite(message.logStreamingResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_streaming.StopLogStreamingResponse
 */
export const StopLogStreamingResponse = new StopLogStreamingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeLogStreamingRawRequest$Type extends MessageType<SubscribeLogStreamingRawRequest> {
    constructor() {
        super("mavsdk.rpc.log_streaming.SubscribeLogStreamingRawRequest", []);
    }
    create(value?: PartialMessage<SubscribeLogStreamingRawRequest>): SubscribeLogStreamingRawRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeLogStreamingRawRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeLogStreamingRawRequest): SubscribeLogStreamingRawRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeLogStreamingRawRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_streaming.SubscribeLogStreamingRawRequest
 */
export const SubscribeLogStreamingRawRequest = new SubscribeLogStreamingRawRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogStreamingRawResponse$Type extends MessageType<LogStreamingRawResponse> {
    constructor() {
        super("mavsdk.rpc.log_streaming.LogStreamingRawResponse", [
            { no: 1, name: "logging_raw", kind: "message", T: () => LogStreamingRaw }
        ]);
    }
    create(value?: PartialMessage<LogStreamingRawResponse>): LogStreamingRawResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LogStreamingRawResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogStreamingRawResponse): LogStreamingRawResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_streaming.LogStreamingRaw logging_raw */ 1:
                    message.loggingRaw = LogStreamingRaw.internalBinaryRead(reader, reader.uint32(), options, message.loggingRaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogStreamingRawResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_streaming.LogStreamingRaw logging_raw = 1; */
        if (message.loggingRaw)
            LogStreamingRaw.internalBinaryWrite(message.loggingRaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_streaming.LogStreamingRawResponse
 */
export const LogStreamingRawResponse = new LogStreamingRawResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogStreamingRaw$Type extends MessageType<LogStreamingRaw> {
    constructor() {
        super("mavsdk.rpc.log_streaming.LogStreamingRaw", [
            { no: 1, name: "data_base64", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogStreamingRaw>): LogStreamingRaw {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dataBase64 = "";
        if (value !== undefined)
            reflectionMergePartial<LogStreamingRaw>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogStreamingRaw): LogStreamingRaw {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data_base64 */ 1:
                    message.dataBase64 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogStreamingRaw, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data_base64 = 1; */
        if (message.dataBase64 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dataBase64);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_streaming.LogStreamingRaw
 */
export const LogStreamingRaw = new LogStreamingRaw$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogStreamingResult$Type extends MessageType<LogStreamingResult> {
    constructor() {
        super("mavsdk.rpc.log_streaming.LogStreamingResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.log_streaming.LogStreamingResult.Result", LogStreamingResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogStreamingResult>): LogStreamingResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<LogStreamingResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogStreamingResult): LogStreamingResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_streaming.LogStreamingResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogStreamingResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_streaming.LogStreamingResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_streaming.LogStreamingResult
 */
export const LogStreamingResult = new LogStreamingResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.log_streaming.LogStreamingService
 */
export const LogStreamingService = new ServiceType("mavsdk.rpc.log_streaming.LogStreamingService", [
    { name: "StartLogStreaming", options: {}, I: StartLogStreamingRequest, O: StartLogStreamingResponse },
    { name: "StopLogStreaming", options: {}, I: StopLogStreamingRequest, O: StopLogStreamingResponse },
    { name: "SubscribeLogStreamingRaw", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC" }, I: SubscribeLogStreamingRawRequest, O: LogStreamingRawResponse }
]);
