/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "telemetry_server/telemetry_server.proto" (package "mavsdk.rpc.telemetry_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TelemetryServerService } from "./telemetry_server";
import type { PublishDistanceSensorResponse } from "./telemetry_server";
import type { PublishDistanceSensorRequest } from "./telemetry_server";
import type { PublishUnixEpochTimeResponse } from "./telemetry_server";
import type { PublishUnixEpochTimeRequest } from "./telemetry_server";
import type { PublishRawImuResponse } from "./telemetry_server";
import type { PublishRawImuRequest } from "./telemetry_server";
import type { PublishScaledImuResponse } from "./telemetry_server";
import type { PublishScaledImuRequest } from "./telemetry_server";
import type { PublishImuResponse } from "./telemetry_server";
import type { PublishImuRequest } from "./telemetry_server";
import type { PublishGroundTruthResponse } from "./telemetry_server";
import type { PublishGroundTruthRequest } from "./telemetry_server";
import type { PublishPositionVelocityNedResponse } from "./telemetry_server";
import type { PublishPositionVelocityNedRequest } from "./telemetry_server";
import type { PublishOdometryResponse } from "./telemetry_server";
import type { PublishOdometryRequest } from "./telemetry_server";
import type { PublishStatusTextResponse } from "./telemetry_server";
import type { PublishStatusTextRequest } from "./telemetry_server";
import type { PublishBatteryResponse } from "./telemetry_server";
import type { PublishBatteryRequest } from "./telemetry_server";
import type { PublishRawGpsResponse } from "./telemetry_server";
import type { PublishRawGpsRequest } from "./telemetry_server";
import type { PublishExtendedSysStateResponse } from "./telemetry_server";
import type { PublishExtendedSysStateRequest } from "./telemetry_server";
import type { PublishSysStatusResponse } from "./telemetry_server";
import type { PublishSysStatusRequest } from "./telemetry_server";
import type { PublishHomeResponse } from "./telemetry_server";
import type { PublishHomeRequest } from "./telemetry_server";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PublishPositionResponse } from "./telemetry_server";
import type { PublishPositionRequest } from "./telemetry_server";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Allow users to provide vehicle telemetry and state information
 * (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
 *
 * @generated from protobuf service mavsdk.rpc.telemetry_server.TelemetryServerService
 */
export interface ITelemetryServerServiceClient {
    /**
     * Publish to 'position' updates.
     *
     * @generated from protobuf rpc: PublishPosition(mavsdk.rpc.telemetry_server.PublishPositionRequest) returns (mavsdk.rpc.telemetry_server.PublishPositionResponse);
     */
    publishPosition(input: PublishPositionRequest, options?: RpcOptions): UnaryCall<PublishPositionRequest, PublishPositionResponse>;
    /**
     * Publish to 'home position' updates.
     *
     * @generated from protobuf rpc: PublishHome(mavsdk.rpc.telemetry_server.PublishHomeRequest) returns (mavsdk.rpc.telemetry_server.PublishHomeResponse);
     */
    publishHome(input: PublishHomeRequest, options?: RpcOptions): UnaryCall<PublishHomeRequest, PublishHomeResponse>;
    /**
     * Publish 'sys status' updates.
     *
     * @generated from protobuf rpc: PublishSysStatus(mavsdk.rpc.telemetry_server.PublishSysStatusRequest) returns (mavsdk.rpc.telemetry_server.PublishSysStatusResponse);
     */
    publishSysStatus(input: PublishSysStatusRequest, options?: RpcOptions): UnaryCall<PublishSysStatusRequest, PublishSysStatusResponse>;
    /**
     * Publish 'extended sys state' updates.
     *
     * @generated from protobuf rpc: PublishExtendedSysState(mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest) returns (mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse);
     */
    publishExtendedSysState(input: PublishExtendedSysStateRequest, options?: RpcOptions): UnaryCall<PublishExtendedSysStateRequest, PublishExtendedSysStateResponse>;
    /**
     * Publish to 'Raw GPS' updates.
     *
     * @generated from protobuf rpc: PublishRawGps(mavsdk.rpc.telemetry_server.PublishRawGpsRequest) returns (mavsdk.rpc.telemetry_server.PublishRawGpsResponse);
     */
    publishRawGps(input: PublishRawGpsRequest, options?: RpcOptions): UnaryCall<PublishRawGpsRequest, PublishRawGpsResponse>;
    /**
     * Publish to 'battery' updates.
     *
     * @generated from protobuf rpc: PublishBattery(mavsdk.rpc.telemetry_server.PublishBatteryRequest) returns (mavsdk.rpc.telemetry_server.PublishBatteryResponse);
     */
    publishBattery(input: PublishBatteryRequest, options?: RpcOptions): UnaryCall<PublishBatteryRequest, PublishBatteryResponse>;
    /**
     * Publish to 'status text' updates.
     *
     * @generated from protobuf rpc: PublishStatusText(mavsdk.rpc.telemetry_server.PublishStatusTextRequest) returns (mavsdk.rpc.telemetry_server.PublishStatusTextResponse);
     */
    publishStatusText(input: PublishStatusTextRequest, options?: RpcOptions): UnaryCall<PublishStatusTextRequest, PublishStatusTextResponse>;
    /**
     * Publish to 'odometry' updates.
     *
     * @generated from protobuf rpc: PublishOdometry(mavsdk.rpc.telemetry_server.PublishOdometryRequest) returns (mavsdk.rpc.telemetry_server.PublishOdometryResponse);
     */
    publishOdometry(input: PublishOdometryRequest, options?: RpcOptions): UnaryCall<PublishOdometryRequest, PublishOdometryResponse>;
    /**
     * Publish to 'position velocity' updates.
     *
     * @generated from protobuf rpc: PublishPositionVelocityNed(mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest) returns (mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse);
     */
    publishPositionVelocityNed(input: PublishPositionVelocityNedRequest, options?: RpcOptions): UnaryCall<PublishPositionVelocityNedRequest, PublishPositionVelocityNedResponse>;
    /**
     * Publish to 'ground truth' updates.
     *
     * @generated from protobuf rpc: PublishGroundTruth(mavsdk.rpc.telemetry_server.PublishGroundTruthRequest) returns (mavsdk.rpc.telemetry_server.PublishGroundTruthResponse);
     */
    publishGroundTruth(input: PublishGroundTruthRequest, options?: RpcOptions): UnaryCall<PublishGroundTruthRequest, PublishGroundTruthResponse>;
    /**
     * Publish to 'IMU' updates (in SI units in NED body frame).
     *
     * @generated from protobuf rpc: PublishImu(mavsdk.rpc.telemetry_server.PublishImuRequest) returns (mavsdk.rpc.telemetry_server.PublishImuResponse);
     */
    publishImu(input: PublishImuRequest, options?: RpcOptions): UnaryCall<PublishImuRequest, PublishImuResponse>;
    /**
     * Publish to 'Scaled IMU' updates.
     *
     * @generated from protobuf rpc: PublishScaledImu(mavsdk.rpc.telemetry_server.PublishScaledImuRequest) returns (mavsdk.rpc.telemetry_server.PublishScaledImuResponse);
     */
    publishScaledImu(input: PublishScaledImuRequest, options?: RpcOptions): UnaryCall<PublishScaledImuRequest, PublishScaledImuResponse>;
    /**
     * Publish to 'Raw IMU' updates.
     *
     * @generated from protobuf rpc: PublishRawImu(mavsdk.rpc.telemetry_server.PublishRawImuRequest) returns (mavsdk.rpc.telemetry_server.PublishRawImuResponse);
     */
    publishRawImu(input: PublishRawImuRequest, options?: RpcOptions): UnaryCall<PublishRawImuRequest, PublishRawImuResponse>;
    /**
     * Publish to 'unix epoch time' updates.
     *
     * @generated from protobuf rpc: PublishUnixEpochTime(mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest) returns (mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse);
     */
    publishUnixEpochTime(input: PublishUnixEpochTimeRequest, options?: RpcOptions): UnaryCall<PublishUnixEpochTimeRequest, PublishUnixEpochTimeResponse>;
    /**
     * Publish to "distance sensor" updates.
     *
     * @generated from protobuf rpc: PublishDistanceSensor(mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest) returns (mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse);
     */
    publishDistanceSensor(input: PublishDistanceSensorRequest, options?: RpcOptions): UnaryCall<PublishDistanceSensorRequest, PublishDistanceSensorResponse>;
}
/**
 *
 * Allow users to provide vehicle telemetry and state information
 * (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
 *
 * @generated from protobuf service mavsdk.rpc.telemetry_server.TelemetryServerService
 */
export class TelemetryServerServiceClient implements ITelemetryServerServiceClient, ServiceInfo {
    typeName = TelemetryServerService.typeName;
    methods = TelemetryServerService.methods;
    options = TelemetryServerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Publish to 'position' updates.
     *
     * @generated from protobuf rpc: PublishPosition(mavsdk.rpc.telemetry_server.PublishPositionRequest) returns (mavsdk.rpc.telemetry_server.PublishPositionResponse);
     */
    publishPosition(input: PublishPositionRequest, options?: RpcOptions): UnaryCall<PublishPositionRequest, PublishPositionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishPositionRequest, PublishPositionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'home position' updates.
     *
     * @generated from protobuf rpc: PublishHome(mavsdk.rpc.telemetry_server.PublishHomeRequest) returns (mavsdk.rpc.telemetry_server.PublishHomeResponse);
     */
    publishHome(input: PublishHomeRequest, options?: RpcOptions): UnaryCall<PublishHomeRequest, PublishHomeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishHomeRequest, PublishHomeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish 'sys status' updates.
     *
     * @generated from protobuf rpc: PublishSysStatus(mavsdk.rpc.telemetry_server.PublishSysStatusRequest) returns (mavsdk.rpc.telemetry_server.PublishSysStatusResponse);
     */
    publishSysStatus(input: PublishSysStatusRequest, options?: RpcOptions): UnaryCall<PublishSysStatusRequest, PublishSysStatusResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishSysStatusRequest, PublishSysStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish 'extended sys state' updates.
     *
     * @generated from protobuf rpc: PublishExtendedSysState(mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest) returns (mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse);
     */
    publishExtendedSysState(input: PublishExtendedSysStateRequest, options?: RpcOptions): UnaryCall<PublishExtendedSysStateRequest, PublishExtendedSysStateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishExtendedSysStateRequest, PublishExtendedSysStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'Raw GPS' updates.
     *
     * @generated from protobuf rpc: PublishRawGps(mavsdk.rpc.telemetry_server.PublishRawGpsRequest) returns (mavsdk.rpc.telemetry_server.PublishRawGpsResponse);
     */
    publishRawGps(input: PublishRawGpsRequest, options?: RpcOptions): UnaryCall<PublishRawGpsRequest, PublishRawGpsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishRawGpsRequest, PublishRawGpsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'battery' updates.
     *
     * @generated from protobuf rpc: PublishBattery(mavsdk.rpc.telemetry_server.PublishBatteryRequest) returns (mavsdk.rpc.telemetry_server.PublishBatteryResponse);
     */
    publishBattery(input: PublishBatteryRequest, options?: RpcOptions): UnaryCall<PublishBatteryRequest, PublishBatteryResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishBatteryRequest, PublishBatteryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'status text' updates.
     *
     * @generated from protobuf rpc: PublishStatusText(mavsdk.rpc.telemetry_server.PublishStatusTextRequest) returns (mavsdk.rpc.telemetry_server.PublishStatusTextResponse);
     */
    publishStatusText(input: PublishStatusTextRequest, options?: RpcOptions): UnaryCall<PublishStatusTextRequest, PublishStatusTextResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishStatusTextRequest, PublishStatusTextResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'odometry' updates.
     *
     * @generated from protobuf rpc: PublishOdometry(mavsdk.rpc.telemetry_server.PublishOdometryRequest) returns (mavsdk.rpc.telemetry_server.PublishOdometryResponse);
     */
    publishOdometry(input: PublishOdometryRequest, options?: RpcOptions): UnaryCall<PublishOdometryRequest, PublishOdometryResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishOdometryRequest, PublishOdometryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'position velocity' updates.
     *
     * @generated from protobuf rpc: PublishPositionVelocityNed(mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest) returns (mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse);
     */
    publishPositionVelocityNed(input: PublishPositionVelocityNedRequest, options?: RpcOptions): UnaryCall<PublishPositionVelocityNedRequest, PublishPositionVelocityNedResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishPositionVelocityNedRequest, PublishPositionVelocityNedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'ground truth' updates.
     *
     * @generated from protobuf rpc: PublishGroundTruth(mavsdk.rpc.telemetry_server.PublishGroundTruthRequest) returns (mavsdk.rpc.telemetry_server.PublishGroundTruthResponse);
     */
    publishGroundTruth(input: PublishGroundTruthRequest, options?: RpcOptions): UnaryCall<PublishGroundTruthRequest, PublishGroundTruthResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishGroundTruthRequest, PublishGroundTruthResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'IMU' updates (in SI units in NED body frame).
     *
     * @generated from protobuf rpc: PublishImu(mavsdk.rpc.telemetry_server.PublishImuRequest) returns (mavsdk.rpc.telemetry_server.PublishImuResponse);
     */
    publishImu(input: PublishImuRequest, options?: RpcOptions): UnaryCall<PublishImuRequest, PublishImuResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishImuRequest, PublishImuResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'Scaled IMU' updates.
     *
     * @generated from protobuf rpc: PublishScaledImu(mavsdk.rpc.telemetry_server.PublishScaledImuRequest) returns (mavsdk.rpc.telemetry_server.PublishScaledImuResponse);
     */
    publishScaledImu(input: PublishScaledImuRequest, options?: RpcOptions): UnaryCall<PublishScaledImuRequest, PublishScaledImuResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishScaledImuRequest, PublishScaledImuResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'Raw IMU' updates.
     *
     * @generated from protobuf rpc: PublishRawImu(mavsdk.rpc.telemetry_server.PublishRawImuRequest) returns (mavsdk.rpc.telemetry_server.PublishRawImuResponse);
     */
    publishRawImu(input: PublishRawImuRequest, options?: RpcOptions): UnaryCall<PublishRawImuRequest, PublishRawImuResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishRawImuRequest, PublishRawImuResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to 'unix epoch time' updates.
     *
     * @generated from protobuf rpc: PublishUnixEpochTime(mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest) returns (mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse);
     */
    publishUnixEpochTime(input: PublishUnixEpochTimeRequest, options?: RpcOptions): UnaryCall<PublishUnixEpochTimeRequest, PublishUnixEpochTimeResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishUnixEpochTimeRequest, PublishUnixEpochTimeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Publish to "distance sensor" updates.
     *
     * @generated from protobuf rpc: PublishDistanceSensor(mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest) returns (mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse);
     */
    publishDistanceSensor(input: PublishDistanceSensorRequest, options?: RpcOptions): UnaryCall<PublishDistanceSensorRequest, PublishDistanceSensorResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishDistanceSensorRequest, PublishDistanceSensorResponse>("unary", this._transport, method, opt, input);
    }
}
