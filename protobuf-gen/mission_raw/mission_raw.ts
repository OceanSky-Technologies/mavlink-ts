/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "mission_raw/mission_raw.proto" (package "mavsdk.rpc.mission_raw", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.UploadMissionRequest
 */
export interface UploadMissionRequest {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 1;
     */
    missionItems: MissionItem[]; // The mission items
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.UploadMissionResponse
 */
export interface UploadMissionResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.UploadGeofenceRequest
 */
export interface UploadGeofenceRequest {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 1;
     */
    missionItems: MissionItem[]; // The mission items
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.UploadGeofenceResponse
 */
export interface UploadGeofenceResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.UploadRallyPointsRequest
 */
export interface UploadRallyPointsRequest {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 1;
     */
    missionItems: MissionItem[]; // The mission items
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.UploadRallyPointsResponse
 */
export interface UploadRallyPointsResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.CancelMissionUploadRequest
 */
export interface CancelMissionUploadRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.CancelMissionUploadResponse
 */
export interface CancelMissionUploadResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.DownloadMissionRequest
 */
export interface DownloadMissionRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.DownloadMissionResponse
 */
export interface DownloadMissionResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 2;
     */
    missionItems: MissionItem[]; // The mission items
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.CancelMissionDownloadRequest
 */
export interface CancelMissionDownloadRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.CancelMissionDownloadResponse
 */
export interface CancelMissionDownloadResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.StartMissionRequest
 */
export interface StartMissionRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.StartMissionResponse
 */
export interface StartMissionResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.PauseMissionRequest
 */
export interface PauseMissionRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.PauseMissionResponse
 */
export interface PauseMissionResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.ClearMissionRequest
 */
export interface ClearMissionRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.ClearMissionResponse
 */
export interface ClearMissionResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.SetCurrentMissionItemRequest
 */
export interface SetCurrentMissionItemRequest {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number; // Index of the mission item to be set as the next one (0-based)
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse
 */
export interface SetCurrentMissionItemResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.SubscribeMissionProgressRequest
 */
export interface SubscribeMissionProgressRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.MissionProgressResponse
 */
export interface MissionProgressResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionProgress mission_progress = 1;
     */
    missionProgress?: MissionProgress; // Mission progress
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.SubscribeMissionChangedRequest
 */
export interface SubscribeMissionChangedRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.MissionChangedResponse
 */
export interface MissionChangedResponse {
    /**
     * @generated from protobuf field: bool mission_changed = 1;
     */
    missionChanged: boolean; // Mission has changed
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest
 */
export interface ImportQgroundcontrolMissionRequest {
    /**
     * @generated from protobuf field: string qgc_plan_path = 1;
     */
    qgcPlanPath: string; // File path of the QGC plan
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse
 */
export interface ImportQgroundcontrolMissionResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionImportData mission_import_data = 2;
     */
    missionImportData?: MissionImportData; // The imported mission data
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionFromStringRequest
 */
export interface ImportQgroundcontrolMissionFromStringRequest {
    /**
     * @generated from protobuf field: string qgc_plan = 1;
     */
    qgcPlan: string; // QGC plan as string
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionFromStringResponse
 */
export interface ImportQgroundcontrolMissionFromStringResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1;
     */
    missionRawResult?: MissionRawResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionImportData mission_import_data = 2;
     */
    missionImportData?: MissionImportData; // The imported mission data
}
/**
 * Mission progress type.
 *
 * @generated from protobuf message mavsdk.rpc.mission_raw.MissionProgress
 */
export interface MissionProgress {
    /**
     * @generated from protobuf field: int32 current = 1;
     */
    current: number; // Current mission item index (0-based), if equal to total, the mission is finished
    /**
     * @generated from protobuf field: int32 total = 2;
     */
    total: number; // Total number of mission items
}
/**
 * Mission item exactly identical to MAVLink MISSION_ITEM_INT.
 *
 * @generated from protobuf message mavsdk.rpc.mission_raw.MissionItem
 */
export interface MissionItem {
    /**
     * @generated from protobuf field: uint32 seq = 1;
     */
    seq: number; // Sequence (uint16_t)
    /**
     * @generated from protobuf field: uint32 frame = 2;
     */
    frame: number; // The coordinate system of the waypoint (actually uint8_t)
    /**
     * @generated from protobuf field: uint32 command = 3;
     */
    command: number; // The scheduled action for the waypoint (actually uint16_t)
    /**
     * @generated from protobuf field: uint32 current = 4;
     */
    current: number; // false:0, true:1 (actually uint8_t)
    /**
     * @generated from protobuf field: uint32 autocontinue = 5;
     */
    autocontinue: number; // Autocontinue to next waypoint (actually uint8_t)
    /**
     * @generated from protobuf field: float param1 = 6;
     */
    param1: number; // PARAM1, see MAV_CMD enum
    /**
     * @generated from protobuf field: float param2 = 7;
     */
    param2: number; // PARAM2, see MAV_CMD enum
    /**
     * @generated from protobuf field: float param3 = 8;
     */
    param3: number; // PARAM3, see MAV_CMD enum
    /**
     * @generated from protobuf field: float param4 = 9;
     */
    param4: number; // PARAM4, see MAV_CMD enum
    /**
     * @generated from protobuf field: int32 x = 10;
     */
    x: number; // PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
    /**
     * @generated from protobuf field: int32 y = 11;
     */
    y: number; // PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7
    /**
     * @generated from protobuf field: float z = 12;
     */
    z: number; // PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame)
    /**
     * @generated from protobuf field: uint32 mission_type = 13;
     */
    missionType: number; // Mission type (actually uint8_t)
}
/**
 * Mission import data
 *
 * @generated from protobuf message mavsdk.rpc.mission_raw.MissionImportData
 */
export interface MissionImportData {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 1;
     */
    missionItems: MissionItem[]; // Mission items
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.mission_raw.MissionItem geofence_items = 2;
     */
    geofenceItems: MissionItem[]; // Geofence items
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.mission_raw.MissionItem rally_items = 3;
     */
    rallyItems: MissionItem[]; // Rally items
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.mission_raw.MissionRawResult
 */
export interface MissionRawResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw.MissionRawResult.Result result = 1;
     */
    result: MissionRawResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for action requests.
 *
 * @generated from protobuf enum mavsdk.rpc.mission_raw.MissionRawResult.Result
 */
export enum MissionRawResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Error
     *
     * @generated from protobuf enum value: RESULT_ERROR = 2;
     */
    ERROR = 2,
    /**
     * Too many mission items in the mission
     *
     * @generated from protobuf enum value: RESULT_TOO_MANY_MISSION_ITEMS = 3;
     */
    TOO_MANY_MISSION_ITEMS = 3,
    /**
     * Vehicle is busy
     *
     * @generated from protobuf enum value: RESULT_BUSY = 4;
     */
    BUSY = 4,
    /**
     * Request timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 5;
     */
    TIMEOUT = 5,
    /**
     * Invalid argument
     *
     * @generated from protobuf enum value: RESULT_INVALID_ARGUMENT = 6;
     */
    INVALID_ARGUMENT = 6,
    /**
     * Mission downloaded from the system is not supported
     *
     * @generated from protobuf enum value: RESULT_UNSUPPORTED = 7;
     */
    UNSUPPORTED = 7,
    /**
     * No mission available on the system
     *
     * @generated from protobuf enum value: RESULT_NO_MISSION_AVAILABLE = 8;
     */
    NO_MISSION_AVAILABLE = 8,
    /**
     * Mission transfer (upload or download) has been cancelled
     *
     * @generated from protobuf enum value: RESULT_TRANSFER_CANCELLED = 9;
     */
    TRANSFER_CANCELLED = 9,
    /**
     * Failed to open the QGroundControl plan
     *
     * @generated from protobuf enum value: RESULT_FAILED_TO_OPEN_QGC_PLAN = 10;
     */
    FAILED_TO_OPEN_QGC_PLAN = 10,
    /**
     * Failed to parse the QGroundControl plan
     *
     * @generated from protobuf enum value: RESULT_FAILED_TO_PARSE_QGC_PLAN = 11;
     */
    FAILED_TO_PARSE_QGC_PLAN = 11,
    /**
     * No system connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 12;
     */
    NO_SYSTEM = 12,
    /**
     * Request denied
     *
     * @generated from protobuf enum value: RESULT_DENIED = 13;
     */
    DENIED = 13,
    /**
     * Mission type is not consistent
     *
     * @generated from protobuf enum value: RESULT_MISSION_TYPE_NOT_CONSISTENT = 14;
     */
    MISSION_TYPE_NOT_CONSISTENT = 14,
    /**
     * The mission item sequences are not increasing correctly
     *
     * @generated from protobuf enum value: RESULT_INVALID_SEQUENCE = 15;
     */
    INVALID_SEQUENCE = 15,
    /**
     * The current item is not set correctly
     *
     * @generated from protobuf enum value: RESULT_CURRENT_INVALID = 16;
     */
    CURRENT_INVALID = 16,
    /**
     * There was a protocol error
     *
     * @generated from protobuf enum value: RESULT_PROTOCOL_ERROR = 17;
     */
    PROTOCOL_ERROR = 17,
    /**
     * The system does not support the MISSION_INT protocol
     *
     * @generated from protobuf enum value: RESULT_INT_MESSAGES_NOT_SUPPORTED = 18;
     */
    INT_MESSAGES_NOT_SUPPORTED = 18
}
// @generated message type with reflection information, may provide speed optimized methods
class UploadMissionRequest$Type extends MessageType<UploadMissionRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.UploadMissionRequest", [
            { no: 1, name: "mission_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissionItem }
        ]);
    }
    create(value?: PartialMessage<UploadMissionRequest>): UploadMissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.missionItems = [];
        if (value !== undefined)
            reflectionMergePartial<UploadMissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadMissionRequest): UploadMissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items */ 1:
                    message.missionItems.push(MissionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadMissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 1; */
        for (let i = 0; i < message.missionItems.length; i++)
            MissionItem.internalBinaryWrite(message.missionItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.UploadMissionRequest
 */
export const UploadMissionRequest = new UploadMissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadMissionResponse$Type extends MessageType<UploadMissionResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.UploadMissionResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<UploadMissionResponse>): UploadMissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UploadMissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadMissionResponse): UploadMissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadMissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.UploadMissionResponse
 */
export const UploadMissionResponse = new UploadMissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadGeofenceRequest$Type extends MessageType<UploadGeofenceRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.UploadGeofenceRequest", [
            { no: 1, name: "mission_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissionItem }
        ]);
    }
    create(value?: PartialMessage<UploadGeofenceRequest>): UploadGeofenceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.missionItems = [];
        if (value !== undefined)
            reflectionMergePartial<UploadGeofenceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadGeofenceRequest): UploadGeofenceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items */ 1:
                    message.missionItems.push(MissionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadGeofenceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 1; */
        for (let i = 0; i < message.missionItems.length; i++)
            MissionItem.internalBinaryWrite(message.missionItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.UploadGeofenceRequest
 */
export const UploadGeofenceRequest = new UploadGeofenceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadGeofenceResponse$Type extends MessageType<UploadGeofenceResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.UploadGeofenceResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<UploadGeofenceResponse>): UploadGeofenceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UploadGeofenceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadGeofenceResponse): UploadGeofenceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadGeofenceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.UploadGeofenceResponse
 */
export const UploadGeofenceResponse = new UploadGeofenceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadRallyPointsRequest$Type extends MessageType<UploadRallyPointsRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.UploadRallyPointsRequest", [
            { no: 1, name: "mission_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissionItem }
        ]);
    }
    create(value?: PartialMessage<UploadRallyPointsRequest>): UploadRallyPointsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.missionItems = [];
        if (value !== undefined)
            reflectionMergePartial<UploadRallyPointsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadRallyPointsRequest): UploadRallyPointsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items */ 1:
                    message.missionItems.push(MissionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadRallyPointsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 1; */
        for (let i = 0; i < message.missionItems.length; i++)
            MissionItem.internalBinaryWrite(message.missionItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.UploadRallyPointsRequest
 */
export const UploadRallyPointsRequest = new UploadRallyPointsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadRallyPointsResponse$Type extends MessageType<UploadRallyPointsResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.UploadRallyPointsResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<UploadRallyPointsResponse>): UploadRallyPointsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UploadRallyPointsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadRallyPointsResponse): UploadRallyPointsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadRallyPointsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.UploadRallyPointsResponse
 */
export const UploadRallyPointsResponse = new UploadRallyPointsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelMissionUploadRequest$Type extends MessageType<CancelMissionUploadRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.CancelMissionUploadRequest", []);
    }
    create(value?: PartialMessage<CancelMissionUploadRequest>): CancelMissionUploadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CancelMissionUploadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelMissionUploadRequest): CancelMissionUploadRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CancelMissionUploadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.CancelMissionUploadRequest
 */
export const CancelMissionUploadRequest = new CancelMissionUploadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelMissionUploadResponse$Type extends MessageType<CancelMissionUploadResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.CancelMissionUploadResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<CancelMissionUploadResponse>): CancelMissionUploadResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CancelMissionUploadResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelMissionUploadResponse): CancelMissionUploadResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelMissionUploadResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.CancelMissionUploadResponse
 */
export const CancelMissionUploadResponse = new CancelMissionUploadResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadMissionRequest$Type extends MessageType<DownloadMissionRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.DownloadMissionRequest", []);
    }
    create(value?: PartialMessage<DownloadMissionRequest>): DownloadMissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DownloadMissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadMissionRequest): DownloadMissionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DownloadMissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.DownloadMissionRequest
 */
export const DownloadMissionRequest = new DownloadMissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadMissionResponse$Type extends MessageType<DownloadMissionResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.DownloadMissionResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult },
            { no: 2, name: "mission_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissionItem }
        ]);
    }
    create(value?: PartialMessage<DownloadMissionResponse>): DownloadMissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.missionItems = [];
        if (value !== undefined)
            reflectionMergePartial<DownloadMissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadMissionResponse): DownloadMissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                case /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items */ 2:
                    message.missionItems.push(MissionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadMissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 2; */
        for (let i = 0; i < message.missionItems.length; i++)
            MissionItem.internalBinaryWrite(message.missionItems[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.DownloadMissionResponse
 */
export const DownloadMissionResponse = new DownloadMissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelMissionDownloadRequest$Type extends MessageType<CancelMissionDownloadRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.CancelMissionDownloadRequest", []);
    }
    create(value?: PartialMessage<CancelMissionDownloadRequest>): CancelMissionDownloadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CancelMissionDownloadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelMissionDownloadRequest): CancelMissionDownloadRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CancelMissionDownloadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.CancelMissionDownloadRequest
 */
export const CancelMissionDownloadRequest = new CancelMissionDownloadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelMissionDownloadResponse$Type extends MessageType<CancelMissionDownloadResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.CancelMissionDownloadResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<CancelMissionDownloadResponse>): CancelMissionDownloadResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CancelMissionDownloadResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelMissionDownloadResponse): CancelMissionDownloadResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelMissionDownloadResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.CancelMissionDownloadResponse
 */
export const CancelMissionDownloadResponse = new CancelMissionDownloadResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartMissionRequest$Type extends MessageType<StartMissionRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.StartMissionRequest", []);
    }
    create(value?: PartialMessage<StartMissionRequest>): StartMissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartMissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartMissionRequest): StartMissionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartMissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.StartMissionRequest
 */
export const StartMissionRequest = new StartMissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartMissionResponse$Type extends MessageType<StartMissionResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.StartMissionResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<StartMissionResponse>): StartMissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartMissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartMissionResponse): StartMissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartMissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.StartMissionResponse
 */
export const StartMissionResponse = new StartMissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PauseMissionRequest$Type extends MessageType<PauseMissionRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.PauseMissionRequest", []);
    }
    create(value?: PartialMessage<PauseMissionRequest>): PauseMissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PauseMissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PauseMissionRequest): PauseMissionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PauseMissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.PauseMissionRequest
 */
export const PauseMissionRequest = new PauseMissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PauseMissionResponse$Type extends MessageType<PauseMissionResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.PauseMissionResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<PauseMissionResponse>): PauseMissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PauseMissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PauseMissionResponse): PauseMissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PauseMissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.PauseMissionResponse
 */
export const PauseMissionResponse = new PauseMissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearMissionRequest$Type extends MessageType<ClearMissionRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.ClearMissionRequest", []);
    }
    create(value?: PartialMessage<ClearMissionRequest>): ClearMissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClearMissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearMissionRequest): ClearMissionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ClearMissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.ClearMissionRequest
 */
export const ClearMissionRequest = new ClearMissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearMissionResponse$Type extends MessageType<ClearMissionResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.ClearMissionResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<ClearMissionResponse>): ClearMissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClearMissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearMissionResponse): ClearMissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClearMissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.ClearMissionResponse
 */
export const ClearMissionResponse = new ClearMissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurrentMissionItemRequest$Type extends MessageType<SetCurrentMissionItemRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.SetCurrentMissionItemRequest", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetCurrentMissionItemRequest>): SetCurrentMissionItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.index = 0;
        if (value !== undefined)
            reflectionMergePartial<SetCurrentMissionItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCurrentMissionItemRequest): SetCurrentMissionItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetCurrentMissionItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.SetCurrentMissionItemRequest
 */
export const SetCurrentMissionItemRequest = new SetCurrentMissionItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurrentMissionItemResponse$Type extends MessageType<SetCurrentMissionItemResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult }
        ]);
    }
    create(value?: PartialMessage<SetCurrentMissionItemResponse>): SetCurrentMissionItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetCurrentMissionItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCurrentMissionItemResponse): SetCurrentMissionItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetCurrentMissionItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.SetCurrentMissionItemResponse
 */
export const SetCurrentMissionItemResponse = new SetCurrentMissionItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeMissionProgressRequest$Type extends MessageType<SubscribeMissionProgressRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.SubscribeMissionProgressRequest", []);
    }
    create(value?: PartialMessage<SubscribeMissionProgressRequest>): SubscribeMissionProgressRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeMissionProgressRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeMissionProgressRequest): SubscribeMissionProgressRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeMissionProgressRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.SubscribeMissionProgressRequest
 */
export const SubscribeMissionProgressRequest = new SubscribeMissionProgressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionProgressResponse$Type extends MessageType<MissionProgressResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.MissionProgressResponse", [
            { no: 1, name: "mission_progress", kind: "message", T: () => MissionProgress }
        ]);
    }
    create(value?: PartialMessage<MissionProgressResponse>): MissionProgressResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MissionProgressResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionProgressResponse): MissionProgressResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionProgress mission_progress */ 1:
                    message.missionProgress = MissionProgress.internalBinaryRead(reader, reader.uint32(), options, message.missionProgress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionProgressResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionProgress mission_progress = 1; */
        if (message.missionProgress)
            MissionProgress.internalBinaryWrite(message.missionProgress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.MissionProgressResponse
 */
export const MissionProgressResponse = new MissionProgressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeMissionChangedRequest$Type extends MessageType<SubscribeMissionChangedRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.SubscribeMissionChangedRequest", []);
    }
    create(value?: PartialMessage<SubscribeMissionChangedRequest>): SubscribeMissionChangedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeMissionChangedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeMissionChangedRequest): SubscribeMissionChangedRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeMissionChangedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.SubscribeMissionChangedRequest
 */
export const SubscribeMissionChangedRequest = new SubscribeMissionChangedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionChangedResponse$Type extends MessageType<MissionChangedResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.MissionChangedResponse", [
            { no: 1, name: "mission_changed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MissionChangedResponse>): MissionChangedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.missionChanged = false;
        if (value !== undefined)
            reflectionMergePartial<MissionChangedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionChangedResponse): MissionChangedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool mission_changed */ 1:
                    message.missionChanged = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionChangedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool mission_changed = 1; */
        if (message.missionChanged !== false)
            writer.tag(1, WireType.Varint).bool(message.missionChanged);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.MissionChangedResponse
 */
export const MissionChangedResponse = new MissionChangedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportQgroundcontrolMissionRequest$Type extends MessageType<ImportQgroundcontrolMissionRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest", [
            { no: 1, name: "qgc_plan_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImportQgroundcontrolMissionRequest>): ImportQgroundcontrolMissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qgcPlanPath = "";
        if (value !== undefined)
            reflectionMergePartial<ImportQgroundcontrolMissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportQgroundcontrolMissionRequest): ImportQgroundcontrolMissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string qgc_plan_path */ 1:
                    message.qgcPlanPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportQgroundcontrolMissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string qgc_plan_path = 1; */
        if (message.qgcPlanPath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.qgcPlanPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionRequest
 */
export const ImportQgroundcontrolMissionRequest = new ImportQgroundcontrolMissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportQgroundcontrolMissionResponse$Type extends MessageType<ImportQgroundcontrolMissionResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult },
            { no: 2, name: "mission_import_data", kind: "message", T: () => MissionImportData }
        ]);
    }
    create(value?: PartialMessage<ImportQgroundcontrolMissionResponse>): ImportQgroundcontrolMissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ImportQgroundcontrolMissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportQgroundcontrolMissionResponse): ImportQgroundcontrolMissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                case /* mavsdk.rpc.mission_raw.MissionImportData mission_import_data */ 2:
                    message.missionImportData = MissionImportData.internalBinaryRead(reader, reader.uint32(), options, message.missionImportData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportQgroundcontrolMissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.mission_raw.MissionImportData mission_import_data = 2; */
        if (message.missionImportData)
            MissionImportData.internalBinaryWrite(message.missionImportData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionResponse
 */
export const ImportQgroundcontrolMissionResponse = new ImportQgroundcontrolMissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportQgroundcontrolMissionFromStringRequest$Type extends MessageType<ImportQgroundcontrolMissionFromStringRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionFromStringRequest", [
            { no: 1, name: "qgc_plan", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImportQgroundcontrolMissionFromStringRequest>): ImportQgroundcontrolMissionFromStringRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qgcPlan = "";
        if (value !== undefined)
            reflectionMergePartial<ImportQgroundcontrolMissionFromStringRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportQgroundcontrolMissionFromStringRequest): ImportQgroundcontrolMissionFromStringRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string qgc_plan */ 1:
                    message.qgcPlan = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportQgroundcontrolMissionFromStringRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string qgc_plan = 1; */
        if (message.qgcPlan !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.qgcPlan);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionFromStringRequest
 */
export const ImportQgroundcontrolMissionFromStringRequest = new ImportQgroundcontrolMissionFromStringRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportQgroundcontrolMissionFromStringResponse$Type extends MessageType<ImportQgroundcontrolMissionFromStringResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionFromStringResponse", [
            { no: 1, name: "mission_raw_result", kind: "message", T: () => MissionRawResult },
            { no: 2, name: "mission_import_data", kind: "message", T: () => MissionImportData }
        ]);
    }
    create(value?: PartialMessage<ImportQgroundcontrolMissionFromStringResponse>): ImportQgroundcontrolMissionFromStringResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ImportQgroundcontrolMissionFromStringResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportQgroundcontrolMissionFromStringResponse): ImportQgroundcontrolMissionFromStringResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result */ 1:
                    message.missionRawResult = MissionRawResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawResult);
                    break;
                case /* mavsdk.rpc.mission_raw.MissionImportData mission_import_data */ 2:
                    message.missionImportData = MissionImportData.internalBinaryRead(reader, reader.uint32(), options, message.missionImportData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportQgroundcontrolMissionFromStringResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult mission_raw_result = 1; */
        if (message.missionRawResult)
            MissionRawResult.internalBinaryWrite(message.missionRawResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.mission_raw.MissionImportData mission_import_data = 2; */
        if (message.missionImportData)
            MissionImportData.internalBinaryWrite(message.missionImportData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.ImportQgroundcontrolMissionFromStringResponse
 */
export const ImportQgroundcontrolMissionFromStringResponse = new ImportQgroundcontrolMissionFromStringResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionProgress$Type extends MessageType<MissionProgress> {
    constructor() {
        super("mavsdk.rpc.mission_raw.MissionProgress", [
            { no: 1, name: "current", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MissionProgress>): MissionProgress {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.current = 0;
        message.total = 0;
        if (value !== undefined)
            reflectionMergePartial<MissionProgress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionProgress): MissionProgress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 current */ 1:
                    message.current = reader.int32();
                    break;
                case /* int32 total */ 2:
                    message.total = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionProgress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 current = 1; */
        if (message.current !== 0)
            writer.tag(1, WireType.Varint).int32(message.current);
        /* int32 total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Varint).int32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.MissionProgress
 */
export const MissionProgress = new MissionProgress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionItem$Type extends MessageType<MissionItem> {
    constructor() {
        super("mavsdk.rpc.mission_raw.MissionItem", [
            { no: 1, name: "seq", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "frame", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "command", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "current", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "autocontinue", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "param1", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "param2", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "param3", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "param4", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "mission_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MissionItem>): MissionItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seq = 0;
        message.frame = 0;
        message.command = 0;
        message.current = 0;
        message.autocontinue = 0;
        message.param1 = 0;
        message.param2 = 0;
        message.param3 = 0;
        message.param4 = 0;
        message.x = 0;
        message.y = 0;
        message.z = 0;
        message.missionType = 0;
        if (value !== undefined)
            reflectionMergePartial<MissionItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionItem): MissionItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 seq */ 1:
                    message.seq = reader.uint32();
                    break;
                case /* uint32 frame */ 2:
                    message.frame = reader.uint32();
                    break;
                case /* uint32 command */ 3:
                    message.command = reader.uint32();
                    break;
                case /* uint32 current */ 4:
                    message.current = reader.uint32();
                    break;
                case /* uint32 autocontinue */ 5:
                    message.autocontinue = reader.uint32();
                    break;
                case /* float param1 */ 6:
                    message.param1 = reader.float();
                    break;
                case /* float param2 */ 7:
                    message.param2 = reader.float();
                    break;
                case /* float param3 */ 8:
                    message.param3 = reader.float();
                    break;
                case /* float param4 */ 9:
                    message.param4 = reader.float();
                    break;
                case /* int32 x */ 10:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 11:
                    message.y = reader.int32();
                    break;
                case /* float z */ 12:
                    message.z = reader.float();
                    break;
                case /* uint32 mission_type */ 13:
                    message.missionType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 seq = 1; */
        if (message.seq !== 0)
            writer.tag(1, WireType.Varint).uint32(message.seq);
        /* uint32 frame = 2; */
        if (message.frame !== 0)
            writer.tag(2, WireType.Varint).uint32(message.frame);
        /* uint32 command = 3; */
        if (message.command !== 0)
            writer.tag(3, WireType.Varint).uint32(message.command);
        /* uint32 current = 4; */
        if (message.current !== 0)
            writer.tag(4, WireType.Varint).uint32(message.current);
        /* uint32 autocontinue = 5; */
        if (message.autocontinue !== 0)
            writer.tag(5, WireType.Varint).uint32(message.autocontinue);
        /* float param1 = 6; */
        if (message.param1 !== 0)
            writer.tag(6, WireType.Bit32).float(message.param1);
        /* float param2 = 7; */
        if (message.param2 !== 0)
            writer.tag(7, WireType.Bit32).float(message.param2);
        /* float param3 = 8; */
        if (message.param3 !== 0)
            writer.tag(8, WireType.Bit32).float(message.param3);
        /* float param4 = 9; */
        if (message.param4 !== 0)
            writer.tag(9, WireType.Bit32).float(message.param4);
        /* int32 x = 10; */
        if (message.x !== 0)
            writer.tag(10, WireType.Varint).int32(message.x);
        /* int32 y = 11; */
        if (message.y !== 0)
            writer.tag(11, WireType.Varint).int32(message.y);
        /* float z = 12; */
        if (message.z !== 0)
            writer.tag(12, WireType.Bit32).float(message.z);
        /* uint32 mission_type = 13; */
        if (message.missionType !== 0)
            writer.tag(13, WireType.Varint).uint32(message.missionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.MissionItem
 */
export const MissionItem = new MissionItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionImportData$Type extends MessageType<MissionImportData> {
    constructor() {
        super("mavsdk.rpc.mission_raw.MissionImportData", [
            { no: 1, name: "mission_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissionItem },
            { no: 2, name: "geofence_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissionItem },
            { no: 3, name: "rally_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissionItem }
        ]);
    }
    create(value?: PartialMessage<MissionImportData>): MissionImportData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.missionItems = [];
        message.geofenceItems = [];
        message.rallyItems = [];
        if (value !== undefined)
            reflectionMergePartial<MissionImportData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionImportData): MissionImportData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items */ 1:
                    message.missionItems.push(MissionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mavsdk.rpc.mission_raw.MissionItem geofence_items */ 2:
                    message.geofenceItems.push(MissionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mavsdk.rpc.mission_raw.MissionItem rally_items */ 3:
                    message.rallyItems.push(MissionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionImportData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.mission_raw.MissionItem mission_items = 1; */
        for (let i = 0; i < message.missionItems.length; i++)
            MissionItem.internalBinaryWrite(message.missionItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated mavsdk.rpc.mission_raw.MissionItem geofence_items = 2; */
        for (let i = 0; i < message.geofenceItems.length; i++)
            MissionItem.internalBinaryWrite(message.geofenceItems[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated mavsdk.rpc.mission_raw.MissionItem rally_items = 3; */
        for (let i = 0; i < message.rallyItems.length; i++)
            MissionItem.internalBinaryWrite(message.rallyItems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.MissionImportData
 */
export const MissionImportData = new MissionImportData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionRawResult$Type extends MessageType<MissionRawResult> {
    constructor() {
        super("mavsdk.rpc.mission_raw.MissionRawResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.mission_raw.MissionRawResult.Result", MissionRawResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MissionRawResult>): MissionRawResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<MissionRawResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionRawResult): MissionRawResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw.MissionRawResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionRawResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw.MissionRawResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw.MissionRawResult
 */
export const MissionRawResult = new MissionRawResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.mission_raw.MissionRawService
 */
export const MissionRawService = new ServiceType("mavsdk.rpc.mission_raw.MissionRawService", [
    { name: "UploadMission", options: {}, I: UploadMissionRequest, O: UploadMissionResponse },
    { name: "UploadGeofence", options: {}, I: UploadGeofenceRequest, O: UploadGeofenceResponse },
    { name: "UploadRallyPoints", options: {}, I: UploadRallyPointsRequest, O: UploadRallyPointsResponse },
    { name: "CancelMissionUpload", options: { "mavsdk.options.async_type": "SYNC" }, I: CancelMissionUploadRequest, O: CancelMissionUploadResponse },
    { name: "DownloadMission", options: {}, I: DownloadMissionRequest, O: DownloadMissionResponse },
    { name: "CancelMissionDownload", options: { "mavsdk.options.async_type": "SYNC" }, I: CancelMissionDownloadRequest, O: CancelMissionDownloadResponse },
    { name: "StartMission", options: {}, I: StartMissionRequest, O: StartMissionResponse },
    { name: "PauseMission", options: {}, I: PauseMissionRequest, O: PauseMissionResponse },
    { name: "ClearMission", options: {}, I: ClearMissionRequest, O: ClearMissionResponse },
    { name: "SetCurrentMissionItem", options: {}, I: SetCurrentMissionItemRequest, O: SetCurrentMissionItemResponse },
    { name: "SubscribeMissionProgress", serverStreaming: true, options: {}, I: SubscribeMissionProgressRequest, O: MissionProgressResponse },
    { name: "SubscribeMissionChanged", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC" }, I: SubscribeMissionChangedRequest, O: MissionChangedResponse },
    { name: "ImportQgroundcontrolMission", options: { "mavsdk.options.async_type": "SYNC" }, I: ImportQgroundcontrolMissionRequest, O: ImportQgroundcontrolMissionResponse },
    { name: "ImportQgroundcontrolMissionFromString", options: { "mavsdk.options.async_type": "SYNC" }, I: ImportQgroundcontrolMissionFromStringRequest, O: ImportQgroundcontrolMissionFromStringResponse }
]);
