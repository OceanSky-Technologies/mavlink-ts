/* eslint-disable */

// source: events/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.events.Event', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.EventsResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.EventsResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.EventsResult.Result', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.HealthAndArmingCheckMode', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.HealthAndArmingCheckProblem', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.HealthAndArmingCheckReport', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.HealthAndArmingChecksResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.HealthComponentReport', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.LogLevel', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.SubscribeEventsRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.Event.displayName = 'proto.mavsdk.rpc.events.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.HealthAndArmingCheckProblem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.displayName = 'proto.mavsdk.rpc.events.HealthAndArmingCheckProblem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.events.HealthAndArmingCheckMode.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.events.HealthAndArmingCheckMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.HealthAndArmingCheckMode.displayName = 'proto.mavsdk.rpc.events.HealthAndArmingCheckMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.HealthComponentReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.HealthComponentReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.HealthComponentReport.displayName = 'proto.mavsdk.rpc.events.HealthComponentReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.events.HealthAndArmingCheckReport.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.events.HealthAndArmingCheckReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.HealthAndArmingCheckReport.displayName = 'proto.mavsdk.rpc.events.HealthAndArmingCheckReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.EventsResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.EventsResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.EventsResult.displayName = 'proto.mavsdk.rpc.events.EventsResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.SubscribeEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.SubscribeEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.SubscribeEventsRequest.displayName = 'proto.mavsdk.rpc.events.SubscribeEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.EventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.EventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.EventsResponse.displayName = 'proto.mavsdk.rpc.events.EventsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.displayName = 'proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.HealthAndArmingChecksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.displayName = 'proto.mavsdk.rpc.events.HealthAndArmingChecksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.displayName = 'proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.displayName = 'proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    compid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    logLevel: jspb.Message.getFieldWithDefault(msg, 4, 0),
    eventNamespace: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eventName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.Event}
 */
proto.mavsdk.rpc.events.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.Event;
  return proto.mavsdk.rpc.events.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.Event}
 */
proto.mavsdk.rpc.events.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCompid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {!proto.mavsdk.rpc.events.LogLevel} */ (reader.readEnum());
      msg.setLogLevel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventNamespace(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLogLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getEventNamespace();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 compid = 1;
 * @return {number}
 */
proto.mavsdk.rpc.events.Event.prototype.getCompid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.events.Event} returns this
 */
proto.mavsdk.rpc.events.Event.prototype.setCompid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.mavsdk.rpc.events.Event.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.Event} returns this
 */
proto.mavsdk.rpc.events.Event.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.mavsdk.rpc.events.Event.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.Event} returns this
 */
proto.mavsdk.rpc.events.Event.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional LogLevel log_level = 4;
 * @return {!proto.mavsdk.rpc.events.LogLevel}
 */
proto.mavsdk.rpc.events.Event.prototype.getLogLevel = function() {
  return /** @type {!proto.mavsdk.rpc.events.LogLevel} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.mavsdk.rpc.events.LogLevel} value
 * @return {!proto.mavsdk.rpc.events.Event} returns this
 */
proto.mavsdk.rpc.events.Event.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string event_namespace = 5;
 * @return {string}
 */
proto.mavsdk.rpc.events.Event.prototype.getEventNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.Event} returns this
 */
proto.mavsdk.rpc.events.Event.prototype.setEventNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string event_name = 6;
 * @return {string}
 */
proto.mavsdk.rpc.events.Event.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.Event} returns this
 */
proto.mavsdk.rpc.events.Event.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    logLevel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    healthComponent: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.HealthAndArmingCheckProblem;
  return proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {!proto.mavsdk.rpc.events.LogLevel} */ (reader.readEnum());
      msg.setLogLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHealthComponent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLogLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getHealthComponent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LogLevel log_level = 3;
 * @return {!proto.mavsdk.rpc.events.LogLevel}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.getLogLevel = function() {
  return /** @type {!proto.mavsdk.rpc.events.LogLevel} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mavsdk.rpc.events.LogLevel} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string health_component = 4;
 * @return {string}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.getHealthComponent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.prototype.setHealthComponent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.HealthAndArmingCheckMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    modeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    canArmOrRun: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    problemsList: jspb.Message.toObjectList(msg.getProblemsList(),
    proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.HealthAndArmingCheckMode;
  return proto.mavsdk.rpc.events.HealthAndArmingCheckMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModeName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanArmOrRun(value);
      break;
    case 3:
      var value = new proto.mavsdk.rpc.events.HealthAndArmingCheckProblem;
      reader.readMessage(value,proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.deserializeBinaryFromReader);
      msg.addProblems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.HealthAndArmingCheckMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCanArmOrRun();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getProblemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string mode_name = 1;
 * @return {string}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.getModeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.setModeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool can_arm_or_run = 2;
 * @return {boolean}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.getCanArmOrRun = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.setCanArmOrRun = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated HealthAndArmingCheckProblem problems = 3;
 * @return {!Array<!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem>}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.getProblemsList = function() {
  return /** @type{!Array<!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mavsdk.rpc.events.HealthAndArmingCheckProblem, 3));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem>} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode} returns this
*/
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.setProblemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.addProblems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mavsdk.rpc.events.HealthAndArmingCheckProblem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckMode} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckMode.prototype.clearProblemsList = function() {
  return this.setProblemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.HealthComponentReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.HealthComponentReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthComponentReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isPresent: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    hasError: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    hasWarning: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.HealthComponentReport}
 */
proto.mavsdk.rpc.events.HealthComponentReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.HealthComponentReport;
  return proto.mavsdk.rpc.events.HealthComponentReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.HealthComponentReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.HealthComponentReport}
 */
proto.mavsdk.rpc.events.HealthComponentReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPresent(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasError(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasWarning(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.HealthComponentReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.HealthComponentReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthComponentReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsPresent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getHasError();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHasWarning();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.HealthComponentReport} returns this
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.HealthComponentReport} returns this
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_present = 3;
 * @return {boolean}
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.getIsPresent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.events.HealthComponentReport} returns this
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.setIsPresent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool has_error = 4;
 * @return {boolean}
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.getHasError = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.events.HealthComponentReport} returns this
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.setHasError = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool has_warning = 5;
 * @return {boolean}
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.getHasWarning = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.events.HealthComponentReport} returns this
 */
proto.mavsdk.rpc.events.HealthComponentReport.prototype.setHasWarning = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.HealthAndArmingCheckReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentModeIntention: (f = msg.getCurrentModeIntention()) && proto.mavsdk.rpc.events.HealthAndArmingCheckMode.toObject(includeInstance, f),
    healthComponentsList: jspb.Message.toObjectList(msg.getHealthComponentsList(),
    proto.mavsdk.rpc.events.HealthComponentReport.toObject, includeInstance),
    allProblemsList: jspb.Message.toObjectList(msg.getAllProblemsList(),
    proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.HealthAndArmingCheckReport;
  return proto.mavsdk.rpc.events.HealthAndArmingCheckReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.events.HealthAndArmingCheckMode;
      reader.readMessage(value,proto.mavsdk.rpc.events.HealthAndArmingCheckMode.deserializeBinaryFromReader);
      msg.setCurrentModeIntention(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.events.HealthComponentReport;
      reader.readMessage(value,proto.mavsdk.rpc.events.HealthComponentReport.deserializeBinaryFromReader);
      msg.addHealthComponents(value);
      break;
    case 3:
      var value = new proto.mavsdk.rpc.events.HealthAndArmingCheckProblem;
      reader.readMessage(value,proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.deserializeBinaryFromReader);
      msg.addAllProblems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.HealthAndArmingCheckReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentModeIntention();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.events.HealthAndArmingCheckMode.serializeBinaryToWriter
    );
  }
  f = message.getHealthComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mavsdk.rpc.events.HealthComponentReport.serializeBinaryToWriter
    );
  }
  f = message.getAllProblemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.mavsdk.rpc.events.HealthAndArmingCheckProblem.serializeBinaryToWriter
    );
  }
};


/**
 * optional HealthAndArmingCheckMode current_mode_intention = 1;
 * @return {?proto.mavsdk.rpc.events.HealthAndArmingCheckMode}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.getCurrentModeIntention = function() {
  return /** @type{?proto.mavsdk.rpc.events.HealthAndArmingCheckMode} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.events.HealthAndArmingCheckMode, 1));
};


/**
 * @param {?proto.mavsdk.rpc.events.HealthAndArmingCheckMode|undefined} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} returns this
*/
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.setCurrentModeIntention = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.clearCurrentModeIntention = function() {
  return this.setCurrentModeIntention(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.hasCurrentModeIntention = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated HealthComponentReport health_components = 2;
 * @return {!Array<!proto.mavsdk.rpc.events.HealthComponentReport>}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.getHealthComponentsList = function() {
  return /** @type{!Array<!proto.mavsdk.rpc.events.HealthComponentReport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mavsdk.rpc.events.HealthComponentReport, 2));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.events.HealthComponentReport>} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} returns this
*/
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.setHealthComponentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mavsdk.rpc.events.HealthComponentReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.events.HealthComponentReport}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.addHealthComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mavsdk.rpc.events.HealthComponentReport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.clearHealthComponentsList = function() {
  return this.setHealthComponentsList([]);
};


/**
 * repeated HealthAndArmingCheckProblem all_problems = 3;
 * @return {!Array<!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem>}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.getAllProblemsList = function() {
  return /** @type{!Array<!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mavsdk.rpc.events.HealthAndArmingCheckProblem, 3));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem>} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} returns this
*/
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.setAllProblemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckProblem}
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.addAllProblems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mavsdk.rpc.events.HealthAndArmingCheckProblem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingCheckReport} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingCheckReport.prototype.clearAllProblemsList = function() {
  return this.setAllProblemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.EventsResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.EventsResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.EventsResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.EventsResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.EventsResult}
 */
proto.mavsdk.rpc.events.EventsResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.EventsResult;
  return proto.mavsdk.rpc.events.EventsResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.EventsResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.EventsResult}
 */
proto.mavsdk.rpc.events.EventsResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.events.EventsResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.EventsResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.EventsResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.EventsResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.EventsResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.events.EventsResult.Result = {
  RESULT_SUCCESS: 0,
  RESULT_NOT_AVAILABLE: 1,
  RESULT_CONNECTION_ERROR: 2,
  RESULT_UNSUPPORTED: 3,
  RESULT_DENIED: 4,
  RESULT_FAILED: 5,
  RESULT_TIMEOUT: 6,
  RESULT_NO_SYSTEM: 7
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.events.EventsResult.Result}
 */
proto.mavsdk.rpc.events.EventsResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.events.EventsResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.events.EventsResult.Result} value
 * @return {!proto.mavsdk.rpc.events.EventsResult} returns this
 */
proto.mavsdk.rpc.events.EventsResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.events.EventsResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.events.EventsResult} returns this
 */
proto.mavsdk.rpc.events.EventsResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.SubscribeEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.SubscribeEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.SubscribeEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.SubscribeEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.SubscribeEventsRequest}
 */
proto.mavsdk.rpc.events.SubscribeEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.SubscribeEventsRequest;
  return proto.mavsdk.rpc.events.SubscribeEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.SubscribeEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.SubscribeEventsRequest}
 */
proto.mavsdk.rpc.events.SubscribeEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.SubscribeEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.SubscribeEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.SubscribeEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.SubscribeEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.EventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.EventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.EventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.EventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.mavsdk.rpc.events.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.EventsResponse}
 */
proto.mavsdk.rpc.events.EventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.EventsResponse;
  return proto.mavsdk.rpc.events.EventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.EventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.EventsResponse}
 */
proto.mavsdk.rpc.events.EventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.events.Event;
      reader.readMessage(value,proto.mavsdk.rpc.events.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.EventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.EventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.EventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.EventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.events.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.mavsdk.rpc.events.Event}
 */
proto.mavsdk.rpc.events.EventsResponse.prototype.getEvent = function() {
  return /** @type{?proto.mavsdk.rpc.events.Event} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.events.Event, 1));
};


/**
 * @param {?proto.mavsdk.rpc.events.Event|undefined} value
 * @return {!proto.mavsdk.rpc.events.EventsResponse} returns this
*/
proto.mavsdk.rpc.events.EventsResponse.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.events.EventsResponse} returns this
 */
proto.mavsdk.rpc.events.EventsResponse.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.events.EventsResponse.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest}
 */
proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest;
  return proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest}
 */
proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingChecksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    report: (f = msg.getReport()) && proto.mavsdk.rpc.events.HealthAndArmingCheckReport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingChecksResponse}
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.HealthAndArmingChecksResponse;
  return proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingChecksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingChecksResponse}
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.events.HealthAndArmingCheckReport;
      reader.readMessage(value,proto.mavsdk.rpc.events.HealthAndArmingCheckReport.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.HealthAndArmingChecksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.events.HealthAndArmingCheckReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional HealthAndArmingCheckReport report = 1;
 * @return {?proto.mavsdk.rpc.events.HealthAndArmingCheckReport}
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.prototype.getReport = function() {
  return /** @type{?proto.mavsdk.rpc.events.HealthAndArmingCheckReport} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.events.HealthAndArmingCheckReport, 1));
};


/**
 * @param {?proto.mavsdk.rpc.events.HealthAndArmingCheckReport|undefined} value
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingChecksResponse} returns this
*/
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.prototype.setReport = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.events.HealthAndArmingChecksResponse} returns this
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.prototype.clearReport = function() {
  return this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.events.HealthAndArmingChecksResponse.prototype.hasReport = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest;
  return proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsResult: (f = msg.getEventsResult()) && proto.mavsdk.rpc.events.EventsResult.toObject(includeInstance, f),
    report: (f = msg.getReport()) && proto.mavsdk.rpc.events.HealthAndArmingCheckReport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse;
  return proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.events.EventsResult;
      reader.readMessage(value,proto.mavsdk.rpc.events.EventsResult.deserializeBinaryFromReader);
      msg.setEventsResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.events.HealthAndArmingCheckReport;
      reader.readMessage(value,proto.mavsdk.rpc.events.HealthAndArmingCheckReport.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.events.EventsResult.serializeBinaryToWriter
    );
  }
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.events.HealthAndArmingCheckReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventsResult events_result = 1;
 * @return {?proto.mavsdk.rpc.events.EventsResult}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.getEventsResult = function() {
  return /** @type{?proto.mavsdk.rpc.events.EventsResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.events.EventsResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.events.EventsResult|undefined} value
 * @return {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse} returns this
*/
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.setEventsResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse} returns this
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.clearEventsResult = function() {
  return this.setEventsResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.hasEventsResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HealthAndArmingCheckReport report = 2;
 * @return {?proto.mavsdk.rpc.events.HealthAndArmingCheckReport}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.getReport = function() {
  return /** @type{?proto.mavsdk.rpc.events.HealthAndArmingCheckReport} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.events.HealthAndArmingCheckReport, 2));
};


/**
 * @param {?proto.mavsdk.rpc.events.HealthAndArmingCheckReport|undefined} value
 * @return {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse} returns this
*/
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.setReport = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse} returns this
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.clearReport = function() {
  return this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse.prototype.hasReport = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.events.LogLevel = {
  LOG_LEVEL_EMERGENCY: 0,
  LOG_LEVEL_ALERT: 1,
  LOG_LEVEL_CRITICAL: 2,
  LOG_LEVEL_ERROR: 3,
  LOG_LEVEL_WARNING: 4,
  LOG_LEVEL_NOTICE: 5,
  LOG_LEVEL_INFO: 6,
  LOG_LEVEL_DEBUG: 7
};

goog.object.extend(exports, proto.mavsdk.rpc.events);


// fix autocompletion
module.exports = exports;
