/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "events/events.proto" (package "mavsdk.rpc.events", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EventsService } from "./events";
import type { GetHealthAndArmingChecksReportResponse } from "./events";
import type { GetHealthAndArmingChecksReportRequest } from "./events";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { HealthAndArmingChecksResponse } from "./events";
import type { SubscribeHealthAndArmingChecksRequest } from "./events";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EventsResponse } from "./events";
import type { SubscribeEventsRequest } from "./events";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Get event notifications, such as takeoff, or arming checks
 *
 * @generated from protobuf service mavsdk.rpc.events.EventsService
 */
export interface IEventsServiceClient {
    /**
     *
     * Subscribe to event updates.
     *
     * @generated from protobuf rpc: SubscribeEvents(mavsdk.rpc.events.SubscribeEventsRequest) returns (stream mavsdk.rpc.events.EventsResponse);
     */
    subscribeEvents(input: SubscribeEventsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEventsRequest, EventsResponse>;
    /**
     *
     * Subscribe to arming check updates.
     *
     * @generated from protobuf rpc: SubscribeHealthAndArmingChecks(mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest) returns (stream mavsdk.rpc.events.HealthAndArmingChecksResponse);
     */
    subscribeHealthAndArmingChecks(input: SubscribeHealthAndArmingChecksRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHealthAndArmingChecksRequest, HealthAndArmingChecksResponse>;
    /**
     *
     * Get the latest report.
     *
     * @generated from protobuf rpc: GetHealthAndArmingChecksReport(mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest) returns (mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse);
     */
    getHealthAndArmingChecksReport(input: GetHealthAndArmingChecksReportRequest, options?: RpcOptions): UnaryCall<GetHealthAndArmingChecksReportRequest, GetHealthAndArmingChecksReportResponse>;
}
/**
 * Get event notifications, such as takeoff, or arming checks
 *
 * @generated from protobuf service mavsdk.rpc.events.EventsService
 */
export class EventsServiceClient implements IEventsServiceClient, ServiceInfo {
    typeName = EventsService.typeName;
    methods = EventsService.methods;
    options = EventsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *
     * Subscribe to event updates.
     *
     * @generated from protobuf rpc: SubscribeEvents(mavsdk.rpc.events.SubscribeEventsRequest) returns (stream mavsdk.rpc.events.EventsResponse);
     */
    subscribeEvents(input: SubscribeEventsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeEventsRequest, EventsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeEventsRequest, EventsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     *
     * Subscribe to arming check updates.
     *
     * @generated from protobuf rpc: SubscribeHealthAndArmingChecks(mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest) returns (stream mavsdk.rpc.events.HealthAndArmingChecksResponse);
     */
    subscribeHealthAndArmingChecks(input: SubscribeHealthAndArmingChecksRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHealthAndArmingChecksRequest, HealthAndArmingChecksResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeHealthAndArmingChecksRequest, HealthAndArmingChecksResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     *
     * Get the latest report.
     *
     * @generated from protobuf rpc: GetHealthAndArmingChecksReport(mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest) returns (mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse);
     */
    getHealthAndArmingChecksReport(input: GetHealthAndArmingChecksReportRequest, options?: RpcOptions): UnaryCall<GetHealthAndArmingChecksReportRequest, GetHealthAndArmingChecksReportResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetHealthAndArmingChecksReportRequest, GetHealthAndArmingChecksReportResponse>("unary", this._transport, method, opt, input);
    }
}
