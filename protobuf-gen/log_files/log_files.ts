/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "log_files/log_files.proto" (package "mavsdk.rpc.log_files", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.log_files.GetEntriesRequest
 */
export interface GetEntriesRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.log_files.GetEntriesResponse
 */
export interface GetEntriesResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_files.LogFilesResult log_files_result = 1;
     */
    logFilesResult?: LogFilesResult;
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.log_files.Entry entries = 2;
     */
    entries: Entry[]; // List of entries
}
/**
 * @generated from protobuf message mavsdk.rpc.log_files.SubscribeDownloadLogFileRequest
 */
export interface SubscribeDownloadLogFileRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_files.Entry entry = 1;
     */
    entry?: Entry; // Entry of the log file to download.
    /**
     * @generated from protobuf field: string path = 2;
     */
    path: string; // Path of where to download log file to.
}
/**
 * @generated from protobuf message mavsdk.rpc.log_files.DownloadLogFileResponse
 */
export interface DownloadLogFileResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_files.LogFilesResult log_files_result = 1;
     */
    logFilesResult?: LogFilesResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.log_files.ProgressData progress = 2;
     */
    progress?: ProgressData; // Progress if result is progress
}
/**
 * @generated from protobuf message mavsdk.rpc.log_files.EraseAllLogFilesRequest
 */
export interface EraseAllLogFilesRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.log_files.EraseAllLogFilesResponse
 */
export interface EraseAllLogFilesResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_files.LogFilesResult log_files_result = 1;
     */
    logFilesResult?: LogFilesResult;
}
/**
 *
 * Progress data coming when downloading a log file.
 *
 * @generated from protobuf message mavsdk.rpc.log_files.ProgressData
 */
export interface ProgressData {
    /**
     * @generated from protobuf field: float progress = 1;
     */
    progress: number; // Progress from 0 to 1
}
/**
 * Log file entry type.
 *
 * @generated from protobuf message mavsdk.rpc.log_files.Entry
 */
export interface Entry {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // ID of the log file, to specify a file to be downloaded
    /**
     * @generated from protobuf field: string date = 2;
     */
    date: string; // Date of the log file in UTC in ISO 8601 format "yyyy-mm-ddThh:mm:ssZ"
    /**
     * @generated from protobuf field: uint32 size_bytes = 3;
     */
    sizeBytes: number; // Size of file in bytes
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.log_files.LogFilesResult
 */
export interface LogFilesResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.log_files.LogFilesResult.Result result = 1;
     */
    result: LogFilesResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for calibration commands
 *
 * @generated from protobuf enum mavsdk.rpc.log_files.LogFilesResult.Result
 */
export enum LogFilesResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Progress update
     *
     * @generated from protobuf enum value: RESULT_NEXT = 2;
     */
    NEXT = 2,
    /**
     * No log files found
     *
     * @generated from protobuf enum value: RESULT_NO_LOGFILES = 3;
     */
    NO_LOGFILES = 3,
    /**
     * A timeout happened
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 4;
     */
    TIMEOUT = 4,
    /**
     * Invalid argument
     *
     * @generated from protobuf enum value: RESULT_INVALID_ARGUMENT = 5;
     */
    INVALID_ARGUMENT = 5,
    /**
     * File open failed
     *
     * @generated from protobuf enum value: RESULT_FILE_OPEN_FAILED = 6;
     */
    FILE_OPEN_FAILED = 6,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 7;
     */
    NO_SYSTEM = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class GetEntriesRequest$Type extends MessageType<GetEntriesRequest> {
    constructor() {
        super("mavsdk.rpc.log_files.GetEntriesRequest", []);
    }
    create(value?: PartialMessage<GetEntriesRequest>): GetEntriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetEntriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEntriesRequest): GetEntriesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetEntriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.GetEntriesRequest
 */
export const GetEntriesRequest = new GetEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEntriesResponse$Type extends MessageType<GetEntriesResponse> {
    constructor() {
        super("mavsdk.rpc.log_files.GetEntriesResponse", [
            { no: 1, name: "log_files_result", kind: "message", T: () => LogFilesResult },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Entry }
        ]);
    }
    create(value?: PartialMessage<GetEntriesResponse>): GetEntriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<GetEntriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEntriesResponse): GetEntriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_files.LogFilesResult log_files_result */ 1:
                    message.logFilesResult = LogFilesResult.internalBinaryRead(reader, reader.uint32(), options, message.logFilesResult);
                    break;
                case /* repeated mavsdk.rpc.log_files.Entry entries */ 2:
                    message.entries.push(Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEntriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_files.LogFilesResult log_files_result = 1; */
        if (message.logFilesResult)
            LogFilesResult.internalBinaryWrite(message.logFilesResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated mavsdk.rpc.log_files.Entry entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            Entry.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.GetEntriesResponse
 */
export const GetEntriesResponse = new GetEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeDownloadLogFileRequest$Type extends MessageType<SubscribeDownloadLogFileRequest> {
    constructor() {
        super("mavsdk.rpc.log_files.SubscribeDownloadLogFileRequest", [
            { no: 1, name: "entry", kind: "message", T: () => Entry },
            { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeDownloadLogFileRequest>): SubscribeDownloadLogFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<SubscribeDownloadLogFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeDownloadLogFileRequest): SubscribeDownloadLogFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_files.Entry entry */ 1:
                    message.entry = Entry.internalBinaryRead(reader, reader.uint32(), options, message.entry);
                    break;
                case /* string path */ 2:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeDownloadLogFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_files.Entry entry = 1; */
        if (message.entry)
            Entry.internalBinaryWrite(message.entry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string path = 2; */
        if (message.path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.SubscribeDownloadLogFileRequest
 */
export const SubscribeDownloadLogFileRequest = new SubscribeDownloadLogFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadLogFileResponse$Type extends MessageType<DownloadLogFileResponse> {
    constructor() {
        super("mavsdk.rpc.log_files.DownloadLogFileResponse", [
            { no: 1, name: "log_files_result", kind: "message", T: () => LogFilesResult },
            { no: 2, name: "progress", kind: "message", T: () => ProgressData }
        ]);
    }
    create(value?: PartialMessage<DownloadLogFileResponse>): DownloadLogFileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DownloadLogFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadLogFileResponse): DownloadLogFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_files.LogFilesResult log_files_result */ 1:
                    message.logFilesResult = LogFilesResult.internalBinaryRead(reader, reader.uint32(), options, message.logFilesResult);
                    break;
                case /* mavsdk.rpc.log_files.ProgressData progress */ 2:
                    message.progress = ProgressData.internalBinaryRead(reader, reader.uint32(), options, message.progress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadLogFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_files.LogFilesResult log_files_result = 1; */
        if (message.logFilesResult)
            LogFilesResult.internalBinaryWrite(message.logFilesResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.log_files.ProgressData progress = 2; */
        if (message.progress)
            ProgressData.internalBinaryWrite(message.progress, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.DownloadLogFileResponse
 */
export const DownloadLogFileResponse = new DownloadLogFileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EraseAllLogFilesRequest$Type extends MessageType<EraseAllLogFilesRequest> {
    constructor() {
        super("mavsdk.rpc.log_files.EraseAllLogFilesRequest", []);
    }
    create(value?: PartialMessage<EraseAllLogFilesRequest>): EraseAllLogFilesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EraseAllLogFilesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EraseAllLogFilesRequest): EraseAllLogFilesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EraseAllLogFilesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.EraseAllLogFilesRequest
 */
export const EraseAllLogFilesRequest = new EraseAllLogFilesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EraseAllLogFilesResponse$Type extends MessageType<EraseAllLogFilesResponse> {
    constructor() {
        super("mavsdk.rpc.log_files.EraseAllLogFilesResponse", [
            { no: 1, name: "log_files_result", kind: "message", T: () => LogFilesResult }
        ]);
    }
    create(value?: PartialMessage<EraseAllLogFilesResponse>): EraseAllLogFilesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EraseAllLogFilesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EraseAllLogFilesResponse): EraseAllLogFilesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_files.LogFilesResult log_files_result */ 1:
                    message.logFilesResult = LogFilesResult.internalBinaryRead(reader, reader.uint32(), options, message.logFilesResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EraseAllLogFilesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_files.LogFilesResult log_files_result = 1; */
        if (message.logFilesResult)
            LogFilesResult.internalBinaryWrite(message.logFilesResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.EraseAllLogFilesResponse
 */
export const EraseAllLogFilesResponse = new EraseAllLogFilesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressData$Type extends MessageType<ProgressData> {
    constructor() {
        super("mavsdk.rpc.log_files.ProgressData", [
            { no: 1, name: "progress", kind: "scalar", T: 2 /*ScalarType.FLOAT*/, options: { "mavsdk.options.default_value": "NaN" } }
        ]);
    }
    create(value?: PartialMessage<ProgressData>): ProgressData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.progress = 0;
        if (value !== undefined)
            reflectionMergePartial<ProgressData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressData): ProgressData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float progress */ 1:
                    message.progress = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProgressData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float progress = 1; */
        if (message.progress !== 0)
            writer.tag(1, WireType.Bit32).float(message.progress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.ProgressData
 */
export const ProgressData = new ProgressData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Entry$Type extends MessageType<Entry> {
    constructor() {
        super("mavsdk.rpc.log_files.Entry", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "size_bytes", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Entry>): Entry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.date = "";
        message.sizeBytes = 0;
        if (value !== undefined)
            reflectionMergePartial<Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Entry): Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string date */ 2:
                    message.date = reader.string();
                    break;
                case /* uint32 size_bytes */ 3:
                    message.sizeBytes = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string date = 2; */
        if (message.date !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.date);
        /* uint32 size_bytes = 3; */
        if (message.sizeBytes !== 0)
            writer.tag(3, WireType.Varint).uint32(message.sizeBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.Entry
 */
export const Entry = new Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogFilesResult$Type extends MessageType<LogFilesResult> {
    constructor() {
        super("mavsdk.rpc.log_files.LogFilesResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.log_files.LogFilesResult.Result", LogFilesResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogFilesResult>): LogFilesResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<LogFilesResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogFilesResult): LogFilesResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.log_files.LogFilesResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogFilesResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.log_files.LogFilesResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.log_files.LogFilesResult
 */
export const LogFilesResult = new LogFilesResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.log_files.LogFilesService
 */
export const LogFilesService = new ServiceType("mavsdk.rpc.log_files.LogFilesService", [
    { name: "GetEntries", options: {}, I: GetEntriesRequest, O: GetEntriesResponse },
    { name: "SubscribeDownloadLogFile", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC", "mavsdk.options.is_finite": true }, I: SubscribeDownloadLogFileRequest, O: DownloadLogFileResponse },
    { name: "EraseAllLogFiles", options: { "mavsdk.options.async_type": "SYNC" }, I: EraseAllLogFilesRequest, O: EraseAllLogFilesResponse }
]);
