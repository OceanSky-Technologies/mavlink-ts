/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "log_files/log_files.proto" (package "mavsdk.rpc.log_files", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { LogFilesService } from "./log_files";
import type { EraseAllLogFilesResponse } from "./log_files";
import type { EraseAllLogFilesRequest } from "./log_files";
import type { DownloadLogFileResponse } from "./log_files";
import type { SubscribeDownloadLogFileRequest } from "./log_files";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetEntriesResponse } from "./log_files";
import type { GetEntriesRequest } from "./log_files";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Allow to download log files from the vehicle after a flight is complete.
 * For log streaming during flight check the logging plugin.
 *
 * @generated from protobuf service mavsdk.rpc.log_files.LogFilesService
 */
export interface ILogFilesServiceClient {
    /**
     * Get List of log files.
     *
     * @generated from protobuf rpc: GetEntries(mavsdk.rpc.log_files.GetEntriesRequest) returns (mavsdk.rpc.log_files.GetEntriesResponse);
     */
    getEntries(input: GetEntriesRequest, options?: RpcOptions): UnaryCall<GetEntriesRequest, GetEntriesResponse>;
    /**
     * Download log file.
     *
     * @generated from protobuf rpc: SubscribeDownloadLogFile(mavsdk.rpc.log_files.SubscribeDownloadLogFileRequest) returns (stream mavsdk.rpc.log_files.DownloadLogFileResponse);
     */
    subscribeDownloadLogFile(input: SubscribeDownloadLogFileRequest, options?: RpcOptions): ServerStreamingCall<SubscribeDownloadLogFileRequest, DownloadLogFileResponse>;
    /**
     * Erase all log files.
     *
     * @generated from protobuf rpc: EraseAllLogFiles(mavsdk.rpc.log_files.EraseAllLogFilesRequest) returns (mavsdk.rpc.log_files.EraseAllLogFilesResponse);
     */
    eraseAllLogFiles(input: EraseAllLogFilesRequest, options?: RpcOptions): UnaryCall<EraseAllLogFilesRequest, EraseAllLogFilesResponse>;
}
/**
 * Allow to download log files from the vehicle after a flight is complete.
 * For log streaming during flight check the logging plugin.
 *
 * @generated from protobuf service mavsdk.rpc.log_files.LogFilesService
 */
export class LogFilesServiceClient implements ILogFilesServiceClient, ServiceInfo {
    typeName = LogFilesService.typeName;
    methods = LogFilesService.methods;
    options = LogFilesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get List of log files.
     *
     * @generated from protobuf rpc: GetEntries(mavsdk.rpc.log_files.GetEntriesRequest) returns (mavsdk.rpc.log_files.GetEntriesResponse);
     */
    getEntries(input: GetEntriesRequest, options?: RpcOptions): UnaryCall<GetEntriesRequest, GetEntriesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEntriesRequest, GetEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Download log file.
     *
     * @generated from protobuf rpc: SubscribeDownloadLogFile(mavsdk.rpc.log_files.SubscribeDownloadLogFileRequest) returns (stream mavsdk.rpc.log_files.DownloadLogFileResponse);
     */
    subscribeDownloadLogFile(input: SubscribeDownloadLogFileRequest, options?: RpcOptions): ServerStreamingCall<SubscribeDownloadLogFileRequest, DownloadLogFileResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeDownloadLogFileRequest, DownloadLogFileResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Erase all log files.
     *
     * @generated from protobuf rpc: EraseAllLogFiles(mavsdk.rpc.log_files.EraseAllLogFilesRequest) returns (mavsdk.rpc.log_files.EraseAllLogFilesResponse);
     */
    eraseAllLogFiles(input: EraseAllLogFilesRequest, options?: RpcOptions): UnaryCall<EraseAllLogFilesRequest, EraseAllLogFilesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<EraseAllLogFilesRequest, EraseAllLogFilesResponse>("unary", this._transport, method, opt, input);
    }
}
