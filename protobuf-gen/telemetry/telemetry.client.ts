/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "telemetry/telemetry.proto" (package "mavsdk.rpc.telemetry", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TelemetryService } from "./telemetry";
import type { GetGpsGlobalOriginResponse } from "./telemetry";
import type { GetGpsGlobalOriginRequest } from "./telemetry";
import type { SetRateAltitudeResponse } from "./telemetry";
import type { SetRateAltitudeRequest } from "./telemetry";
import type { SetRateDistanceSensorResponse } from "./telemetry";
import type { SetRateDistanceSensorRequest } from "./telemetry";
import type { SetRateUnixEpochTimeResponse } from "./telemetry";
import type { SetRateUnixEpochTimeRequest } from "./telemetry";
import type { SetRateRawImuResponse } from "./telemetry";
import type { SetRateRawImuRequest } from "./telemetry";
import type { SetRateScaledImuResponse } from "./telemetry";
import type { SetRateScaledImuRequest } from "./telemetry";
import type { SetRateImuResponse } from "./telemetry";
import type { SetRateImuRequest } from "./telemetry";
import type { SetRateFixedwingMetricsResponse } from "./telemetry";
import type { SetRateFixedwingMetricsRequest } from "./telemetry";
import type { SetRateGroundTruthResponse } from "./telemetry";
import type { SetRateGroundTruthRequest } from "./telemetry";
import type { SetRatePositionVelocityNedResponse } from "./telemetry";
import type { SetRatePositionVelocityNedRequest } from "./telemetry";
import type { SetRateOdometryResponse } from "./telemetry";
import type { SetRateOdometryRequest } from "./telemetry";
import type { SetRateActuatorOutputStatusResponse } from "./telemetry";
import type { SetRateActuatorOutputStatusRequest } from "./telemetry";
import type { SetRateActuatorControlTargetResponse } from "./telemetry";
import type { SetRateActuatorControlTargetRequest } from "./telemetry";
import type { SetRateRcStatusResponse } from "./telemetry";
import type { SetRateRcStatusRequest } from "./telemetry";
import type { SetRateBatteryResponse } from "./telemetry";
import type { SetRateBatteryRequest } from "./telemetry";
import type { SetRateGpsInfoResponse } from "./telemetry";
import type { SetRateGpsInfoRequest } from "./telemetry";
import type { SetRateVelocityNedResponse } from "./telemetry";
import type { SetRateVelocityNedRequest } from "./telemetry";
import type { SetRateAttitudeEulerResponse } from "./telemetry";
import type { SetRateAttitudeEulerRequest } from "./telemetry";
import type { SetRateAttitudeQuaternionResponse } from "./telemetry";
import type { SetRateAttitudeQuaternionRequest } from "./telemetry";
import type { SetRateVtolStateResponse } from "./telemetry";
import type { SetRateVtolStateRequest } from "./telemetry";
import type { SetRateLandedStateResponse } from "./telemetry";
import type { SetRateLandedStateRequest } from "./telemetry";
import type { SetRateInAirResponse } from "./telemetry";
import type { SetRateInAirRequest } from "./telemetry";
import type { SetRateHomeResponse } from "./telemetry";
import type { SetRateHomeRequest } from "./telemetry";
import type { SetRatePositionResponse } from "./telemetry";
import type { SetRatePositionRequest } from "./telemetry";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { AltitudeResponse } from "./telemetry";
import type { SubscribeAltitudeRequest } from "./telemetry";
import type { HeadingResponse } from "./telemetry";
import type { SubscribeHeadingRequest } from "./telemetry";
import type { ScaledPressureResponse } from "./telemetry";
import type { SubscribeScaledPressureRequest } from "./telemetry";
import type { DistanceSensorResponse } from "./telemetry";
import type { SubscribeDistanceSensorRequest } from "./telemetry";
import type { UnixEpochTimeResponse } from "./telemetry";
import type { SubscribeUnixEpochTimeRequest } from "./telemetry";
import type { HealthAllOkResponse } from "./telemetry";
import type { SubscribeHealthAllOkRequest } from "./telemetry";
import type { RawImuResponse } from "./telemetry";
import type { SubscribeRawImuRequest } from "./telemetry";
import type { ScaledImuResponse } from "./telemetry";
import type { SubscribeScaledImuRequest } from "./telemetry";
import type { ImuResponse } from "./telemetry";
import type { SubscribeImuRequest } from "./telemetry";
import type { FixedwingMetricsResponse } from "./telemetry";
import type { SubscribeFixedwingMetricsRequest } from "./telemetry";
import type { GroundTruthResponse } from "./telemetry";
import type { SubscribeGroundTruthRequest } from "./telemetry";
import type { PositionVelocityNedResponse } from "./telemetry";
import type { SubscribePositionVelocityNedRequest } from "./telemetry";
import type { OdometryResponse } from "./telemetry";
import type { SubscribeOdometryRequest } from "./telemetry";
import type { ActuatorOutputStatusResponse } from "./telemetry";
import type { SubscribeActuatorOutputStatusRequest } from "./telemetry";
import type { ActuatorControlTargetResponse } from "./telemetry";
import type { SubscribeActuatorControlTargetRequest } from "./telemetry";
import type { StatusTextResponse } from "./telemetry";
import type { SubscribeStatusTextRequest } from "./telemetry";
import type { RcStatusResponse } from "./telemetry";
import type { SubscribeRcStatusRequest } from "./telemetry";
import type { HealthResponse } from "./telemetry";
import type { SubscribeHealthRequest } from "./telemetry";
import type { FlightModeResponse } from "./telemetry";
import type { SubscribeFlightModeRequest } from "./telemetry";
import type { BatteryResponse } from "./telemetry";
import type { SubscribeBatteryRequest } from "./telemetry";
import type { RawGpsResponse } from "./telemetry";
import type { SubscribeRawGpsRequest } from "./telemetry";
import type { GpsInfoResponse } from "./telemetry";
import type { SubscribeGpsInfoRequest } from "./telemetry";
import type { VelocityNedResponse } from "./telemetry";
import type { SubscribeVelocityNedRequest } from "./telemetry";
import type { AttitudeAngularVelocityBodyResponse } from "./telemetry";
import type { SubscribeAttitudeAngularVelocityBodyRequest } from "./telemetry";
import type { AttitudeEulerResponse } from "./telemetry";
import type { SubscribeAttitudeEulerRequest } from "./telemetry";
import type { AttitudeQuaternionResponse } from "./telemetry";
import type { SubscribeAttitudeQuaternionRequest } from "./telemetry";
import type { VtolStateResponse } from "./telemetry";
import type { SubscribeVtolStateRequest } from "./telemetry";
import type { ArmedResponse } from "./telemetry";
import type { SubscribeArmedRequest } from "./telemetry";
import type { LandedStateResponse } from "./telemetry";
import type { SubscribeLandedStateRequest } from "./telemetry";
import type { InAirResponse } from "./telemetry";
import type { SubscribeInAirRequest } from "./telemetry";
import type { HomeResponse } from "./telemetry";
import type { SubscribeHomeRequest } from "./telemetry";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PositionResponse } from "./telemetry";
import type { SubscribePositionRequest } from "./telemetry";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Allow users to get vehicle telemetry and state information
 * (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
 *
 * @generated from protobuf service mavsdk.rpc.telemetry.TelemetryService
 */
export interface ITelemetryServiceClient {
    /**
     * Subscribe to 'position' updates.
     *
     * @generated from protobuf rpc: SubscribePosition(mavsdk.rpc.telemetry.SubscribePositionRequest) returns (stream mavsdk.rpc.telemetry.PositionResponse);
     */
    subscribePosition(input: SubscribePositionRequest, options?: RpcOptions): ServerStreamingCall<SubscribePositionRequest, PositionResponse>;
    /**
     * Subscribe to 'home position' updates.
     *
     * @generated from protobuf rpc: SubscribeHome(mavsdk.rpc.telemetry.SubscribeHomeRequest) returns (stream mavsdk.rpc.telemetry.HomeResponse);
     */
    subscribeHome(input: SubscribeHomeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHomeRequest, HomeResponse>;
    /**
     * Subscribe to in-air updates.
     *
     * @generated from protobuf rpc: SubscribeInAir(mavsdk.rpc.telemetry.SubscribeInAirRequest) returns (stream mavsdk.rpc.telemetry.InAirResponse);
     */
    subscribeInAir(input: SubscribeInAirRequest, options?: RpcOptions): ServerStreamingCall<SubscribeInAirRequest, InAirResponse>;
    /**
     * Subscribe to landed state updates
     *
     * @generated from protobuf rpc: SubscribeLandedState(mavsdk.rpc.telemetry.SubscribeLandedStateRequest) returns (stream mavsdk.rpc.telemetry.LandedStateResponse);
     */
    subscribeLandedState(input: SubscribeLandedStateRequest, options?: RpcOptions): ServerStreamingCall<SubscribeLandedStateRequest, LandedStateResponse>;
    /**
     * Subscribe to armed updates.
     *
     * @generated from protobuf rpc: SubscribeArmed(mavsdk.rpc.telemetry.SubscribeArmedRequest) returns (stream mavsdk.rpc.telemetry.ArmedResponse);
     */
    subscribeArmed(input: SubscribeArmedRequest, options?: RpcOptions): ServerStreamingCall<SubscribeArmedRequest, ArmedResponse>;
    /**
     * subscribe to vtol state Updates
     *
     * @generated from protobuf rpc: SubscribeVtolState(mavsdk.rpc.telemetry.SubscribeVtolStateRequest) returns (stream mavsdk.rpc.telemetry.VtolStateResponse);
     */
    subscribeVtolState(input: SubscribeVtolStateRequest, options?: RpcOptions): ServerStreamingCall<SubscribeVtolStateRequest, VtolStateResponse>;
    /**
     * Subscribe to 'attitude' updates (quaternion).
     *
     * @generated from protobuf rpc: SubscribeAttitudeQuaternion(mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest) returns (stream mavsdk.rpc.telemetry.AttitudeQuaternionResponse);
     */
    subscribeAttitudeQuaternion(input: SubscribeAttitudeQuaternionRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAttitudeQuaternionRequest, AttitudeQuaternionResponse>;
    /**
     * Subscribe to 'attitude' updates (Euler).
     *
     * @generated from protobuf rpc: SubscribeAttitudeEuler(mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest) returns (stream mavsdk.rpc.telemetry.AttitudeEulerResponse);
     */
    subscribeAttitudeEuler(input: SubscribeAttitudeEulerRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAttitudeEulerRequest, AttitudeEulerResponse>;
    /**
     * Subscribe to 'attitude' updates (angular velocity)
     *
     * @generated from protobuf rpc: SubscribeAttitudeAngularVelocityBody(mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest) returns (stream mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse);
     */
    subscribeAttitudeAngularVelocityBody(input: SubscribeAttitudeAngularVelocityBodyRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAttitudeAngularVelocityBodyRequest, AttitudeAngularVelocityBodyResponse>;
    /**
     * Subscribe to 'ground speed' updates (NED).
     *
     * @generated from protobuf rpc: SubscribeVelocityNed(mavsdk.rpc.telemetry.SubscribeVelocityNedRequest) returns (stream mavsdk.rpc.telemetry.VelocityNedResponse);
     */
    subscribeVelocityNed(input: SubscribeVelocityNedRequest, options?: RpcOptions): ServerStreamingCall<SubscribeVelocityNedRequest, VelocityNedResponse>;
    /**
     * Subscribe to 'GPS info' updates.
     *
     * @generated from protobuf rpc: SubscribeGpsInfo(mavsdk.rpc.telemetry.SubscribeGpsInfoRequest) returns (stream mavsdk.rpc.telemetry.GpsInfoResponse);
     */
    subscribeGpsInfo(input: SubscribeGpsInfoRequest, options?: RpcOptions): ServerStreamingCall<SubscribeGpsInfoRequest, GpsInfoResponse>;
    /**
     * Subscribe to 'Raw GPS' updates.
     *
     * @generated from protobuf rpc: SubscribeRawGps(mavsdk.rpc.telemetry.SubscribeRawGpsRequest) returns (stream mavsdk.rpc.telemetry.RawGpsResponse);
     */
    subscribeRawGps(input: SubscribeRawGpsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRawGpsRequest, RawGpsResponse>;
    /**
     * Subscribe to 'battery' updates.
     *
     * @generated from protobuf rpc: SubscribeBattery(mavsdk.rpc.telemetry.SubscribeBatteryRequest) returns (stream mavsdk.rpc.telemetry.BatteryResponse);
     */
    subscribeBattery(input: SubscribeBatteryRequest, options?: RpcOptions): ServerStreamingCall<SubscribeBatteryRequest, BatteryResponse>;
    /**
     * Subscribe to 'flight mode' updates.
     *
     * @generated from protobuf rpc: SubscribeFlightMode(mavsdk.rpc.telemetry.SubscribeFlightModeRequest) returns (stream mavsdk.rpc.telemetry.FlightModeResponse);
     */
    subscribeFlightMode(input: SubscribeFlightModeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFlightModeRequest, FlightModeResponse>;
    /**
     * Subscribe to 'health' updates.
     *
     * @generated from protobuf rpc: SubscribeHealth(mavsdk.rpc.telemetry.SubscribeHealthRequest) returns (stream mavsdk.rpc.telemetry.HealthResponse);
     */
    subscribeHealth(input: SubscribeHealthRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHealthRequest, HealthResponse>;
    /**
     * Subscribe to 'RC status' updates.
     *
     * @generated from protobuf rpc: SubscribeRcStatus(mavsdk.rpc.telemetry.SubscribeRcStatusRequest) returns (stream mavsdk.rpc.telemetry.RcStatusResponse);
     */
    subscribeRcStatus(input: SubscribeRcStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRcStatusRequest, RcStatusResponse>;
    /**
     * Subscribe to 'status text' updates.
     *
     * @generated from protobuf rpc: SubscribeStatusText(mavsdk.rpc.telemetry.SubscribeStatusTextRequest) returns (stream mavsdk.rpc.telemetry.StatusTextResponse);
     */
    subscribeStatusText(input: SubscribeStatusTextRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStatusTextRequest, StatusTextResponse>;
    /**
     * Subscribe to 'actuator control target' updates.
     *
     * @generated from protobuf rpc: SubscribeActuatorControlTarget(mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest) returns (stream mavsdk.rpc.telemetry.ActuatorControlTargetResponse);
     */
    subscribeActuatorControlTarget(input: SubscribeActuatorControlTargetRequest, options?: RpcOptions): ServerStreamingCall<SubscribeActuatorControlTargetRequest, ActuatorControlTargetResponse>;
    /**
     * Subscribe to 'actuator output status' updates.
     *
     * @generated from protobuf rpc: SubscribeActuatorOutputStatus(mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest) returns (stream mavsdk.rpc.telemetry.ActuatorOutputStatusResponse);
     */
    subscribeActuatorOutputStatus(input: SubscribeActuatorOutputStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeActuatorOutputStatusRequest, ActuatorOutputStatusResponse>;
    /**
     * Subscribe to 'odometry' updates.
     *
     * @generated from protobuf rpc: SubscribeOdometry(mavsdk.rpc.telemetry.SubscribeOdometryRequest) returns (stream mavsdk.rpc.telemetry.OdometryResponse);
     */
    subscribeOdometry(input: SubscribeOdometryRequest, options?: RpcOptions): ServerStreamingCall<SubscribeOdometryRequest, OdometryResponse>;
    /**
     * Subscribe to 'position velocity' updates.
     *
     * @generated from protobuf rpc: SubscribePositionVelocityNed(mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest) returns (stream mavsdk.rpc.telemetry.PositionVelocityNedResponse);
     */
    subscribePositionVelocityNed(input: SubscribePositionVelocityNedRequest, options?: RpcOptions): ServerStreamingCall<SubscribePositionVelocityNedRequest, PositionVelocityNedResponse>;
    /**
     * Subscribe to 'ground truth' updates.
     *
     * @generated from protobuf rpc: SubscribeGroundTruth(mavsdk.rpc.telemetry.SubscribeGroundTruthRequest) returns (stream mavsdk.rpc.telemetry.GroundTruthResponse);
     */
    subscribeGroundTruth(input: SubscribeGroundTruthRequest, options?: RpcOptions): ServerStreamingCall<SubscribeGroundTruthRequest, GroundTruthResponse>;
    /**
     * Subscribe to 'fixedwing metrics' updates.
     *
     * @generated from protobuf rpc: SubscribeFixedwingMetrics(mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest) returns (stream mavsdk.rpc.telemetry.FixedwingMetricsResponse);
     */
    subscribeFixedwingMetrics(input: SubscribeFixedwingMetricsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFixedwingMetricsRequest, FixedwingMetricsResponse>;
    /**
     * Subscribe to 'IMU' updates (in SI units in NED body frame).
     *
     * @generated from protobuf rpc: SubscribeImu(mavsdk.rpc.telemetry.SubscribeImuRequest) returns (stream mavsdk.rpc.telemetry.ImuResponse);
     */
    subscribeImu(input: SubscribeImuRequest, options?: RpcOptions): ServerStreamingCall<SubscribeImuRequest, ImuResponse>;
    /**
     * Subscribe to 'Scaled IMU' updates.
     *
     * @generated from protobuf rpc: SubscribeScaledImu(mavsdk.rpc.telemetry.SubscribeScaledImuRequest) returns (stream mavsdk.rpc.telemetry.ScaledImuResponse);
     */
    subscribeScaledImu(input: SubscribeScaledImuRequest, options?: RpcOptions): ServerStreamingCall<SubscribeScaledImuRequest, ScaledImuResponse>;
    /**
     * Subscribe to 'Raw IMU' updates.
     *
     * @generated from protobuf rpc: SubscribeRawImu(mavsdk.rpc.telemetry.SubscribeRawImuRequest) returns (stream mavsdk.rpc.telemetry.RawImuResponse);
     */
    subscribeRawImu(input: SubscribeRawImuRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRawImuRequest, RawImuResponse>;
    /**
     * Subscribe to 'HealthAllOk' updates.
     *
     * @generated from protobuf rpc: SubscribeHealthAllOk(mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest) returns (stream mavsdk.rpc.telemetry.HealthAllOkResponse);
     */
    subscribeHealthAllOk(input: SubscribeHealthAllOkRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHealthAllOkRequest, HealthAllOkResponse>;
    /**
     * Subscribe to 'unix epoch time' updates.
     *
     * @generated from protobuf rpc: SubscribeUnixEpochTime(mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest) returns (stream mavsdk.rpc.telemetry.UnixEpochTimeResponse);
     */
    subscribeUnixEpochTime(input: SubscribeUnixEpochTimeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeUnixEpochTimeRequest, UnixEpochTimeResponse>;
    /**
     * Subscribe to 'Distance Sensor' updates.
     *
     * @generated from protobuf rpc: SubscribeDistanceSensor(mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest) returns (stream mavsdk.rpc.telemetry.DistanceSensorResponse);
     */
    subscribeDistanceSensor(input: SubscribeDistanceSensorRequest, options?: RpcOptions): ServerStreamingCall<SubscribeDistanceSensorRequest, DistanceSensorResponse>;
    /**
     * Subscribe to 'Scaled Pressure' updates.
     *
     * @generated from protobuf rpc: SubscribeScaledPressure(mavsdk.rpc.telemetry.SubscribeScaledPressureRequest) returns (stream mavsdk.rpc.telemetry.ScaledPressureResponse);
     */
    subscribeScaledPressure(input: SubscribeScaledPressureRequest, options?: RpcOptions): ServerStreamingCall<SubscribeScaledPressureRequest, ScaledPressureResponse>;
    /**
     * Subscribe to 'Heading' updates.
     *
     * @generated from protobuf rpc: SubscribeHeading(mavsdk.rpc.telemetry.SubscribeHeadingRequest) returns (stream mavsdk.rpc.telemetry.HeadingResponse);
     */
    subscribeHeading(input: SubscribeHeadingRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHeadingRequest, HeadingResponse>;
    /**
     * Subscribe to 'Altitude' updates.
     *
     * @generated from protobuf rpc: SubscribeAltitude(mavsdk.rpc.telemetry.SubscribeAltitudeRequest) returns (stream mavsdk.rpc.telemetry.AltitudeResponse);
     */
    subscribeAltitude(input: SubscribeAltitudeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAltitudeRequest, AltitudeResponse>;
    /**
     * Set rate to 'position' updates.
     *
     * @generated from protobuf rpc: SetRatePosition(mavsdk.rpc.telemetry.SetRatePositionRequest) returns (mavsdk.rpc.telemetry.SetRatePositionResponse);
     */
    setRatePosition(input: SetRatePositionRequest, options?: RpcOptions): UnaryCall<SetRatePositionRequest, SetRatePositionResponse>;
    /**
     * Set rate to 'home position' updates.
     *
     * @generated from protobuf rpc: SetRateHome(mavsdk.rpc.telemetry.SetRateHomeRequest) returns (mavsdk.rpc.telemetry.SetRateHomeResponse);
     */
    setRateHome(input: SetRateHomeRequest, options?: RpcOptions): UnaryCall<SetRateHomeRequest, SetRateHomeResponse>;
    /**
     * Set rate to in-air updates.
     *
     * @generated from protobuf rpc: SetRateInAir(mavsdk.rpc.telemetry.SetRateInAirRequest) returns (mavsdk.rpc.telemetry.SetRateInAirResponse);
     */
    setRateInAir(input: SetRateInAirRequest, options?: RpcOptions): UnaryCall<SetRateInAirRequest, SetRateInAirResponse>;
    /**
     * Set rate to landed state updates
     *
     * @generated from protobuf rpc: SetRateLandedState(mavsdk.rpc.telemetry.SetRateLandedStateRequest) returns (mavsdk.rpc.telemetry.SetRateLandedStateResponse);
     */
    setRateLandedState(input: SetRateLandedStateRequest, options?: RpcOptions): UnaryCall<SetRateLandedStateRequest, SetRateLandedStateResponse>;
    /**
     * Set rate to VTOL state updates
     *
     * @generated from protobuf rpc: SetRateVtolState(mavsdk.rpc.telemetry.SetRateVtolStateRequest) returns (mavsdk.rpc.telemetry.SetRateVtolStateResponse);
     */
    setRateVtolState(input: SetRateVtolStateRequest, options?: RpcOptions): UnaryCall<SetRateVtolStateRequest, SetRateVtolStateResponse>;
    /**
     * Set rate to 'attitude euler angle' updates.
     *
     * @generated from protobuf rpc: SetRateAttitudeQuaternion(mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest) returns (mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse);
     */
    setRateAttitudeQuaternion(input: SetRateAttitudeQuaternionRequest, options?: RpcOptions): UnaryCall<SetRateAttitudeQuaternionRequest, SetRateAttitudeQuaternionResponse>;
    /**
     * Set rate to 'attitude quaternion' updates.
     *
     * @generated from protobuf rpc: SetRateAttitudeEuler(mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest) returns (mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse);
     */
    setRateAttitudeEuler(input: SetRateAttitudeEulerRequest, options?: RpcOptions): UnaryCall<SetRateAttitudeEulerRequest, SetRateAttitudeEulerResponse>;
    /**
     * Set rate of camera attitude updates.
     * Set rate to 'ground speed' updates (NED).
     *
     * @generated from protobuf rpc: SetRateVelocityNed(mavsdk.rpc.telemetry.SetRateVelocityNedRequest) returns (mavsdk.rpc.telemetry.SetRateVelocityNedResponse);
     */
    setRateVelocityNed(input: SetRateVelocityNedRequest, options?: RpcOptions): UnaryCall<SetRateVelocityNedRequest, SetRateVelocityNedResponse>;
    /**
     * Set rate to 'GPS info' updates.
     *
     * @generated from protobuf rpc: SetRateGpsInfo(mavsdk.rpc.telemetry.SetRateGpsInfoRequest) returns (mavsdk.rpc.telemetry.SetRateGpsInfoResponse);
     */
    setRateGpsInfo(input: SetRateGpsInfoRequest, options?: RpcOptions): UnaryCall<SetRateGpsInfoRequest, SetRateGpsInfoResponse>;
    /**
     * Set rate to 'battery' updates.
     *
     * @generated from protobuf rpc: SetRateBattery(mavsdk.rpc.telemetry.SetRateBatteryRequest) returns (mavsdk.rpc.telemetry.SetRateBatteryResponse);
     */
    setRateBattery(input: SetRateBatteryRequest, options?: RpcOptions): UnaryCall<SetRateBatteryRequest, SetRateBatteryResponse>;
    /**
     * Set rate to 'RC status' updates.
     *
     * @generated from protobuf rpc: SetRateRcStatus(mavsdk.rpc.telemetry.SetRateRcStatusRequest) returns (mavsdk.rpc.telemetry.SetRateRcStatusResponse);
     */
    setRateRcStatus(input: SetRateRcStatusRequest, options?: RpcOptions): UnaryCall<SetRateRcStatusRequest, SetRateRcStatusResponse>;
    /**
     * Set rate to 'actuator control target' updates.
     *
     * @generated from protobuf rpc: SetRateActuatorControlTarget(mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest) returns (mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse);
     */
    setRateActuatorControlTarget(input: SetRateActuatorControlTargetRequest, options?: RpcOptions): UnaryCall<SetRateActuatorControlTargetRequest, SetRateActuatorControlTargetResponse>;
    /**
     * Set rate to 'actuator output status' updates.
     *
     * @generated from protobuf rpc: SetRateActuatorOutputStatus(mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest) returns (mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse);
     */
    setRateActuatorOutputStatus(input: SetRateActuatorOutputStatusRequest, options?: RpcOptions): UnaryCall<SetRateActuatorOutputStatusRequest, SetRateActuatorOutputStatusResponse>;
    /**
     * Set rate to 'odometry' updates.
     *
     * @generated from protobuf rpc: SetRateOdometry(mavsdk.rpc.telemetry.SetRateOdometryRequest) returns (mavsdk.rpc.telemetry.SetRateOdometryResponse);
     */
    setRateOdometry(input: SetRateOdometryRequest, options?: RpcOptions): UnaryCall<SetRateOdometryRequest, SetRateOdometryResponse>;
    /**
     * Set rate to 'position velocity' updates.
     *
     * @generated from protobuf rpc: SetRatePositionVelocityNed(mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest) returns (mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse);
     */
    setRatePositionVelocityNed(input: SetRatePositionVelocityNedRequest, options?: RpcOptions): UnaryCall<SetRatePositionVelocityNedRequest, SetRatePositionVelocityNedResponse>;
    /**
     * Set rate to 'ground truth' updates.
     *
     * @generated from protobuf rpc: SetRateGroundTruth(mavsdk.rpc.telemetry.SetRateGroundTruthRequest) returns (mavsdk.rpc.telemetry.SetRateGroundTruthResponse);
     */
    setRateGroundTruth(input: SetRateGroundTruthRequest, options?: RpcOptions): UnaryCall<SetRateGroundTruthRequest, SetRateGroundTruthResponse>;
    /**
     * Set rate to 'fixedwing metrics' updates.
     *
     * @generated from protobuf rpc: SetRateFixedwingMetrics(mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest) returns (mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse);
     */
    setRateFixedwingMetrics(input: SetRateFixedwingMetricsRequest, options?: RpcOptions): UnaryCall<SetRateFixedwingMetricsRequest, SetRateFixedwingMetricsResponse>;
    /**
     * Set rate to 'IMU' updates.
     *
     * @generated from protobuf rpc: SetRateImu(mavsdk.rpc.telemetry.SetRateImuRequest) returns (mavsdk.rpc.telemetry.SetRateImuResponse);
     */
    setRateImu(input: SetRateImuRequest, options?: RpcOptions): UnaryCall<SetRateImuRequest, SetRateImuResponse>;
    /**
     * Set rate to 'Scaled IMU' updates.
     *
     * @generated from protobuf rpc: SetRateScaledImu(mavsdk.rpc.telemetry.SetRateScaledImuRequest) returns (mavsdk.rpc.telemetry.SetRateScaledImuResponse);
     */
    setRateScaledImu(input: SetRateScaledImuRequest, options?: RpcOptions): UnaryCall<SetRateScaledImuRequest, SetRateScaledImuResponse>;
    /**
     * Set rate to 'Raw IMU' updates.
     *
     * @generated from protobuf rpc: SetRateRawImu(mavsdk.rpc.telemetry.SetRateRawImuRequest) returns (mavsdk.rpc.telemetry.SetRateRawImuResponse);
     */
    setRateRawImu(input: SetRateRawImuRequest, options?: RpcOptions): UnaryCall<SetRateRawImuRequest, SetRateRawImuResponse>;
    /**
     * Set rate to 'unix epoch time' updates.
     *
     * @generated from protobuf rpc: SetRateUnixEpochTime(mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest) returns (mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse);
     */
    setRateUnixEpochTime(input: SetRateUnixEpochTimeRequest, options?: RpcOptions): UnaryCall<SetRateUnixEpochTimeRequest, SetRateUnixEpochTimeResponse>;
    /**
     * Set rate to 'Distance Sensor' updates.
     *
     * @generated from protobuf rpc: SetRateDistanceSensor(mavsdk.rpc.telemetry.SetRateDistanceSensorRequest) returns (mavsdk.rpc.telemetry.SetRateDistanceSensorResponse);
     */
    setRateDistanceSensor(input: SetRateDistanceSensorRequest, options?: RpcOptions): UnaryCall<SetRateDistanceSensorRequest, SetRateDistanceSensorResponse>;
    /**
     * Set rate to 'Altitude' updates.
     *
     * @generated from protobuf rpc: SetRateAltitude(mavsdk.rpc.telemetry.SetRateAltitudeRequest) returns (mavsdk.rpc.telemetry.SetRateAltitudeResponse);
     */
    setRateAltitude(input: SetRateAltitudeRequest, options?: RpcOptions): UnaryCall<SetRateAltitudeRequest, SetRateAltitudeResponse>;
    /**
     * Get the GPS location of where the estimator has been initialized.
     *
     * @generated from protobuf rpc: GetGpsGlobalOrigin(mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest) returns (mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse);
     */
    getGpsGlobalOrigin(input: GetGpsGlobalOriginRequest, options?: RpcOptions): UnaryCall<GetGpsGlobalOriginRequest, GetGpsGlobalOriginResponse>;
}
/**
 *
 * Allow users to get vehicle telemetry and state information
 * (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
 *
 * @generated from protobuf service mavsdk.rpc.telemetry.TelemetryService
 */
export class TelemetryServiceClient implements ITelemetryServiceClient, ServiceInfo {
    typeName = TelemetryService.typeName;
    methods = TelemetryService.methods;
    options = TelemetryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Subscribe to 'position' updates.
     *
     * @generated from protobuf rpc: SubscribePosition(mavsdk.rpc.telemetry.SubscribePositionRequest) returns (stream mavsdk.rpc.telemetry.PositionResponse);
     */
    subscribePosition(input: SubscribePositionRequest, options?: RpcOptions): ServerStreamingCall<SubscribePositionRequest, PositionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribePositionRequest, PositionResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'home position' updates.
     *
     * @generated from protobuf rpc: SubscribeHome(mavsdk.rpc.telemetry.SubscribeHomeRequest) returns (stream mavsdk.rpc.telemetry.HomeResponse);
     */
    subscribeHome(input: SubscribeHomeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHomeRequest, HomeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeHomeRequest, HomeResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to in-air updates.
     *
     * @generated from protobuf rpc: SubscribeInAir(mavsdk.rpc.telemetry.SubscribeInAirRequest) returns (stream mavsdk.rpc.telemetry.InAirResponse);
     */
    subscribeInAir(input: SubscribeInAirRequest, options?: RpcOptions): ServerStreamingCall<SubscribeInAirRequest, InAirResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeInAirRequest, InAirResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to landed state updates
     *
     * @generated from protobuf rpc: SubscribeLandedState(mavsdk.rpc.telemetry.SubscribeLandedStateRequest) returns (stream mavsdk.rpc.telemetry.LandedStateResponse);
     */
    subscribeLandedState(input: SubscribeLandedStateRequest, options?: RpcOptions): ServerStreamingCall<SubscribeLandedStateRequest, LandedStateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeLandedStateRequest, LandedStateResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to armed updates.
     *
     * @generated from protobuf rpc: SubscribeArmed(mavsdk.rpc.telemetry.SubscribeArmedRequest) returns (stream mavsdk.rpc.telemetry.ArmedResponse);
     */
    subscribeArmed(input: SubscribeArmedRequest, options?: RpcOptions): ServerStreamingCall<SubscribeArmedRequest, ArmedResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeArmedRequest, ArmedResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * subscribe to vtol state Updates
     *
     * @generated from protobuf rpc: SubscribeVtolState(mavsdk.rpc.telemetry.SubscribeVtolStateRequest) returns (stream mavsdk.rpc.telemetry.VtolStateResponse);
     */
    subscribeVtolState(input: SubscribeVtolStateRequest, options?: RpcOptions): ServerStreamingCall<SubscribeVtolStateRequest, VtolStateResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeVtolStateRequest, VtolStateResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'attitude' updates (quaternion).
     *
     * @generated from protobuf rpc: SubscribeAttitudeQuaternion(mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest) returns (stream mavsdk.rpc.telemetry.AttitudeQuaternionResponse);
     */
    subscribeAttitudeQuaternion(input: SubscribeAttitudeQuaternionRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAttitudeQuaternionRequest, AttitudeQuaternionResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeAttitudeQuaternionRequest, AttitudeQuaternionResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'attitude' updates (Euler).
     *
     * @generated from protobuf rpc: SubscribeAttitudeEuler(mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest) returns (stream mavsdk.rpc.telemetry.AttitudeEulerResponse);
     */
    subscribeAttitudeEuler(input: SubscribeAttitudeEulerRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAttitudeEulerRequest, AttitudeEulerResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeAttitudeEulerRequest, AttitudeEulerResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'attitude' updates (angular velocity)
     *
     * @generated from protobuf rpc: SubscribeAttitudeAngularVelocityBody(mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest) returns (stream mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse);
     */
    subscribeAttitudeAngularVelocityBody(input: SubscribeAttitudeAngularVelocityBodyRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAttitudeAngularVelocityBodyRequest, AttitudeAngularVelocityBodyResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeAttitudeAngularVelocityBodyRequest, AttitudeAngularVelocityBodyResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'ground speed' updates (NED).
     *
     * @generated from protobuf rpc: SubscribeVelocityNed(mavsdk.rpc.telemetry.SubscribeVelocityNedRequest) returns (stream mavsdk.rpc.telemetry.VelocityNedResponse);
     */
    subscribeVelocityNed(input: SubscribeVelocityNedRequest, options?: RpcOptions): ServerStreamingCall<SubscribeVelocityNedRequest, VelocityNedResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeVelocityNedRequest, VelocityNedResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'GPS info' updates.
     *
     * @generated from protobuf rpc: SubscribeGpsInfo(mavsdk.rpc.telemetry.SubscribeGpsInfoRequest) returns (stream mavsdk.rpc.telemetry.GpsInfoResponse);
     */
    subscribeGpsInfo(input: SubscribeGpsInfoRequest, options?: RpcOptions): ServerStreamingCall<SubscribeGpsInfoRequest, GpsInfoResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeGpsInfoRequest, GpsInfoResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'Raw GPS' updates.
     *
     * @generated from protobuf rpc: SubscribeRawGps(mavsdk.rpc.telemetry.SubscribeRawGpsRequest) returns (stream mavsdk.rpc.telemetry.RawGpsResponse);
     */
    subscribeRawGps(input: SubscribeRawGpsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRawGpsRequest, RawGpsResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRawGpsRequest, RawGpsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'battery' updates.
     *
     * @generated from protobuf rpc: SubscribeBattery(mavsdk.rpc.telemetry.SubscribeBatteryRequest) returns (stream mavsdk.rpc.telemetry.BatteryResponse);
     */
    subscribeBattery(input: SubscribeBatteryRequest, options?: RpcOptions): ServerStreamingCall<SubscribeBatteryRequest, BatteryResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeBatteryRequest, BatteryResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'flight mode' updates.
     *
     * @generated from protobuf rpc: SubscribeFlightMode(mavsdk.rpc.telemetry.SubscribeFlightModeRequest) returns (stream mavsdk.rpc.telemetry.FlightModeResponse);
     */
    subscribeFlightMode(input: SubscribeFlightModeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFlightModeRequest, FlightModeResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeFlightModeRequest, FlightModeResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'health' updates.
     *
     * @generated from protobuf rpc: SubscribeHealth(mavsdk.rpc.telemetry.SubscribeHealthRequest) returns (stream mavsdk.rpc.telemetry.HealthResponse);
     */
    subscribeHealth(input: SubscribeHealthRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHealthRequest, HealthResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeHealthRequest, HealthResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'RC status' updates.
     *
     * @generated from protobuf rpc: SubscribeRcStatus(mavsdk.rpc.telemetry.SubscribeRcStatusRequest) returns (stream mavsdk.rpc.telemetry.RcStatusResponse);
     */
    subscribeRcStatus(input: SubscribeRcStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRcStatusRequest, RcStatusResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRcStatusRequest, RcStatusResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'status text' updates.
     *
     * @generated from protobuf rpc: SubscribeStatusText(mavsdk.rpc.telemetry.SubscribeStatusTextRequest) returns (stream mavsdk.rpc.telemetry.StatusTextResponse);
     */
    subscribeStatusText(input: SubscribeStatusTextRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStatusTextRequest, StatusTextResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeStatusTextRequest, StatusTextResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'actuator control target' updates.
     *
     * @generated from protobuf rpc: SubscribeActuatorControlTarget(mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest) returns (stream mavsdk.rpc.telemetry.ActuatorControlTargetResponse);
     */
    subscribeActuatorControlTarget(input: SubscribeActuatorControlTargetRequest, options?: RpcOptions): ServerStreamingCall<SubscribeActuatorControlTargetRequest, ActuatorControlTargetResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeActuatorControlTargetRequest, ActuatorControlTargetResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'actuator output status' updates.
     *
     * @generated from protobuf rpc: SubscribeActuatorOutputStatus(mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest) returns (stream mavsdk.rpc.telemetry.ActuatorOutputStatusResponse);
     */
    subscribeActuatorOutputStatus(input: SubscribeActuatorOutputStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeActuatorOutputStatusRequest, ActuatorOutputStatusResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeActuatorOutputStatusRequest, ActuatorOutputStatusResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'odometry' updates.
     *
     * @generated from protobuf rpc: SubscribeOdometry(mavsdk.rpc.telemetry.SubscribeOdometryRequest) returns (stream mavsdk.rpc.telemetry.OdometryResponse);
     */
    subscribeOdometry(input: SubscribeOdometryRequest, options?: RpcOptions): ServerStreamingCall<SubscribeOdometryRequest, OdometryResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeOdometryRequest, OdometryResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'position velocity' updates.
     *
     * @generated from protobuf rpc: SubscribePositionVelocityNed(mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest) returns (stream mavsdk.rpc.telemetry.PositionVelocityNedResponse);
     */
    subscribePositionVelocityNed(input: SubscribePositionVelocityNedRequest, options?: RpcOptions): ServerStreamingCall<SubscribePositionVelocityNedRequest, PositionVelocityNedResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribePositionVelocityNedRequest, PositionVelocityNedResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'ground truth' updates.
     *
     * @generated from protobuf rpc: SubscribeGroundTruth(mavsdk.rpc.telemetry.SubscribeGroundTruthRequest) returns (stream mavsdk.rpc.telemetry.GroundTruthResponse);
     */
    subscribeGroundTruth(input: SubscribeGroundTruthRequest, options?: RpcOptions): ServerStreamingCall<SubscribeGroundTruthRequest, GroundTruthResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeGroundTruthRequest, GroundTruthResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'fixedwing metrics' updates.
     *
     * @generated from protobuf rpc: SubscribeFixedwingMetrics(mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest) returns (stream mavsdk.rpc.telemetry.FixedwingMetricsResponse);
     */
    subscribeFixedwingMetrics(input: SubscribeFixedwingMetricsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFixedwingMetricsRequest, FixedwingMetricsResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeFixedwingMetricsRequest, FixedwingMetricsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'IMU' updates (in SI units in NED body frame).
     *
     * @generated from protobuf rpc: SubscribeImu(mavsdk.rpc.telemetry.SubscribeImuRequest) returns (stream mavsdk.rpc.telemetry.ImuResponse);
     */
    subscribeImu(input: SubscribeImuRequest, options?: RpcOptions): ServerStreamingCall<SubscribeImuRequest, ImuResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeImuRequest, ImuResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'Scaled IMU' updates.
     *
     * @generated from protobuf rpc: SubscribeScaledImu(mavsdk.rpc.telemetry.SubscribeScaledImuRequest) returns (stream mavsdk.rpc.telemetry.ScaledImuResponse);
     */
    subscribeScaledImu(input: SubscribeScaledImuRequest, options?: RpcOptions): ServerStreamingCall<SubscribeScaledImuRequest, ScaledImuResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeScaledImuRequest, ScaledImuResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'Raw IMU' updates.
     *
     * @generated from protobuf rpc: SubscribeRawImu(mavsdk.rpc.telemetry.SubscribeRawImuRequest) returns (stream mavsdk.rpc.telemetry.RawImuResponse);
     */
    subscribeRawImu(input: SubscribeRawImuRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRawImuRequest, RawImuResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRawImuRequest, RawImuResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'HealthAllOk' updates.
     *
     * @generated from protobuf rpc: SubscribeHealthAllOk(mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest) returns (stream mavsdk.rpc.telemetry.HealthAllOkResponse);
     */
    subscribeHealthAllOk(input: SubscribeHealthAllOkRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHealthAllOkRequest, HealthAllOkResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeHealthAllOkRequest, HealthAllOkResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'unix epoch time' updates.
     *
     * @generated from protobuf rpc: SubscribeUnixEpochTime(mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest) returns (stream mavsdk.rpc.telemetry.UnixEpochTimeResponse);
     */
    subscribeUnixEpochTime(input: SubscribeUnixEpochTimeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeUnixEpochTimeRequest, UnixEpochTimeResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeUnixEpochTimeRequest, UnixEpochTimeResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'Distance Sensor' updates.
     *
     * @generated from protobuf rpc: SubscribeDistanceSensor(mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest) returns (stream mavsdk.rpc.telemetry.DistanceSensorResponse);
     */
    subscribeDistanceSensor(input: SubscribeDistanceSensorRequest, options?: RpcOptions): ServerStreamingCall<SubscribeDistanceSensorRequest, DistanceSensorResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeDistanceSensorRequest, DistanceSensorResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'Scaled Pressure' updates.
     *
     * @generated from protobuf rpc: SubscribeScaledPressure(mavsdk.rpc.telemetry.SubscribeScaledPressureRequest) returns (stream mavsdk.rpc.telemetry.ScaledPressureResponse);
     */
    subscribeScaledPressure(input: SubscribeScaledPressureRequest, options?: RpcOptions): ServerStreamingCall<SubscribeScaledPressureRequest, ScaledPressureResponse> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeScaledPressureRequest, ScaledPressureResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'Heading' updates.
     *
     * @generated from protobuf rpc: SubscribeHeading(mavsdk.rpc.telemetry.SubscribeHeadingRequest) returns (stream mavsdk.rpc.telemetry.HeadingResponse);
     */
    subscribeHeading(input: SubscribeHeadingRequest, options?: RpcOptions): ServerStreamingCall<SubscribeHeadingRequest, HeadingResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeHeadingRequest, HeadingResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'Altitude' updates.
     *
     * @generated from protobuf rpc: SubscribeAltitude(mavsdk.rpc.telemetry.SubscribeAltitudeRequest) returns (stream mavsdk.rpc.telemetry.AltitudeResponse);
     */
    subscribeAltitude(input: SubscribeAltitudeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAltitudeRequest, AltitudeResponse> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeAltitudeRequest, AltitudeResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'position' updates.
     *
     * @generated from protobuf rpc: SetRatePosition(mavsdk.rpc.telemetry.SetRatePositionRequest) returns (mavsdk.rpc.telemetry.SetRatePositionResponse);
     */
    setRatePosition(input: SetRatePositionRequest, options?: RpcOptions): UnaryCall<SetRatePositionRequest, SetRatePositionResponse> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRatePositionRequest, SetRatePositionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'home position' updates.
     *
     * @generated from protobuf rpc: SetRateHome(mavsdk.rpc.telemetry.SetRateHomeRequest) returns (mavsdk.rpc.telemetry.SetRateHomeResponse);
     */
    setRateHome(input: SetRateHomeRequest, options?: RpcOptions): UnaryCall<SetRateHomeRequest, SetRateHomeResponse> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateHomeRequest, SetRateHomeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to in-air updates.
     *
     * @generated from protobuf rpc: SetRateInAir(mavsdk.rpc.telemetry.SetRateInAirRequest) returns (mavsdk.rpc.telemetry.SetRateInAirResponse);
     */
    setRateInAir(input: SetRateInAirRequest, options?: RpcOptions): UnaryCall<SetRateInAirRequest, SetRateInAirResponse> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateInAirRequest, SetRateInAirResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to landed state updates
     *
     * @generated from protobuf rpc: SetRateLandedState(mavsdk.rpc.telemetry.SetRateLandedStateRequest) returns (mavsdk.rpc.telemetry.SetRateLandedStateResponse);
     */
    setRateLandedState(input: SetRateLandedStateRequest, options?: RpcOptions): UnaryCall<SetRateLandedStateRequest, SetRateLandedStateResponse> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateLandedStateRequest, SetRateLandedStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to VTOL state updates
     *
     * @generated from protobuf rpc: SetRateVtolState(mavsdk.rpc.telemetry.SetRateVtolStateRequest) returns (mavsdk.rpc.telemetry.SetRateVtolStateResponse);
     */
    setRateVtolState(input: SetRateVtolStateRequest, options?: RpcOptions): UnaryCall<SetRateVtolStateRequest, SetRateVtolStateResponse> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateVtolStateRequest, SetRateVtolStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'attitude euler angle' updates.
     *
     * @generated from protobuf rpc: SetRateAttitudeQuaternion(mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest) returns (mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse);
     */
    setRateAttitudeQuaternion(input: SetRateAttitudeQuaternionRequest, options?: RpcOptions): UnaryCall<SetRateAttitudeQuaternionRequest, SetRateAttitudeQuaternionResponse> {
        const method = this.methods[37], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateAttitudeQuaternionRequest, SetRateAttitudeQuaternionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'attitude quaternion' updates.
     *
     * @generated from protobuf rpc: SetRateAttitudeEuler(mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest) returns (mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse);
     */
    setRateAttitudeEuler(input: SetRateAttitudeEulerRequest, options?: RpcOptions): UnaryCall<SetRateAttitudeEulerRequest, SetRateAttitudeEulerResponse> {
        const method = this.methods[38], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateAttitudeEulerRequest, SetRateAttitudeEulerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate of camera attitude updates.
     * Set rate to 'ground speed' updates (NED).
     *
     * @generated from protobuf rpc: SetRateVelocityNed(mavsdk.rpc.telemetry.SetRateVelocityNedRequest) returns (mavsdk.rpc.telemetry.SetRateVelocityNedResponse);
     */
    setRateVelocityNed(input: SetRateVelocityNedRequest, options?: RpcOptions): UnaryCall<SetRateVelocityNedRequest, SetRateVelocityNedResponse> {
        const method = this.methods[39], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateVelocityNedRequest, SetRateVelocityNedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'GPS info' updates.
     *
     * @generated from protobuf rpc: SetRateGpsInfo(mavsdk.rpc.telemetry.SetRateGpsInfoRequest) returns (mavsdk.rpc.telemetry.SetRateGpsInfoResponse);
     */
    setRateGpsInfo(input: SetRateGpsInfoRequest, options?: RpcOptions): UnaryCall<SetRateGpsInfoRequest, SetRateGpsInfoResponse> {
        const method = this.methods[40], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateGpsInfoRequest, SetRateGpsInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'battery' updates.
     *
     * @generated from protobuf rpc: SetRateBattery(mavsdk.rpc.telemetry.SetRateBatteryRequest) returns (mavsdk.rpc.telemetry.SetRateBatteryResponse);
     */
    setRateBattery(input: SetRateBatteryRequest, options?: RpcOptions): UnaryCall<SetRateBatteryRequest, SetRateBatteryResponse> {
        const method = this.methods[41], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateBatteryRequest, SetRateBatteryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'RC status' updates.
     *
     * @generated from protobuf rpc: SetRateRcStatus(mavsdk.rpc.telemetry.SetRateRcStatusRequest) returns (mavsdk.rpc.telemetry.SetRateRcStatusResponse);
     */
    setRateRcStatus(input: SetRateRcStatusRequest, options?: RpcOptions): UnaryCall<SetRateRcStatusRequest, SetRateRcStatusResponse> {
        const method = this.methods[42], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateRcStatusRequest, SetRateRcStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'actuator control target' updates.
     *
     * @generated from protobuf rpc: SetRateActuatorControlTarget(mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest) returns (mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse);
     */
    setRateActuatorControlTarget(input: SetRateActuatorControlTargetRequest, options?: RpcOptions): UnaryCall<SetRateActuatorControlTargetRequest, SetRateActuatorControlTargetResponse> {
        const method = this.methods[43], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateActuatorControlTargetRequest, SetRateActuatorControlTargetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'actuator output status' updates.
     *
     * @generated from protobuf rpc: SetRateActuatorOutputStatus(mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest) returns (mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse);
     */
    setRateActuatorOutputStatus(input: SetRateActuatorOutputStatusRequest, options?: RpcOptions): UnaryCall<SetRateActuatorOutputStatusRequest, SetRateActuatorOutputStatusResponse> {
        const method = this.methods[44], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateActuatorOutputStatusRequest, SetRateActuatorOutputStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'odometry' updates.
     *
     * @generated from protobuf rpc: SetRateOdometry(mavsdk.rpc.telemetry.SetRateOdometryRequest) returns (mavsdk.rpc.telemetry.SetRateOdometryResponse);
     */
    setRateOdometry(input: SetRateOdometryRequest, options?: RpcOptions): UnaryCall<SetRateOdometryRequest, SetRateOdometryResponse> {
        const method = this.methods[45], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateOdometryRequest, SetRateOdometryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'position velocity' updates.
     *
     * @generated from protobuf rpc: SetRatePositionVelocityNed(mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest) returns (mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse);
     */
    setRatePositionVelocityNed(input: SetRatePositionVelocityNedRequest, options?: RpcOptions): UnaryCall<SetRatePositionVelocityNedRequest, SetRatePositionVelocityNedResponse> {
        const method = this.methods[46], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRatePositionVelocityNedRequest, SetRatePositionVelocityNedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'ground truth' updates.
     *
     * @generated from protobuf rpc: SetRateGroundTruth(mavsdk.rpc.telemetry.SetRateGroundTruthRequest) returns (mavsdk.rpc.telemetry.SetRateGroundTruthResponse);
     */
    setRateGroundTruth(input: SetRateGroundTruthRequest, options?: RpcOptions): UnaryCall<SetRateGroundTruthRequest, SetRateGroundTruthResponse> {
        const method = this.methods[47], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateGroundTruthRequest, SetRateGroundTruthResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'fixedwing metrics' updates.
     *
     * @generated from protobuf rpc: SetRateFixedwingMetrics(mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest) returns (mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse);
     */
    setRateFixedwingMetrics(input: SetRateFixedwingMetricsRequest, options?: RpcOptions): UnaryCall<SetRateFixedwingMetricsRequest, SetRateFixedwingMetricsResponse> {
        const method = this.methods[48], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateFixedwingMetricsRequest, SetRateFixedwingMetricsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'IMU' updates.
     *
     * @generated from protobuf rpc: SetRateImu(mavsdk.rpc.telemetry.SetRateImuRequest) returns (mavsdk.rpc.telemetry.SetRateImuResponse);
     */
    setRateImu(input: SetRateImuRequest, options?: RpcOptions): UnaryCall<SetRateImuRequest, SetRateImuResponse> {
        const method = this.methods[49], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateImuRequest, SetRateImuResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'Scaled IMU' updates.
     *
     * @generated from protobuf rpc: SetRateScaledImu(mavsdk.rpc.telemetry.SetRateScaledImuRequest) returns (mavsdk.rpc.telemetry.SetRateScaledImuResponse);
     */
    setRateScaledImu(input: SetRateScaledImuRequest, options?: RpcOptions): UnaryCall<SetRateScaledImuRequest, SetRateScaledImuResponse> {
        const method = this.methods[50], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateScaledImuRequest, SetRateScaledImuResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'Raw IMU' updates.
     *
     * @generated from protobuf rpc: SetRateRawImu(mavsdk.rpc.telemetry.SetRateRawImuRequest) returns (mavsdk.rpc.telemetry.SetRateRawImuResponse);
     */
    setRateRawImu(input: SetRateRawImuRequest, options?: RpcOptions): UnaryCall<SetRateRawImuRequest, SetRateRawImuResponse> {
        const method = this.methods[51], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateRawImuRequest, SetRateRawImuResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'unix epoch time' updates.
     *
     * @generated from protobuf rpc: SetRateUnixEpochTime(mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest) returns (mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse);
     */
    setRateUnixEpochTime(input: SetRateUnixEpochTimeRequest, options?: RpcOptions): UnaryCall<SetRateUnixEpochTimeRequest, SetRateUnixEpochTimeResponse> {
        const method = this.methods[52], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateUnixEpochTimeRequest, SetRateUnixEpochTimeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'Distance Sensor' updates.
     *
     * @generated from protobuf rpc: SetRateDistanceSensor(mavsdk.rpc.telemetry.SetRateDistanceSensorRequest) returns (mavsdk.rpc.telemetry.SetRateDistanceSensorResponse);
     */
    setRateDistanceSensor(input: SetRateDistanceSensorRequest, options?: RpcOptions): UnaryCall<SetRateDistanceSensorRequest, SetRateDistanceSensorResponse> {
        const method = this.methods[53], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateDistanceSensorRequest, SetRateDistanceSensorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'Altitude' updates.
     *
     * @generated from protobuf rpc: SetRateAltitude(mavsdk.rpc.telemetry.SetRateAltitudeRequest) returns (mavsdk.rpc.telemetry.SetRateAltitudeResponse);
     */
    setRateAltitude(input: SetRateAltitudeRequest, options?: RpcOptions): UnaryCall<SetRateAltitudeRequest, SetRateAltitudeResponse> {
        const method = this.methods[54], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateAltitudeRequest, SetRateAltitudeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get the GPS location of where the estimator has been initialized.
     *
     * @generated from protobuf rpc: GetGpsGlobalOrigin(mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest) returns (mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse);
     */
    getGpsGlobalOrigin(input: GetGpsGlobalOriginRequest, options?: RpcOptions): UnaryCall<GetGpsGlobalOriginRequest, GetGpsGlobalOriginResponse> {
        const method = this.methods[55], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGpsGlobalOriginRequest, GetGpsGlobalOriginResponse>("unary", this._transport, method, opt, input);
    }
}
