/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "follow_me/follow_me.proto" (package "mavsdk.rpc.follow_me", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FollowMeService } from "./follow_me";
import type { StopResponse } from "./follow_me";
import type { StopRequest } from "./follow_me";
import type { StartResponse } from "./follow_me";
import type { StartRequest } from "./follow_me";
import type { GetLastLocationResponse } from "./follow_me";
import type { GetLastLocationRequest } from "./follow_me";
import type { SetTargetLocationResponse } from "./follow_me";
import type { SetTargetLocationRequest } from "./follow_me";
import type { IsActiveResponse } from "./follow_me";
import type { IsActiveRequest } from "./follow_me";
import type { SetConfigResponse } from "./follow_me";
import type { SetConfigRequest } from "./follow_me";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetConfigResponse } from "./follow_me";
import type { GetConfigRequest } from "./follow_me";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Allow users to command the vehicle to follow a specific target.
 * The target is provided as a GPS coordinate and altitude.
 *
 * @generated from protobuf service mavsdk.rpc.follow_me.FollowMeService
 */
export interface IFollowMeServiceClient {
    /**
     * Get current configuration.
     *
     * @generated from protobuf rpc: GetConfig(mavsdk.rpc.follow_me.GetConfigRequest) returns (mavsdk.rpc.follow_me.GetConfigResponse);
     */
    getConfig(input: GetConfigRequest, options?: RpcOptions): UnaryCall<GetConfigRequest, GetConfigResponse>;
    /**
     * Apply configuration by sending it to the system.
     *
     * @generated from protobuf rpc: SetConfig(mavsdk.rpc.follow_me.SetConfigRequest) returns (mavsdk.rpc.follow_me.SetConfigResponse);
     */
    setConfig(input: SetConfigRequest, options?: RpcOptions): UnaryCall<SetConfigRequest, SetConfigResponse>;
    /**
     * Check if FollowMe is active.
     *
     * @generated from protobuf rpc: IsActive(mavsdk.rpc.follow_me.IsActiveRequest) returns (mavsdk.rpc.follow_me.IsActiveResponse);
     */
    isActive(input: IsActiveRequest, options?: RpcOptions): UnaryCall<IsActiveRequest, IsActiveResponse>;
    /**
     * Set location of the moving target.
     *
     * @generated from protobuf rpc: SetTargetLocation(mavsdk.rpc.follow_me.SetTargetLocationRequest) returns (mavsdk.rpc.follow_me.SetTargetLocationResponse);
     */
    setTargetLocation(input: SetTargetLocationRequest, options?: RpcOptions): UnaryCall<SetTargetLocationRequest, SetTargetLocationResponse>;
    /**
     * Get the last location of the target.
     *
     * @generated from protobuf rpc: GetLastLocation(mavsdk.rpc.follow_me.GetLastLocationRequest) returns (mavsdk.rpc.follow_me.GetLastLocationResponse);
     */
    getLastLocation(input: GetLastLocationRequest, options?: RpcOptions): UnaryCall<GetLastLocationRequest, GetLastLocationResponse>;
    /**
     * Start FollowMe mode.
     *
     * @generated from protobuf rpc: Start(mavsdk.rpc.follow_me.StartRequest) returns (mavsdk.rpc.follow_me.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse>;
    /**
     * Stop FollowMe mode.
     *
     * @generated from protobuf rpc: Stop(mavsdk.rpc.follow_me.StopRequest) returns (mavsdk.rpc.follow_me.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
}
/**
 *
 * Allow users to command the vehicle to follow a specific target.
 * The target is provided as a GPS coordinate and altitude.
 *
 * @generated from protobuf service mavsdk.rpc.follow_me.FollowMeService
 */
export class FollowMeServiceClient implements IFollowMeServiceClient, ServiceInfo {
    typeName = FollowMeService.typeName;
    methods = FollowMeService.methods;
    options = FollowMeService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get current configuration.
     *
     * @generated from protobuf rpc: GetConfig(mavsdk.rpc.follow_me.GetConfigRequest) returns (mavsdk.rpc.follow_me.GetConfigResponse);
     */
    getConfig(input: GetConfigRequest, options?: RpcOptions): UnaryCall<GetConfigRequest, GetConfigResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetConfigRequest, GetConfigResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Apply configuration by sending it to the system.
     *
     * @generated from protobuf rpc: SetConfig(mavsdk.rpc.follow_me.SetConfigRequest) returns (mavsdk.rpc.follow_me.SetConfigResponse);
     */
    setConfig(input: SetConfigRequest, options?: RpcOptions): UnaryCall<SetConfigRequest, SetConfigResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetConfigRequest, SetConfigResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Check if FollowMe is active.
     *
     * @generated from protobuf rpc: IsActive(mavsdk.rpc.follow_me.IsActiveRequest) returns (mavsdk.rpc.follow_me.IsActiveResponse);
     */
    isActive(input: IsActiveRequest, options?: RpcOptions): UnaryCall<IsActiveRequest, IsActiveResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<IsActiveRequest, IsActiveResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set location of the moving target.
     *
     * @generated from protobuf rpc: SetTargetLocation(mavsdk.rpc.follow_me.SetTargetLocationRequest) returns (mavsdk.rpc.follow_me.SetTargetLocationResponse);
     */
    setTargetLocation(input: SetTargetLocationRequest, options?: RpcOptions): UnaryCall<SetTargetLocationRequest, SetTargetLocationResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetTargetLocationRequest, SetTargetLocationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get the last location of the target.
     *
     * @generated from protobuf rpc: GetLastLocation(mavsdk.rpc.follow_me.GetLastLocationRequest) returns (mavsdk.rpc.follow_me.GetLastLocationResponse);
     */
    getLastLocation(input: GetLastLocationRequest, options?: RpcOptions): UnaryCall<GetLastLocationRequest, GetLastLocationResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLastLocationRequest, GetLastLocationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Start FollowMe mode.
     *
     * @generated from protobuf rpc: Start(mavsdk.rpc.follow_me.StartRequest) returns (mavsdk.rpc.follow_me.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartRequest, StartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Stop FollowMe mode.
     *
     * @generated from protobuf rpc: Stop(mavsdk.rpc.follow_me.StopRequest) returns (mavsdk.rpc.follow_me.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopRequest, StopResponse>("unary", this._transport, method, opt, input);
    }
}
