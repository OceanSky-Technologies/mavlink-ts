/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "component_metadata/component_metadata.proto" (package "mavsdk.rpc.component_metadata", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.component_metadata.RequestComponentRequest
 */
export interface RequestComponentRequest {
    /**
     * @generated from protobuf field: uint32 compid = 1;
     */
    compid: number; // The component ID to request
}
/**
 * @generated from protobuf message mavsdk.rpc.component_metadata.GetMetadataRequest
 */
export interface GetMetadataRequest {
    /**
     * @generated from protobuf field: uint32 compid = 1;
     */
    compid: number; // The component ID to request
    /**
     * @generated from protobuf field: mavsdk.rpc.component_metadata.MetadataType metadata_type = 2;
     */
    metadataType: MetadataType; // The metadata type
}
/**
 * @generated from protobuf message mavsdk.rpc.component_metadata.GetMetadataResponse
 */
export interface GetMetadataResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.component_metadata.ComponentMetadataResult component_metadata_result = 1;
     */
    componentMetadataResult?: ComponentMetadataResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.component_metadata.MetadataData response = 2;
     */
    response?: MetadataData;
}
/**
 * Metadata response
 *
 * @generated from protobuf message mavsdk.rpc.component_metadata.MetadataData
 */
export interface MetadataData {
    /**
     * @generated from protobuf field: string json_metadata = 1;
     */
    jsonMetadata: string; // The JSON metadata
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.component_metadata.ComponentMetadataResult
 */
export interface ComponentMetadataResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.component_metadata.ComponentMetadataResult.Result result = 1;
     */
    result: ComponentMetadataResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for GetMetadata
 *
 * @generated from protobuf enum mavsdk.rpc.component_metadata.ComponentMetadataResult.Result
 */
export enum ComponentMetadataResult_Result {
    /**
     * @generated from protobuf enum value: RESULT_SUCCESS = 0;
     */
    SUCCESS = 0,
    /**
     * @generated from protobuf enum value: RESULT_NOT_AVAILABLE = 1;
     */
    NOT_AVAILABLE = 1,
    /**
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 2;
     */
    CONNECTION_ERROR = 2,
    /**
     * @generated from protobuf enum value: RESULT_UNSUPPORTED = 3;
     */
    UNSUPPORTED = 3,
    /**
     * @generated from protobuf enum value: RESULT_DENIED = 4;
     */
    DENIED = 4,
    /**
     * @generated from protobuf enum value: RESULT_FAILED = 5;
     */
    FAILED = 5,
    /**
     * @generated from protobuf enum value: RESULT_TIMEOUT = 6;
     */
    TIMEOUT = 6,
    /**
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 7;
     */
    NO_SYSTEM = 7,
    /**
     * @generated from protobuf enum value: RESULT_NOT_REQUESTED = 8;
     */
    NOT_REQUESTED = 8
}
/**
 * @generated from protobuf message mavsdk.rpc.component_metadata.RequestComponentResponse
 */
export interface RequestComponentResponse {
}
/**
 * @generated from protobuf message mavsdk.rpc.component_metadata.RequestAutopilotComponentRequest
 */
export interface RequestAutopilotComponentRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.component_metadata.RequestAutopilotComponentResponse
 */
export interface RequestAutopilotComponentResponse {
}
/**
 * @generated from protobuf message mavsdk.rpc.component_metadata.SubscribeMetadataAvailableRequest
 */
export interface SubscribeMetadataAvailableRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.component_metadata.MetadataAvailableResponse
 */
export interface MetadataAvailableResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.component_metadata.MetadataUpdate data = 1;
     */
    data?: MetadataUpdate;
}
/**
 * Metadata for a given component and type
 *
 * @generated from protobuf message mavsdk.rpc.component_metadata.MetadataUpdate
 */
export interface MetadataUpdate {
    /**
     * @generated from protobuf field: uint32 compid = 1;
     */
    compid: number; // The component ID
    /**
     * @generated from protobuf field: mavsdk.rpc.component_metadata.MetadataType type = 2;
     */
    type: MetadataType; // The metadata type
    /**
     * @generated from protobuf field: string json_metadata = 3;
     */
    jsonMetadata: string; // The JSON metadata
}
/**
 * @generated from protobuf enum mavsdk.rpc.component_metadata.MetadataType
 */
export enum MetadataType {
    /**
     * This is set in the subscription callback when all metadata types completed for a given component ID
     *
     * @generated from protobuf enum value: METADATA_TYPE_ALL_COMPLETED = 0;
     */
    ALL_COMPLETED = 0,
    /**
     * Parameter metadata
     *
     * @generated from protobuf enum value: METADATA_TYPE_PARAMETER = 1;
     */
    PARAMETER = 1,
    /**
     * Event definitions
     *
     * @generated from protobuf enum value: METADATA_TYPE_EVENTS = 2;
     */
    EVENTS = 2,
    /**
     * Actuator definitions
     *
     * @generated from protobuf enum value: METADATA_TYPE_ACTUATORS = 3;
     */
    ACTUATORS = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class RequestComponentRequest$Type extends MessageType<RequestComponentRequest> {
    constructor() {
        super("mavsdk.rpc.component_metadata.RequestComponentRequest", [
            { no: 1, name: "compid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestComponentRequest>): RequestComponentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.compid = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestComponentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestComponentRequest): RequestComponentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 compid */ 1:
                    message.compid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestComponentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 compid = 1; */
        if (message.compid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.compid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.RequestComponentRequest
 */
export const RequestComponentRequest = new RequestComponentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMetadataRequest$Type extends MessageType<GetMetadataRequest> {
    constructor() {
        super("mavsdk.rpc.component_metadata.GetMetadataRequest", [
            { no: 1, name: "compid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "metadata_type", kind: "enum", T: () => ["mavsdk.rpc.component_metadata.MetadataType", MetadataType, "METADATA_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<GetMetadataRequest>): GetMetadataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.compid = 0;
        message.metadataType = 0;
        if (value !== undefined)
            reflectionMergePartial<GetMetadataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMetadataRequest): GetMetadataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 compid */ 1:
                    message.compid = reader.uint32();
                    break;
                case /* mavsdk.rpc.component_metadata.MetadataType metadata_type */ 2:
                    message.metadataType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMetadataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 compid = 1; */
        if (message.compid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.compid);
        /* mavsdk.rpc.component_metadata.MetadataType metadata_type = 2; */
        if (message.metadataType !== 0)
            writer.tag(2, WireType.Varint).int32(message.metadataType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.GetMetadataRequest
 */
export const GetMetadataRequest = new GetMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMetadataResponse$Type extends MessageType<GetMetadataResponse> {
    constructor() {
        super("mavsdk.rpc.component_metadata.GetMetadataResponse", [
            { no: 1, name: "component_metadata_result", kind: "message", T: () => ComponentMetadataResult },
            { no: 2, name: "response", kind: "message", T: () => MetadataData }
        ]);
    }
    create(value?: PartialMessage<GetMetadataResponse>): GetMetadataResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMetadataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMetadataResponse): GetMetadataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.component_metadata.ComponentMetadataResult component_metadata_result */ 1:
                    message.componentMetadataResult = ComponentMetadataResult.internalBinaryRead(reader, reader.uint32(), options, message.componentMetadataResult);
                    break;
                case /* mavsdk.rpc.component_metadata.MetadataData response */ 2:
                    message.response = MetadataData.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMetadataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.component_metadata.ComponentMetadataResult component_metadata_result = 1; */
        if (message.componentMetadataResult)
            ComponentMetadataResult.internalBinaryWrite(message.componentMetadataResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.component_metadata.MetadataData response = 2; */
        if (message.response)
            MetadataData.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.GetMetadataResponse
 */
export const GetMetadataResponse = new GetMetadataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataData$Type extends MessageType<MetadataData> {
    constructor() {
        super("mavsdk.rpc.component_metadata.MetadataData", [
            { no: 1, name: "json_metadata", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MetadataData>): MetadataData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jsonMetadata = "";
        if (value !== undefined)
            reflectionMergePartial<MetadataData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataData): MetadataData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string json_metadata */ 1:
                    message.jsonMetadata = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string json_metadata = 1; */
        if (message.jsonMetadata !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jsonMetadata);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.MetadataData
 */
export const MetadataData = new MetadataData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComponentMetadataResult$Type extends MessageType<ComponentMetadataResult> {
    constructor() {
        super("mavsdk.rpc.component_metadata.ComponentMetadataResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.component_metadata.ComponentMetadataResult.Result", ComponentMetadataResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ComponentMetadataResult>): ComponentMetadataResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<ComponentMetadataResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComponentMetadataResult): ComponentMetadataResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.component_metadata.ComponentMetadataResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ComponentMetadataResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.component_metadata.ComponentMetadataResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.ComponentMetadataResult
 */
export const ComponentMetadataResult = new ComponentMetadataResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestComponentResponse$Type extends MessageType<RequestComponentResponse> {
    constructor() {
        super("mavsdk.rpc.component_metadata.RequestComponentResponse", []);
    }
    create(value?: PartialMessage<RequestComponentResponse>): RequestComponentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RequestComponentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestComponentResponse): RequestComponentResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RequestComponentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.RequestComponentResponse
 */
export const RequestComponentResponse = new RequestComponentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestAutopilotComponentRequest$Type extends MessageType<RequestAutopilotComponentRequest> {
    constructor() {
        super("mavsdk.rpc.component_metadata.RequestAutopilotComponentRequest", []);
    }
    create(value?: PartialMessage<RequestAutopilotComponentRequest>): RequestAutopilotComponentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RequestAutopilotComponentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestAutopilotComponentRequest): RequestAutopilotComponentRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RequestAutopilotComponentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.RequestAutopilotComponentRequest
 */
export const RequestAutopilotComponentRequest = new RequestAutopilotComponentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestAutopilotComponentResponse$Type extends MessageType<RequestAutopilotComponentResponse> {
    constructor() {
        super("mavsdk.rpc.component_metadata.RequestAutopilotComponentResponse", []);
    }
    create(value?: PartialMessage<RequestAutopilotComponentResponse>): RequestAutopilotComponentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RequestAutopilotComponentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestAutopilotComponentResponse): RequestAutopilotComponentResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RequestAutopilotComponentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.RequestAutopilotComponentResponse
 */
export const RequestAutopilotComponentResponse = new RequestAutopilotComponentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeMetadataAvailableRequest$Type extends MessageType<SubscribeMetadataAvailableRequest> {
    constructor() {
        super("mavsdk.rpc.component_metadata.SubscribeMetadataAvailableRequest", []);
    }
    create(value?: PartialMessage<SubscribeMetadataAvailableRequest>): SubscribeMetadataAvailableRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeMetadataAvailableRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeMetadataAvailableRequest): SubscribeMetadataAvailableRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeMetadataAvailableRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.SubscribeMetadataAvailableRequest
 */
export const SubscribeMetadataAvailableRequest = new SubscribeMetadataAvailableRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataAvailableResponse$Type extends MessageType<MetadataAvailableResponse> {
    constructor() {
        super("mavsdk.rpc.component_metadata.MetadataAvailableResponse", [
            { no: 1, name: "data", kind: "message", T: () => MetadataUpdate }
        ]);
    }
    create(value?: PartialMessage<MetadataAvailableResponse>): MetadataAvailableResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MetadataAvailableResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataAvailableResponse): MetadataAvailableResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.component_metadata.MetadataUpdate data */ 1:
                    message.data = MetadataUpdate.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataAvailableResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.component_metadata.MetadataUpdate data = 1; */
        if (message.data)
            MetadataUpdate.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.MetadataAvailableResponse
 */
export const MetadataAvailableResponse = new MetadataAvailableResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetadataUpdate$Type extends MessageType<MetadataUpdate> {
    constructor() {
        super("mavsdk.rpc.component_metadata.MetadataUpdate", [
            { no: 1, name: "compid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["mavsdk.rpc.component_metadata.MetadataType", MetadataType, "METADATA_TYPE_"] },
            { no: 3, name: "json_metadata", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MetadataUpdate>): MetadataUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.compid = 0;
        message.type = 0;
        message.jsonMetadata = "";
        if (value !== undefined)
            reflectionMergePartial<MetadataUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataUpdate): MetadataUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 compid */ 1:
                    message.compid = reader.uint32();
                    break;
                case /* mavsdk.rpc.component_metadata.MetadataType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string json_metadata */ 3:
                    message.jsonMetadata = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 compid = 1; */
        if (message.compid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.compid);
        /* mavsdk.rpc.component_metadata.MetadataType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string json_metadata = 3; */
        if (message.jsonMetadata !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.jsonMetadata);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.component_metadata.MetadataUpdate
 */
export const MetadataUpdate = new MetadataUpdate$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.component_metadata.ComponentMetadataService
 */
export const ComponentMetadataService = new ServiceType("mavsdk.rpc.component_metadata.ComponentMetadataService", [
    { name: "RequestComponent", options: { "mavsdk.options.async_type": "SYNC" }, I: RequestComponentRequest, O: RequestComponentResponse },
    { name: "RequestAutopilotComponent", options: { "mavsdk.options.async_type": "SYNC" }, I: RequestAutopilotComponentRequest, O: RequestAutopilotComponentResponse },
    { name: "SubscribeMetadataAvailable", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC" }, I: SubscribeMetadataAvailableRequest, O: MetadataAvailableResponse },
    { name: "GetMetadata", options: { "mavsdk.options.async_type": "SYNC" }, I: GetMetadataRequest, O: GetMetadataResponse }
]);
