/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "component_metadata/component_metadata.proto" (package "mavsdk.rpc.component_metadata", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ComponentMetadataService } from "./component_metadata";
import type { GetMetadataResponse } from "./component_metadata";
import type { GetMetadataRequest } from "./component_metadata";
import type { MetadataAvailableResponse } from "./component_metadata";
import type { SubscribeMetadataAvailableRequest } from "./component_metadata";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RequestAutopilotComponentResponse } from "./component_metadata";
import type { RequestAutopilotComponentRequest } from "./component_metadata";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RequestComponentResponse } from "./component_metadata";
import type { RequestComponentRequest } from "./component_metadata";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Access component metadata json definitions, such as parameters.
 *
 * @generated from protobuf service mavsdk.rpc.component_metadata.ComponentMetadataService
 */
export interface IComponentMetadataServiceClient {
    /**
     *
     * Request metadata from a specific component. This is used to start requesting metadata from a component.
     * The metadata can later be accessed via subscription (see below) or GetMetadata.
     *
     * @generated from protobuf rpc: RequestComponent(mavsdk.rpc.component_metadata.RequestComponentRequest) returns (mavsdk.rpc.component_metadata.RequestComponentResponse);
     */
    requestComponent(input: RequestComponentRequest, options?: RpcOptions): UnaryCall<RequestComponentRequest, RequestComponentResponse>;
    /**
     *
     * Request metadata from the autopilot component. This is used to start requesting metadata from the autopilot.
     * The metadata can later be accessed via subscription (see below) or GetMetadata.
     *
     * @generated from protobuf rpc: RequestAutopilotComponent(mavsdk.rpc.component_metadata.RequestAutopilotComponentRequest) returns (mavsdk.rpc.component_metadata.RequestAutopilotComponentResponse);
     */
    requestAutopilotComponent(input: RequestAutopilotComponentRequest, options?: RpcOptions): UnaryCall<RequestAutopilotComponentRequest, RequestAutopilotComponentResponse>;
    /**
     *
     * Register a callback that gets called when metadata is available
     *
     * @generated from protobuf rpc: SubscribeMetadataAvailable(mavsdk.rpc.component_metadata.SubscribeMetadataAvailableRequest) returns (stream mavsdk.rpc.component_metadata.MetadataAvailableResponse);
     */
    subscribeMetadataAvailable(input: SubscribeMetadataAvailableRequest, options?: RpcOptions): ServerStreamingCall<SubscribeMetadataAvailableRequest, MetadataAvailableResponse>;
    /**
     *
     * Access metadata. This can be used if you know the metadata is available already, otherwise use
     * the subscription to get notified when it becomes available.
     *
     * @generated from protobuf rpc: GetMetadata(mavsdk.rpc.component_metadata.GetMetadataRequest) returns (mavsdk.rpc.component_metadata.GetMetadataResponse);
     */
    getMetadata(input: GetMetadataRequest, options?: RpcOptions): UnaryCall<GetMetadataRequest, GetMetadataResponse>;
}
/**
 * Access component metadata json definitions, such as parameters.
 *
 * @generated from protobuf service mavsdk.rpc.component_metadata.ComponentMetadataService
 */
export class ComponentMetadataServiceClient implements IComponentMetadataServiceClient, ServiceInfo {
    typeName = ComponentMetadataService.typeName;
    methods = ComponentMetadataService.methods;
    options = ComponentMetadataService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *
     * Request metadata from a specific component. This is used to start requesting metadata from a component.
     * The metadata can later be accessed via subscription (see below) or GetMetadata.
     *
     * @generated from protobuf rpc: RequestComponent(mavsdk.rpc.component_metadata.RequestComponentRequest) returns (mavsdk.rpc.component_metadata.RequestComponentResponse);
     */
    requestComponent(input: RequestComponentRequest, options?: RpcOptions): UnaryCall<RequestComponentRequest, RequestComponentResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestComponentRequest, RequestComponentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Request metadata from the autopilot component. This is used to start requesting metadata from the autopilot.
     * The metadata can later be accessed via subscription (see below) or GetMetadata.
     *
     * @generated from protobuf rpc: RequestAutopilotComponent(mavsdk.rpc.component_metadata.RequestAutopilotComponentRequest) returns (mavsdk.rpc.component_metadata.RequestAutopilotComponentResponse);
     */
    requestAutopilotComponent(input: RequestAutopilotComponentRequest, options?: RpcOptions): UnaryCall<RequestAutopilotComponentRequest, RequestAutopilotComponentResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestAutopilotComponentRequest, RequestAutopilotComponentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Register a callback that gets called when metadata is available
     *
     * @generated from protobuf rpc: SubscribeMetadataAvailable(mavsdk.rpc.component_metadata.SubscribeMetadataAvailableRequest) returns (stream mavsdk.rpc.component_metadata.MetadataAvailableResponse);
     */
    subscribeMetadataAvailable(input: SubscribeMetadataAvailableRequest, options?: RpcOptions): ServerStreamingCall<SubscribeMetadataAvailableRequest, MetadataAvailableResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeMetadataAvailableRequest, MetadataAvailableResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     *
     * Access metadata. This can be used if you know the metadata is available already, otherwise use
     * the subscription to get notified when it becomes available.
     *
     * @generated from protobuf rpc: GetMetadata(mavsdk.rpc.component_metadata.GetMetadataRequest) returns (mavsdk.rpc.component_metadata.GetMetadataResponse);
     */
    getMetadata(input: GetMetadataRequest, options?: RpcOptions): UnaryCall<GetMetadataRequest, GetMetadataResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMetadataRequest, GetMetadataResponse>("unary", this._transport, method, opt, input);
    }
}
