/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "action_server/action_server.proto" (package "mavsdk.rpc.action_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ActionServerService } from "./action_server";
import type { GetAllowableFlightModesResponse } from "./action_server";
import type { GetAllowableFlightModesRequest } from "./action_server";
import type { SetAllowableFlightModesResponse } from "./action_server";
import type { SetAllowableFlightModesRequest } from "./action_server";
import type { SetDisarmableResponse } from "./action_server";
import type { SetDisarmableRequest } from "./action_server";
import type { SetArmableResponse } from "./action_server";
import type { SetArmableRequest } from "./action_server";
import type { SetAllowTakeoffResponse } from "./action_server";
import type { SetAllowTakeoffRequest } from "./action_server";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { TerminateResponse } from "./action_server";
import type { SubscribeTerminateRequest } from "./action_server";
import type { ShutdownResponse } from "./action_server";
import type { SubscribeShutdownRequest } from "./action_server";
import type { RebootResponse } from "./action_server";
import type { SubscribeRebootRequest } from "./action_server";
import type { LandResponse } from "./action_server";
import type { SubscribeLandRequest } from "./action_server";
import type { TakeoffResponse } from "./action_server";
import type { SubscribeTakeoffRequest } from "./action_server";
import type { FlightModeChangeResponse } from "./action_server";
import type { SubscribeFlightModeChangeRequest } from "./action_server";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ArmDisarmResponse } from "./action_server";
import type { SubscribeArmDisarmRequest } from "./action_server";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Provide vehicle actions (as a server) such as arming, taking off, and landing.
 *
 * @generated from protobuf service mavsdk.rpc.action_server.ActionServerService
 */
export interface IActionServerServiceClient {
    /**
     * Subscribe to ARM/DISARM commands
     *
     * @generated from protobuf rpc: SubscribeArmDisarm(mavsdk.rpc.action_server.SubscribeArmDisarmRequest) returns (stream mavsdk.rpc.action_server.ArmDisarmResponse);
     */
    subscribeArmDisarm(input: SubscribeArmDisarmRequest, options?: RpcOptions): ServerStreamingCall<SubscribeArmDisarmRequest, ArmDisarmResponse>;
    /**
     * Subscribe to DO_SET_MODE
     *
     * @generated from protobuf rpc: SubscribeFlightModeChange(mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest) returns (stream mavsdk.rpc.action_server.FlightModeChangeResponse);
     */
    subscribeFlightModeChange(input: SubscribeFlightModeChangeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFlightModeChangeRequest, FlightModeChangeResponse>;
    /**
     * Subscribe to takeoff command
     *
     * @generated from protobuf rpc: SubscribeTakeoff(mavsdk.rpc.action_server.SubscribeTakeoffRequest) returns (stream mavsdk.rpc.action_server.TakeoffResponse);
     */
    subscribeTakeoff(input: SubscribeTakeoffRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTakeoffRequest, TakeoffResponse>;
    /**
     * Subscribe to land command
     *
     * @generated from protobuf rpc: SubscribeLand(mavsdk.rpc.action_server.SubscribeLandRequest) returns (stream mavsdk.rpc.action_server.LandResponse);
     */
    subscribeLand(input: SubscribeLandRequest, options?: RpcOptions): ServerStreamingCall<SubscribeLandRequest, LandResponse>;
    /**
     * Subscribe to reboot command
     *
     * @generated from protobuf rpc: SubscribeReboot(mavsdk.rpc.action_server.SubscribeRebootRequest) returns (stream mavsdk.rpc.action_server.RebootResponse);
     */
    subscribeReboot(input: SubscribeRebootRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRebootRequest, RebootResponse>;
    /**
     * Subscribe to shutdown command
     *
     * @generated from protobuf rpc: SubscribeShutdown(mavsdk.rpc.action_server.SubscribeShutdownRequest) returns (stream mavsdk.rpc.action_server.ShutdownResponse);
     */
    subscribeShutdown(input: SubscribeShutdownRequest, options?: RpcOptions): ServerStreamingCall<SubscribeShutdownRequest, ShutdownResponse>;
    /**
     * Subscribe to terminate command
     *
     * @generated from protobuf rpc: SubscribeTerminate(mavsdk.rpc.action_server.SubscribeTerminateRequest) returns (stream mavsdk.rpc.action_server.TerminateResponse);
     */
    subscribeTerminate(input: SubscribeTerminateRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTerminateRequest, TerminateResponse>;
    /**
     * Can the vehicle takeoff
     *
     * @generated from protobuf rpc: SetAllowTakeoff(mavsdk.rpc.action_server.SetAllowTakeoffRequest) returns (mavsdk.rpc.action_server.SetAllowTakeoffResponse);
     */
    setAllowTakeoff(input: SetAllowTakeoffRequest, options?: RpcOptions): UnaryCall<SetAllowTakeoffRequest, SetAllowTakeoffResponse>;
    /**
     * Can the vehicle arm when requested
     *
     * @generated from protobuf rpc: SetArmable(mavsdk.rpc.action_server.SetArmableRequest) returns (mavsdk.rpc.action_server.SetArmableResponse);
     */
    setArmable(input: SetArmableRequest, options?: RpcOptions): UnaryCall<SetArmableRequest, SetArmableResponse>;
    /**
     * Can the vehicle disarm when requested
     *
     * @generated from protobuf rpc: SetDisarmable(mavsdk.rpc.action_server.SetDisarmableRequest) returns (mavsdk.rpc.action_server.SetDisarmableResponse);
     */
    setDisarmable(input: SetDisarmableRequest, options?: RpcOptions): UnaryCall<SetDisarmableRequest, SetDisarmableResponse>;
    /**
     * Set which modes the vehicle can transition to (Manual always allowed)
     *
     * @generated from protobuf rpc: SetAllowableFlightModes(mavsdk.rpc.action_server.SetAllowableFlightModesRequest) returns (mavsdk.rpc.action_server.SetAllowableFlightModesResponse);
     */
    setAllowableFlightModes(input: SetAllowableFlightModesRequest, options?: RpcOptions): UnaryCall<SetAllowableFlightModesRequest, SetAllowableFlightModesResponse>;
    /**
     * Get which modes the vehicle can transition to (Manual always allowed)
     *
     * @generated from protobuf rpc: GetAllowableFlightModes(mavsdk.rpc.action_server.GetAllowableFlightModesRequest) returns (mavsdk.rpc.action_server.GetAllowableFlightModesResponse);
     */
    getAllowableFlightModes(input: GetAllowableFlightModesRequest, options?: RpcOptions): UnaryCall<GetAllowableFlightModesRequest, GetAllowableFlightModesResponse>;
}
/**
 * Provide vehicle actions (as a server) such as arming, taking off, and landing.
 *
 * @generated from protobuf service mavsdk.rpc.action_server.ActionServerService
 */
export class ActionServerServiceClient implements IActionServerServiceClient, ServiceInfo {
    typeName = ActionServerService.typeName;
    methods = ActionServerService.methods;
    options = ActionServerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Subscribe to ARM/DISARM commands
     *
     * @generated from protobuf rpc: SubscribeArmDisarm(mavsdk.rpc.action_server.SubscribeArmDisarmRequest) returns (stream mavsdk.rpc.action_server.ArmDisarmResponse);
     */
    subscribeArmDisarm(input: SubscribeArmDisarmRequest, options?: RpcOptions): ServerStreamingCall<SubscribeArmDisarmRequest, ArmDisarmResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeArmDisarmRequest, ArmDisarmResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to DO_SET_MODE
     *
     * @generated from protobuf rpc: SubscribeFlightModeChange(mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest) returns (stream mavsdk.rpc.action_server.FlightModeChangeResponse);
     */
    subscribeFlightModeChange(input: SubscribeFlightModeChangeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFlightModeChangeRequest, FlightModeChangeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeFlightModeChangeRequest, FlightModeChangeResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to takeoff command
     *
     * @generated from protobuf rpc: SubscribeTakeoff(mavsdk.rpc.action_server.SubscribeTakeoffRequest) returns (stream mavsdk.rpc.action_server.TakeoffResponse);
     */
    subscribeTakeoff(input: SubscribeTakeoffRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTakeoffRequest, TakeoffResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTakeoffRequest, TakeoffResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to land command
     *
     * @generated from protobuf rpc: SubscribeLand(mavsdk.rpc.action_server.SubscribeLandRequest) returns (stream mavsdk.rpc.action_server.LandResponse);
     */
    subscribeLand(input: SubscribeLandRequest, options?: RpcOptions): ServerStreamingCall<SubscribeLandRequest, LandResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeLandRequest, LandResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to reboot command
     *
     * @generated from protobuf rpc: SubscribeReboot(mavsdk.rpc.action_server.SubscribeRebootRequest) returns (stream mavsdk.rpc.action_server.RebootResponse);
     */
    subscribeReboot(input: SubscribeRebootRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRebootRequest, RebootResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRebootRequest, RebootResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to shutdown command
     *
     * @generated from protobuf rpc: SubscribeShutdown(mavsdk.rpc.action_server.SubscribeShutdownRequest) returns (stream mavsdk.rpc.action_server.ShutdownResponse);
     */
    subscribeShutdown(input: SubscribeShutdownRequest, options?: RpcOptions): ServerStreamingCall<SubscribeShutdownRequest, ShutdownResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeShutdownRequest, ShutdownResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to terminate command
     *
     * @generated from protobuf rpc: SubscribeTerminate(mavsdk.rpc.action_server.SubscribeTerminateRequest) returns (stream mavsdk.rpc.action_server.TerminateResponse);
     */
    subscribeTerminate(input: SubscribeTerminateRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTerminateRequest, TerminateResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTerminateRequest, TerminateResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Can the vehicle takeoff
     *
     * @generated from protobuf rpc: SetAllowTakeoff(mavsdk.rpc.action_server.SetAllowTakeoffRequest) returns (mavsdk.rpc.action_server.SetAllowTakeoffResponse);
     */
    setAllowTakeoff(input: SetAllowTakeoffRequest, options?: RpcOptions): UnaryCall<SetAllowTakeoffRequest, SetAllowTakeoffResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetAllowTakeoffRequest, SetAllowTakeoffResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Can the vehicle arm when requested
     *
     * @generated from protobuf rpc: SetArmable(mavsdk.rpc.action_server.SetArmableRequest) returns (mavsdk.rpc.action_server.SetArmableResponse);
     */
    setArmable(input: SetArmableRequest, options?: RpcOptions): UnaryCall<SetArmableRequest, SetArmableResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetArmableRequest, SetArmableResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Can the vehicle disarm when requested
     *
     * @generated from protobuf rpc: SetDisarmable(mavsdk.rpc.action_server.SetDisarmableRequest) returns (mavsdk.rpc.action_server.SetDisarmableResponse);
     */
    setDisarmable(input: SetDisarmableRequest, options?: RpcOptions): UnaryCall<SetDisarmableRequest, SetDisarmableResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetDisarmableRequest, SetDisarmableResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set which modes the vehicle can transition to (Manual always allowed)
     *
     * @generated from protobuf rpc: SetAllowableFlightModes(mavsdk.rpc.action_server.SetAllowableFlightModesRequest) returns (mavsdk.rpc.action_server.SetAllowableFlightModesResponse);
     */
    setAllowableFlightModes(input: SetAllowableFlightModesRequest, options?: RpcOptions): UnaryCall<SetAllowableFlightModesRequest, SetAllowableFlightModesResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetAllowableFlightModesRequest, SetAllowableFlightModesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get which modes the vehicle can transition to (Manual always allowed)
     *
     * @generated from protobuf rpc: GetAllowableFlightModes(mavsdk.rpc.action_server.GetAllowableFlightModesRequest) returns (mavsdk.rpc.action_server.GetAllowableFlightModesResponse);
     */
    getAllowableFlightModes(input: GetAllowableFlightModesRequest, options?: RpcOptions): UnaryCall<GetAllowableFlightModesRequest, GetAllowableFlightModesResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllowableFlightModesRequest, GetAllowableFlightModesResponse>("unary", this._transport, method, opt, input);
    }
}
