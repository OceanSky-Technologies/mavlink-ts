/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "manual_control/manual_control.proto" (package "mavsdk.rpc.manual_control", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.manual_control.StartPositionControlRequest
 */
export interface StartPositionControlRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.manual_control.StartPositionControlResponse
 */
export interface StartPositionControlResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.manual_control.ManualControlResult manual_control_result = 1;
     */
    manualControlResult?: ManualControlResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.manual_control.StartAltitudeControlRequest
 */
export interface StartAltitudeControlRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.manual_control.StartAltitudeControlResponse
 */
export interface StartAltitudeControlResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.manual_control.ManualControlResult manual_control_result = 1;
     */
    manualControlResult?: ManualControlResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.manual_control.SetManualControlInputRequest
 */
export interface SetManualControlInputRequest {
    /**
     * @generated from protobuf field: float x = 1;
     */
    x: number; // value between -1. to 1. negative -> backwards, positive -> forwards
    /**
     * @generated from protobuf field: float y = 2;
     */
    y: number; // value between -1. to 1. negative -> left, positive -> right
    /**
     * @generated from protobuf field: float z = 3;
     */
    z: number; // value between -1. to 1. negative -> down, positive -> up (usually for now, for multicopter 0 to 1 is expected)
    /**
     * @generated from protobuf field: float r = 4;
     */
    r: number; // value between -1. to 1. negative -> turn anti-clockwise (towards the left), positive -> turn clockwise (towards the right)
}
/**
 * @generated from protobuf message mavsdk.rpc.manual_control.SetManualControlInputResponse
 */
export interface SetManualControlInputResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.manual_control.ManualControlResult manual_control_result = 1;
     */
    manualControlResult?: ManualControlResult;
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.manual_control.ManualControlResult
 */
export interface ManualControlResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.manual_control.ManualControlResult.Result result = 1;
     */
    result: ManualControlResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for manual control requests.
 *
 * @generated from protobuf enum mavsdk.rpc.manual_control.ManualControlResult.Result
 */
export enum ManualControlResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request was successful
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 2;
     */
    NO_SYSTEM = 2,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 3;
     */
    CONNECTION_ERROR = 3,
    /**
     * Vehicle is busy
     *
     * @generated from protobuf enum value: RESULT_BUSY = 4;
     */
    BUSY = 4,
    /**
     * Command refused by vehicle
     *
     * @generated from protobuf enum value: RESULT_COMMAND_DENIED = 5;
     */
    COMMAND_DENIED = 5,
    /**
     * Request timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 6;
     */
    TIMEOUT = 6,
    /**
     * Input out of range
     *
     * @generated from protobuf enum value: RESULT_INPUT_OUT_OF_RANGE = 7;
     */
    INPUT_OUT_OF_RANGE = 7,
    /**
     * No Input set
     *
     * @generated from protobuf enum value: RESULT_INPUT_NOT_SET = 8;
     */
    INPUT_NOT_SET = 8
}
// @generated message type with reflection information, may provide speed optimized methods
class StartPositionControlRequest$Type extends MessageType<StartPositionControlRequest> {
    constructor() {
        super("mavsdk.rpc.manual_control.StartPositionControlRequest", []);
    }
    create(value?: PartialMessage<StartPositionControlRequest>): StartPositionControlRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartPositionControlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartPositionControlRequest): StartPositionControlRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartPositionControlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.manual_control.StartPositionControlRequest
 */
export const StartPositionControlRequest = new StartPositionControlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartPositionControlResponse$Type extends MessageType<StartPositionControlResponse> {
    constructor() {
        super("mavsdk.rpc.manual_control.StartPositionControlResponse", [
            { no: 1, name: "manual_control_result", kind: "message", T: () => ManualControlResult }
        ]);
    }
    create(value?: PartialMessage<StartPositionControlResponse>): StartPositionControlResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartPositionControlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartPositionControlResponse): StartPositionControlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.manual_control.ManualControlResult manual_control_result */ 1:
                    message.manualControlResult = ManualControlResult.internalBinaryRead(reader, reader.uint32(), options, message.manualControlResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartPositionControlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.manual_control.ManualControlResult manual_control_result = 1; */
        if (message.manualControlResult)
            ManualControlResult.internalBinaryWrite(message.manualControlResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.manual_control.StartPositionControlResponse
 */
export const StartPositionControlResponse = new StartPositionControlResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartAltitudeControlRequest$Type extends MessageType<StartAltitudeControlRequest> {
    constructor() {
        super("mavsdk.rpc.manual_control.StartAltitudeControlRequest", []);
    }
    create(value?: PartialMessage<StartAltitudeControlRequest>): StartAltitudeControlRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartAltitudeControlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartAltitudeControlRequest): StartAltitudeControlRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartAltitudeControlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.manual_control.StartAltitudeControlRequest
 */
export const StartAltitudeControlRequest = new StartAltitudeControlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartAltitudeControlResponse$Type extends MessageType<StartAltitudeControlResponse> {
    constructor() {
        super("mavsdk.rpc.manual_control.StartAltitudeControlResponse", [
            { no: 1, name: "manual_control_result", kind: "message", T: () => ManualControlResult }
        ]);
    }
    create(value?: PartialMessage<StartAltitudeControlResponse>): StartAltitudeControlResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartAltitudeControlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartAltitudeControlResponse): StartAltitudeControlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.manual_control.ManualControlResult manual_control_result */ 1:
                    message.manualControlResult = ManualControlResult.internalBinaryRead(reader, reader.uint32(), options, message.manualControlResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartAltitudeControlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.manual_control.ManualControlResult manual_control_result = 1; */
        if (message.manualControlResult)
            ManualControlResult.internalBinaryWrite(message.manualControlResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.manual_control.StartAltitudeControlResponse
 */
export const StartAltitudeControlResponse = new StartAltitudeControlResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetManualControlInputRequest$Type extends MessageType<SetManualControlInputRequest> {
    constructor() {
        super("mavsdk.rpc.manual_control.SetManualControlInputRequest", [
            { no: 1, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "r", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SetManualControlInputRequest>): SetManualControlInputRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.x = 0;
        message.y = 0;
        message.z = 0;
        message.r = 0;
        if (value !== undefined)
            reflectionMergePartial<SetManualControlInputRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetManualControlInputRequest): SetManualControlInputRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float x */ 1:
                    message.x = reader.float();
                    break;
                case /* float y */ 2:
                    message.y = reader.float();
                    break;
                case /* float z */ 3:
                    message.z = reader.float();
                    break;
                case /* float r */ 4:
                    message.r = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetManualControlInputRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit32).float(message.x);
        /* float y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit32).float(message.y);
        /* float z = 3; */
        if (message.z !== 0)
            writer.tag(3, WireType.Bit32).float(message.z);
        /* float r = 4; */
        if (message.r !== 0)
            writer.tag(4, WireType.Bit32).float(message.r);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.manual_control.SetManualControlInputRequest
 */
export const SetManualControlInputRequest = new SetManualControlInputRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetManualControlInputResponse$Type extends MessageType<SetManualControlInputResponse> {
    constructor() {
        super("mavsdk.rpc.manual_control.SetManualControlInputResponse", [
            { no: 1, name: "manual_control_result", kind: "message", T: () => ManualControlResult }
        ]);
    }
    create(value?: PartialMessage<SetManualControlInputResponse>): SetManualControlInputResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetManualControlInputResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetManualControlInputResponse): SetManualControlInputResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.manual_control.ManualControlResult manual_control_result */ 1:
                    message.manualControlResult = ManualControlResult.internalBinaryRead(reader, reader.uint32(), options, message.manualControlResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetManualControlInputResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.manual_control.ManualControlResult manual_control_result = 1; */
        if (message.manualControlResult)
            ManualControlResult.internalBinaryWrite(message.manualControlResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.manual_control.SetManualControlInputResponse
 */
export const SetManualControlInputResponse = new SetManualControlInputResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManualControlResult$Type extends MessageType<ManualControlResult> {
    constructor() {
        super("mavsdk.rpc.manual_control.ManualControlResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.manual_control.ManualControlResult.Result", ManualControlResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ManualControlResult>): ManualControlResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<ManualControlResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManualControlResult): ManualControlResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.manual_control.ManualControlResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManualControlResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.manual_control.ManualControlResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.manual_control.ManualControlResult
 */
export const ManualControlResult = new ManualControlResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.manual_control.ManualControlService
 */
export const ManualControlService = new ServiceType("mavsdk.rpc.manual_control.ManualControlService", [
    { name: "StartPositionControl", options: {}, I: StartPositionControlRequest, O: StartPositionControlResponse },
    { name: "StartAltitudeControl", options: {}, I: StartAltitudeControlRequest, O: StartAltitudeControlResponse },
    { name: "SetManualControlInput", options: { "mavsdk.options.async_type": "SYNC" }, I: SetManualControlInputRequest, O: SetManualControlInputResponse }
]);
