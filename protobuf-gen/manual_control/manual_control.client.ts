/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "manual_control/manual_control.proto" (package "mavsdk.rpc.manual_control", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ManualControlService } from "./manual_control";
import type { SetManualControlInputResponse } from "./manual_control";
import type { SetManualControlInputRequest } from "./manual_control";
import type { StartAltitudeControlResponse } from "./manual_control";
import type { StartAltitudeControlRequest } from "./manual_control";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartPositionControlResponse } from "./manual_control";
import type { StartPositionControlRequest } from "./manual_control";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Enable manual control using e.g. a joystick or gamepad.
 *
 * @generated from protobuf service mavsdk.rpc.manual_control.ManualControlService
 */
export interface IManualControlServiceClient {
    /**
     *
     * Start position control using e.g. joystick input.
     *
     * Requires manual control input to be sent regularly already.
     * Requires a valid position using e.g. GPS, external vision, or optical flow.
     *
     * @generated from protobuf rpc: StartPositionControl(mavsdk.rpc.manual_control.StartPositionControlRequest) returns (mavsdk.rpc.manual_control.StartPositionControlResponse);
     */
    startPositionControl(input: StartPositionControlRequest, options?: RpcOptions): UnaryCall<StartPositionControlRequest, StartPositionControlResponse>;
    /**
     *
     * Start altitude control
     *
     * Requires manual control input to be sent regularly already.
     * Does not require a  valid position e.g. GPS.
     *
     * @generated from protobuf rpc: StartAltitudeControl(mavsdk.rpc.manual_control.StartAltitudeControlRequest) returns (mavsdk.rpc.manual_control.StartAltitudeControlResponse);
     */
    startAltitudeControl(input: StartAltitudeControlRequest, options?: RpcOptions): UnaryCall<StartAltitudeControlRequest, StartAltitudeControlResponse>;
    /**
     *
     * Set manual control input
     *
     * The manual control input needs to be sent at a rate high enough to prevent
     * triggering of RC loss, a good minimum rate is 10 Hz.
     *
     * @generated from protobuf rpc: SetManualControlInput(mavsdk.rpc.manual_control.SetManualControlInputRequest) returns (mavsdk.rpc.manual_control.SetManualControlInputResponse);
     */
    setManualControlInput(input: SetManualControlInputRequest, options?: RpcOptions): UnaryCall<SetManualControlInputRequest, SetManualControlInputResponse>;
}
/**
 * Enable manual control using e.g. a joystick or gamepad.
 *
 * @generated from protobuf service mavsdk.rpc.manual_control.ManualControlService
 */
export class ManualControlServiceClient implements IManualControlServiceClient, ServiceInfo {
    typeName = ManualControlService.typeName;
    methods = ManualControlService.methods;
    options = ManualControlService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *
     * Start position control using e.g. joystick input.
     *
     * Requires manual control input to be sent regularly already.
     * Requires a valid position using e.g. GPS, external vision, or optical flow.
     *
     * @generated from protobuf rpc: StartPositionControl(mavsdk.rpc.manual_control.StartPositionControlRequest) returns (mavsdk.rpc.manual_control.StartPositionControlResponse);
     */
    startPositionControl(input: StartPositionControlRequest, options?: RpcOptions): UnaryCall<StartPositionControlRequest, StartPositionControlResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartPositionControlRequest, StartPositionControlResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Start altitude control
     *
     * Requires manual control input to be sent regularly already.
     * Does not require a  valid position e.g. GPS.
     *
     * @generated from protobuf rpc: StartAltitudeControl(mavsdk.rpc.manual_control.StartAltitudeControlRequest) returns (mavsdk.rpc.manual_control.StartAltitudeControlResponse);
     */
    startAltitudeControl(input: StartAltitudeControlRequest, options?: RpcOptions): UnaryCall<StartAltitudeControlRequest, StartAltitudeControlResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartAltitudeControlRequest, StartAltitudeControlResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set manual control input
     *
     * The manual control input needs to be sent at a rate high enough to prevent
     * triggering of RC loss, a good minimum rate is 10 Hz.
     *
     * @generated from protobuf rpc: SetManualControlInput(mavsdk.rpc.manual_control.SetManualControlInputRequest) returns (mavsdk.rpc.manual_control.SetManualControlInputResponse);
     */
    setManualControlInput(input: SetManualControlInputRequest, options?: RpcOptions): UnaryCall<SetManualControlInputRequest, SetManualControlInputResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetManualControlInputRequest, SetManualControlInputResponse>("unary", this._transport, method, opt, input);
    }
}
