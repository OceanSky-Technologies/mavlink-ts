/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "core/core.proto" (package "mavsdk.rpc.core", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CoreService } from "./core";
import type { SetMavlinkTimeoutResponse } from "./core";
import type { SetMavlinkTimeoutRequest } from "./core";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConnectionStateResponse } from "./core";
import type { SubscribeConnectionStateRequest } from "./core";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Access to the connection state and core configurations
 *
 * @generated from protobuf service mavsdk.rpc.core.CoreService
 */
export interface ICoreServiceClient {
    /**
     *
     * Subscribe to 'connection state' updates.
     *
     * @generated from protobuf rpc: SubscribeConnectionState(mavsdk.rpc.core.SubscribeConnectionStateRequest) returns (stream mavsdk.rpc.core.ConnectionStateResponse);
     */
    subscribeConnectionState(input: SubscribeConnectionStateRequest, options?: RpcOptions): ServerStreamingCall<SubscribeConnectionStateRequest, ConnectionStateResponse>;
    /**
     *
     * Set timeout of MAVLink transfers.
     *
     * The default timeout used is generally (0.5 seconds) seconds.
     * If MAVSDK is used on the same host this timeout can be reduced, while
     * if MAVSDK has to communicate over links with high latency it might
     * need to be increased to prevent timeouts.
     *
     * @generated from protobuf rpc: SetMavlinkTimeout(mavsdk.rpc.core.SetMavlinkTimeoutRequest) returns (mavsdk.rpc.core.SetMavlinkTimeoutResponse);
     */
    setMavlinkTimeout(input: SetMavlinkTimeoutRequest, options?: RpcOptions): UnaryCall<SetMavlinkTimeoutRequest, SetMavlinkTimeoutResponse>;
}
/**
 * Access to the connection state and core configurations
 *
 * @generated from protobuf service mavsdk.rpc.core.CoreService
 */
export class CoreServiceClient implements ICoreServiceClient, ServiceInfo {
    typeName = CoreService.typeName;
    methods = CoreService.methods;
    options = CoreService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *
     * Subscribe to 'connection state' updates.
     *
     * @generated from protobuf rpc: SubscribeConnectionState(mavsdk.rpc.core.SubscribeConnectionStateRequest) returns (stream mavsdk.rpc.core.ConnectionStateResponse);
     */
    subscribeConnectionState(input: SubscribeConnectionStateRequest, options?: RpcOptions): ServerStreamingCall<SubscribeConnectionStateRequest, ConnectionStateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeConnectionStateRequest, ConnectionStateResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     *
     * Set timeout of MAVLink transfers.
     *
     * The default timeout used is generally (0.5 seconds) seconds.
     * If MAVSDK is used on the same host this timeout can be reduced, while
     * if MAVSDK has to communicate over links with high latency it might
     * need to be increased to prevent timeouts.
     *
     * @generated from protobuf rpc: SetMavlinkTimeout(mavsdk.rpc.core.SetMavlinkTimeoutRequest) returns (mavsdk.rpc.core.SetMavlinkTimeoutResponse);
     */
    setMavlinkTimeout(input: SetMavlinkTimeoutRequest, options?: RpcOptions): UnaryCall<SetMavlinkTimeoutRequest, SetMavlinkTimeoutResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetMavlinkTimeoutRequest, SetMavlinkTimeoutResponse>("unary", this._transport, method, opt, input);
    }
}
