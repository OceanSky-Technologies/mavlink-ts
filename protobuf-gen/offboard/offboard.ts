/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "offboard/offboard.proto" (package "mavsdk.rpc.offboard", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.offboard.StartRequest
 */
export interface StartRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.StartResponse
 */
export interface StartResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.StopRequest
 */
export interface StopRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.StopResponse
 */
export interface StopResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.IsActiveRequest
 */
export interface IsActiveRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.IsActiveResponse
 */
export interface IsActiveResponse {
    /**
     * @generated from protobuf field: bool is_active = 1;
     */
    isActive: boolean; // True if offboard is active
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetAttitudeRequest
 */
export interface SetAttitudeRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.Attitude attitude = 1;
     */
    attitude?: Attitude; // Attitude roll, pitch and yaw along with thrust
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetAttitudeResponse
 */
export interface SetAttitudeResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetActuatorControlRequest
 */
export interface SetActuatorControlRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.ActuatorControl actuator_control = 1;
     */
    actuatorControl?: ActuatorControl; // Actuator control values
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetActuatorControlResponse
 */
export interface SetActuatorControlResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetAttitudeRateRequest
 */
export interface SetAttitudeRateRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1;
     */
    attitudeRate?: AttitudeRate; // Attitude rate roll, pitch and yaw angular rate along with thrust
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetAttitudeRateResponse
 */
export interface SetAttitudeRateResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetPositionNedRequest
 */
export interface SetPositionNedRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
     */
    positionNedYaw?: PositionNedYaw; // Position and yaw
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetPositionNedResponse
 */
export interface SetPositionNedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetPositionGlobalRequest
 */
export interface SetPositionGlobalRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.PositionGlobalYaw position_global_yaw = 1;
     */
    positionGlobalYaw?: PositionGlobalYaw; // Position and yaw
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetPositionGlobalResponse
 */
export interface SetPositionGlobalResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetVelocityBodyRequest
 */
export interface SetVelocityBodyRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1;
     */
    velocityBodyYawspeed?: VelocityBodyYawspeed; // Velocity and yaw angular rate
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetVelocityBodyResponse
 */
export interface SetVelocityBodyResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetVelocityNedRequest
 */
export interface SetVelocityNedRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1;
     */
    velocityNedYaw?: VelocityNedYaw; // Velocity and yaw
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetVelocityNedResponse
 */
export interface SetVelocityNedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetPositionVelocityNedRequest
 */
export interface SetPositionVelocityNedRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
     */
    positionNedYaw?: PositionNedYaw; // Position and yaw
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2;
     */
    velocityNedYaw?: VelocityNedYaw; // Velocity and yaw
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest
 */
export interface SetPositionVelocityAccelerationNedRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
     */
    positionNedYaw?: PositionNedYaw; // Position and yaw
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2;
     */
    velocityNedYaw?: VelocityNedYaw; // Velocity and yaw
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.AccelerationNed acceleration_ned = 3;
     */
    accelerationNed?: AccelerationNed; // Acceleration
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetPositionVelocityNedResponse
 */
export interface SetPositionVelocityNedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse
 */
export interface SetPositionVelocityAccelerationNedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetAccelerationNedRequest
 */
export interface SetAccelerationNedRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.AccelerationNed acceleration_ned = 1;
     */
    accelerationNed?: AccelerationNed; // Acceleration
}
/**
 * @generated from protobuf message mavsdk.rpc.offboard.SetAccelerationNedResponse
 */
export interface SetAccelerationNedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
     */
    offboardResult?: OffboardResult;
}
/**
 * Type for attitude body angles in NED reference frame (roll, pitch, yaw and thrust)
 *
 * @generated from protobuf message mavsdk.rpc.offboard.Attitude
 */
export interface Attitude {
    /**
     * @generated from protobuf field: float roll_deg = 1;
     */
    rollDeg: number; // Roll angle (in degrees, positive is right side down)
    /**
     * @generated from protobuf field: float pitch_deg = 2;
     */
    pitchDeg: number; // Pitch angle (in degrees, positive is nose up)
    /**
     * @generated from protobuf field: float yaw_deg = 3;
     */
    yawDeg: number; // Yaw angle (in degrees, positive is move nose to the right)
    /**
     * @generated from protobuf field: float thrust_value = 4;
     */
    thrustValue: number; // Thrust (range: 0 to 1)
}
/**
 *
 * Eight controls that will be given to the group. Each control is a normalized
 * (-1..+1) command value, which will be mapped and scaled through the mixer.
 *
 * @generated from protobuf message mavsdk.rpc.offboard.ActuatorControlGroup
 */
export interface ActuatorControlGroup {
    /**
     * @generated from protobuf field: repeated float controls = 1;
     */
    controls: number[]; // Controls in the group
}
/**
 *
 * Type for actuator control.
 *
 * Control members should be normed to -1..+1 where 0 is neutral position.
 * Throttle for single rotation direction motors is 0..1, negative range for reverse direction.
 *
 * One group support eight controls.
 *
 * Up to 16 actuator controls can be set. To ignore an output group, set all it controls to NaN.
 * If one or more controls in group is not NaN, then all NaN controls will sent as zero.
 * The first 8 actuator controls internally map to control group 0, the latter 8 actuator
 * controls map to control group 1. Depending on what controls are set (instead of NaN) 1 or 2
 * MAVLink messages are actually sent.
 *
 * In PX4 v1.9.0 Only first four Control Groups are supported
 * (https://github.com/PX4/Firmware/blob/v1.9.0/src/modules/mavlink/mavlink_receiver.cpp#L980).
 *
 * @generated from protobuf message mavsdk.rpc.offboard.ActuatorControl
 */
export interface ActuatorControl {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.offboard.ActuatorControlGroup groups = 1;
     */
    groups: ActuatorControlGroup[]; // Control groups.
}
/**
 * Type for attitude rate commands in body coordinates (roll, pitch, yaw angular rate and thrust)
 *
 * @generated from protobuf message mavsdk.rpc.offboard.AttitudeRate
 */
export interface AttitudeRate {
    /**
     * @generated from protobuf field: float roll_deg_s = 1;
     */
    rollDegS: number; // Roll angular rate (in degrees/second, positive for clock-wise looking from front)
    /**
     * @generated from protobuf field: float pitch_deg_s = 2;
     */
    pitchDegS: number; // Pitch angular rate (in degrees/second, positive for head/front moving up)
    /**
     * @generated from protobuf field: float yaw_deg_s = 3;
     */
    yawDegS: number; // Yaw angular rate (in degrees/second, positive for clock-wise looking from above)
    /**
     * @generated from protobuf field: float thrust_value = 4;
     */
    thrustValue: number; // Thrust (range: 0 to 1)
}
/**
 * Type for position commands in NED (North East Down) coordinates and yaw.
 *
 * @generated from protobuf message mavsdk.rpc.offboard.PositionNedYaw
 */
export interface PositionNedYaw {
    /**
     * @generated from protobuf field: float north_m = 1;
     */
    northM: number; // Position North (in metres)
    /**
     * @generated from protobuf field: float east_m = 2;
     */
    eastM: number; // Position East (in metres)
    /**
     * @generated from protobuf field: float down_m = 3;
     */
    downM: number; // Position Down (in metres)
    /**
     * @generated from protobuf field: float yaw_deg = 4;
     */
    yawDeg: number; // Yaw in degrees (0 North, positive is clock-wise looking from above)
}
/**
 * Type for position commands in Global (Latitude, Longitude, Altitude) coordinates and yaw.
 *
 * @generated from protobuf message mavsdk.rpc.offboard.PositionGlobalYaw
 */
export interface PositionGlobalYaw {
    /**
     * @generated from protobuf field: double lat_deg = 1;
     */
    latDeg: number; // Latitude (in degrees)
    /**
     * @generated from protobuf field: double lon_deg = 2;
     */
    lonDeg: number; // Longitude (in degrees)
    /**
     * @generated from protobuf field: float alt_m = 3;
     */
    altM: number; // altitude (in metres)
    /**
     * @generated from protobuf field: float yaw_deg = 4;
     */
    yawDeg: number; // Yaw in degrees (0 North, positive is clock-wise looking from above)
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType altitude_type = 5;
     */
    altitudeType: PositionGlobalYaw_AltitudeType; // altitude type for this position
}
/**
 * Possible altitude options
 *
 * @generated from protobuf enum mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType
 */
export enum PositionGlobalYaw_AltitudeType {
    /**
     * Altitude relative to the Home position
     *
     * @generated from protobuf enum value: ALTITUDE_TYPE_REL_HOME = 0;
     */
    REL_HOME = 0,
    /**
     * Altitude above mean sea level (AMSL)
     *
     * @generated from protobuf enum value: ALTITUDE_TYPE_AMSL = 1;
     */
    AMSL = 1,
    /**
     * Altitude above ground level (AGL)
     *
     * @generated from protobuf enum value: ALTITUDE_TYPE_AGL = 2;
     */
    AGL = 2
}
/**
 * Type for velocity commands in body coordinates.
 *
 * @generated from protobuf message mavsdk.rpc.offboard.VelocityBodyYawspeed
 */
export interface VelocityBodyYawspeed {
    /**
     * @generated from protobuf field: float forward_m_s = 1;
     */
    forwardMS: number; // Velocity forward (in metres/second)
    /**
     * @generated from protobuf field: float right_m_s = 2;
     */
    rightMS: number; // Velocity right (in metres/second)
    /**
     * @generated from protobuf field: float down_m_s = 3;
     */
    downMS: number; // Velocity down (in metres/second)
    /**
     * @generated from protobuf field: float yawspeed_deg_s = 4;
     */
    yawspeedDegS: number; // Yaw angular rate (in degrees/second, positive for clock-wise looking from above)
}
/**
 * Type for velocity commands in NED (North East Down) coordinates and yaw.
 *
 * @generated from protobuf message mavsdk.rpc.offboard.VelocityNedYaw
 */
export interface VelocityNedYaw {
    /**
     * @generated from protobuf field: float north_m_s = 1;
     */
    northMS: number; // Velocity North (in metres/second)
    /**
     * @generated from protobuf field: float east_m_s = 2;
     */
    eastMS: number; // Velocity East (in metres/second)
    /**
     * @generated from protobuf field: float down_m_s = 3;
     */
    downMS: number; // Velocity Down (in metres/second)
    /**
     * @generated from protobuf field: float yaw_deg = 4;
     */
    yawDeg: number; // Yaw in degrees (0 North, positive is clock-wise looking from above)
}
/**
 * Type for acceleration commands in NED (North East Down) coordinates.
 *
 * @generated from protobuf message mavsdk.rpc.offboard.AccelerationNed
 */
export interface AccelerationNed {
    /**
     * @generated from protobuf field: float north_m_s2 = 1;
     */
    northMS2: number; // Acceleration North (in metres/second^2)
    /**
     * @generated from protobuf field: float east_m_s2 = 2;
     */
    eastMS2: number; // Acceleration East (in metres/second^2)
    /**
     * @generated from protobuf field: float down_m_s2 = 3;
     */
    downMS2: number; // Acceleration Down (in metres/second^2)
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.offboard.OffboardResult
 */
export interface OffboardResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.offboard.OffboardResult.Result result = 1;
     */
    result: OffboardResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for offboard requests
 *
 * @generated from protobuf enum mavsdk.rpc.offboard.OffboardResult.Result
 */
export enum OffboardResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 2;
     */
    NO_SYSTEM = 2,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 3;
     */
    CONNECTION_ERROR = 3,
    /**
     * Vehicle is busy
     *
     * @generated from protobuf enum value: RESULT_BUSY = 4;
     */
    BUSY = 4,
    /**
     * Command denied
     *
     * @generated from protobuf enum value: RESULT_COMMAND_DENIED = 5;
     */
    COMMAND_DENIED = 5,
    /**
     * Request timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 6;
     */
    TIMEOUT = 6,
    /**
     * Cannot start without setpoint set
     *
     * @generated from protobuf enum value: RESULT_NO_SETPOINT_SET = 7;
     */
    NO_SETPOINT_SET = 7,
    /**
     * Request failed
     *
     * @generated from protobuf enum value: RESULT_FAILED = 8;
     */
    FAILED = 8
}
// @generated message type with reflection information, may provide speed optimized methods
class StartRequest$Type extends MessageType<StartRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.StartRequest", []);
    }
    create(value?: PartialMessage<StartRequest>): StartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRequest): StartRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.StartRequest
 */
export const StartRequest = new StartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartResponse$Type extends MessageType<StartResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.StartResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<StartResponse>): StartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartResponse): StartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.StartResponse
 */
export const StartResponse = new StartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopRequest$Type extends MessageType<StopRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.StopRequest", []);
    }
    create(value?: PartialMessage<StopRequest>): StopRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopRequest): StopRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.StopRequest
 */
export const StopRequest = new StopRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopResponse$Type extends MessageType<StopResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.StopResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<StopResponse>): StopResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopResponse): StopResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.StopResponse
 */
export const StopResponse = new StopResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsActiveRequest$Type extends MessageType<IsActiveRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.IsActiveRequest", []);
    }
    create(value?: PartialMessage<IsActiveRequest>): IsActiveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IsActiveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsActiveRequest): IsActiveRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IsActiveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.IsActiveRequest
 */
export const IsActiveRequest = new IsActiveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsActiveResponse$Type extends MessageType<IsActiveResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.IsActiveResponse", [
            { no: 1, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IsActiveResponse>): IsActiveResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<IsActiveResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsActiveResponse): IsActiveResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_active */ 1:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsActiveResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_active = 1; */
        if (message.isActive !== false)
            writer.tag(1, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.IsActiveResponse
 */
export const IsActiveResponse = new IsActiveResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAttitudeRequest$Type extends MessageType<SetAttitudeRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetAttitudeRequest", [
            { no: 1, name: "attitude", kind: "message", T: () => Attitude }
        ]);
    }
    create(value?: PartialMessage<SetAttitudeRequest>): SetAttitudeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetAttitudeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetAttitudeRequest): SetAttitudeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.Attitude attitude */ 1:
                    message.attitude = Attitude.internalBinaryRead(reader, reader.uint32(), options, message.attitude);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetAttitudeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.Attitude attitude = 1; */
        if (message.attitude)
            Attitude.internalBinaryWrite(message.attitude, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetAttitudeRequest
 */
export const SetAttitudeRequest = new SetAttitudeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAttitudeResponse$Type extends MessageType<SetAttitudeResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetAttitudeResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetAttitudeResponse>): SetAttitudeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetAttitudeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetAttitudeResponse): SetAttitudeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetAttitudeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetAttitudeResponse
 */
export const SetAttitudeResponse = new SetAttitudeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetActuatorControlRequest$Type extends MessageType<SetActuatorControlRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetActuatorControlRequest", [
            { no: 1, name: "actuator_control", kind: "message", T: () => ActuatorControl }
        ]);
    }
    create(value?: PartialMessage<SetActuatorControlRequest>): SetActuatorControlRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetActuatorControlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetActuatorControlRequest): SetActuatorControlRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.ActuatorControl actuator_control */ 1:
                    message.actuatorControl = ActuatorControl.internalBinaryRead(reader, reader.uint32(), options, message.actuatorControl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetActuatorControlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.ActuatorControl actuator_control = 1; */
        if (message.actuatorControl)
            ActuatorControl.internalBinaryWrite(message.actuatorControl, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetActuatorControlRequest
 */
export const SetActuatorControlRequest = new SetActuatorControlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetActuatorControlResponse$Type extends MessageType<SetActuatorControlResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetActuatorControlResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetActuatorControlResponse>): SetActuatorControlResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetActuatorControlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetActuatorControlResponse): SetActuatorControlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetActuatorControlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetActuatorControlResponse
 */
export const SetActuatorControlResponse = new SetActuatorControlResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAttitudeRateRequest$Type extends MessageType<SetAttitudeRateRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetAttitudeRateRequest", [
            { no: 1, name: "attitude_rate", kind: "message", T: () => AttitudeRate }
        ]);
    }
    create(value?: PartialMessage<SetAttitudeRateRequest>): SetAttitudeRateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetAttitudeRateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetAttitudeRateRequest): SetAttitudeRateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.AttitudeRate attitude_rate */ 1:
                    message.attitudeRate = AttitudeRate.internalBinaryRead(reader, reader.uint32(), options, message.attitudeRate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetAttitudeRateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1; */
        if (message.attitudeRate)
            AttitudeRate.internalBinaryWrite(message.attitudeRate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetAttitudeRateRequest
 */
export const SetAttitudeRateRequest = new SetAttitudeRateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAttitudeRateResponse$Type extends MessageType<SetAttitudeRateResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetAttitudeRateResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetAttitudeRateResponse>): SetAttitudeRateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetAttitudeRateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetAttitudeRateResponse): SetAttitudeRateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetAttitudeRateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetAttitudeRateResponse
 */
export const SetAttitudeRateResponse = new SetAttitudeRateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPositionNedRequest$Type extends MessageType<SetPositionNedRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetPositionNedRequest", [
            { no: 1, name: "position_ned_yaw", kind: "message", T: () => PositionNedYaw }
        ]);
    }
    create(value?: PartialMessage<SetPositionNedRequest>): SetPositionNedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPositionNedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPositionNedRequest): SetPositionNedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw */ 1:
                    message.positionNedYaw = PositionNedYaw.internalBinaryRead(reader, reader.uint32(), options, message.positionNedYaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPositionNedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1; */
        if (message.positionNedYaw)
            PositionNedYaw.internalBinaryWrite(message.positionNedYaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetPositionNedRequest
 */
export const SetPositionNedRequest = new SetPositionNedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPositionNedResponse$Type extends MessageType<SetPositionNedResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetPositionNedResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetPositionNedResponse>): SetPositionNedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPositionNedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPositionNedResponse): SetPositionNedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPositionNedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetPositionNedResponse
 */
export const SetPositionNedResponse = new SetPositionNedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPositionGlobalRequest$Type extends MessageType<SetPositionGlobalRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetPositionGlobalRequest", [
            { no: 1, name: "position_global_yaw", kind: "message", T: () => PositionGlobalYaw }
        ]);
    }
    create(value?: PartialMessage<SetPositionGlobalRequest>): SetPositionGlobalRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPositionGlobalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPositionGlobalRequest): SetPositionGlobalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.PositionGlobalYaw position_global_yaw */ 1:
                    message.positionGlobalYaw = PositionGlobalYaw.internalBinaryRead(reader, reader.uint32(), options, message.positionGlobalYaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPositionGlobalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.PositionGlobalYaw position_global_yaw = 1; */
        if (message.positionGlobalYaw)
            PositionGlobalYaw.internalBinaryWrite(message.positionGlobalYaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetPositionGlobalRequest
 */
export const SetPositionGlobalRequest = new SetPositionGlobalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPositionGlobalResponse$Type extends MessageType<SetPositionGlobalResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetPositionGlobalResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetPositionGlobalResponse>): SetPositionGlobalResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPositionGlobalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPositionGlobalResponse): SetPositionGlobalResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPositionGlobalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetPositionGlobalResponse
 */
export const SetPositionGlobalResponse = new SetPositionGlobalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetVelocityBodyRequest$Type extends MessageType<SetVelocityBodyRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetVelocityBodyRequest", [
            { no: 1, name: "velocity_body_yawspeed", kind: "message", T: () => VelocityBodyYawspeed }
        ]);
    }
    create(value?: PartialMessage<SetVelocityBodyRequest>): SetVelocityBodyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetVelocityBodyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetVelocityBodyRequest): SetVelocityBodyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed */ 1:
                    message.velocityBodyYawspeed = VelocityBodyYawspeed.internalBinaryRead(reader, reader.uint32(), options, message.velocityBodyYawspeed);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetVelocityBodyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1; */
        if (message.velocityBodyYawspeed)
            VelocityBodyYawspeed.internalBinaryWrite(message.velocityBodyYawspeed, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetVelocityBodyRequest
 */
export const SetVelocityBodyRequest = new SetVelocityBodyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetVelocityBodyResponse$Type extends MessageType<SetVelocityBodyResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetVelocityBodyResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetVelocityBodyResponse>): SetVelocityBodyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetVelocityBodyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetVelocityBodyResponse): SetVelocityBodyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetVelocityBodyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetVelocityBodyResponse
 */
export const SetVelocityBodyResponse = new SetVelocityBodyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetVelocityNedRequest$Type extends MessageType<SetVelocityNedRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetVelocityNedRequest", [
            { no: 1, name: "velocity_ned_yaw", kind: "message", T: () => VelocityNedYaw }
        ]);
    }
    create(value?: PartialMessage<SetVelocityNedRequest>): SetVelocityNedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetVelocityNedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetVelocityNedRequest): SetVelocityNedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw */ 1:
                    message.velocityNedYaw = VelocityNedYaw.internalBinaryRead(reader, reader.uint32(), options, message.velocityNedYaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetVelocityNedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1; */
        if (message.velocityNedYaw)
            VelocityNedYaw.internalBinaryWrite(message.velocityNedYaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetVelocityNedRequest
 */
export const SetVelocityNedRequest = new SetVelocityNedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetVelocityNedResponse$Type extends MessageType<SetVelocityNedResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetVelocityNedResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetVelocityNedResponse>): SetVelocityNedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetVelocityNedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetVelocityNedResponse): SetVelocityNedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetVelocityNedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetVelocityNedResponse
 */
export const SetVelocityNedResponse = new SetVelocityNedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPositionVelocityNedRequest$Type extends MessageType<SetPositionVelocityNedRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetPositionVelocityNedRequest", [
            { no: 1, name: "position_ned_yaw", kind: "message", T: () => PositionNedYaw },
            { no: 2, name: "velocity_ned_yaw", kind: "message", T: () => VelocityNedYaw }
        ]);
    }
    create(value?: PartialMessage<SetPositionVelocityNedRequest>): SetPositionVelocityNedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPositionVelocityNedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPositionVelocityNedRequest): SetPositionVelocityNedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw */ 1:
                    message.positionNedYaw = PositionNedYaw.internalBinaryRead(reader, reader.uint32(), options, message.positionNedYaw);
                    break;
                case /* mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw */ 2:
                    message.velocityNedYaw = VelocityNedYaw.internalBinaryRead(reader, reader.uint32(), options, message.velocityNedYaw);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPositionVelocityNedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1; */
        if (message.positionNedYaw)
            PositionNedYaw.internalBinaryWrite(message.positionNedYaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2; */
        if (message.velocityNedYaw)
            VelocityNedYaw.internalBinaryWrite(message.velocityNedYaw, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetPositionVelocityNedRequest
 */
export const SetPositionVelocityNedRequest = new SetPositionVelocityNedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPositionVelocityAccelerationNedRequest$Type extends MessageType<SetPositionVelocityAccelerationNedRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest", [
            { no: 1, name: "position_ned_yaw", kind: "message", T: () => PositionNedYaw },
            { no: 2, name: "velocity_ned_yaw", kind: "message", T: () => VelocityNedYaw },
            { no: 3, name: "acceleration_ned", kind: "message", T: () => AccelerationNed }
        ]);
    }
    create(value?: PartialMessage<SetPositionVelocityAccelerationNedRequest>): SetPositionVelocityAccelerationNedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPositionVelocityAccelerationNedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPositionVelocityAccelerationNedRequest): SetPositionVelocityAccelerationNedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw */ 1:
                    message.positionNedYaw = PositionNedYaw.internalBinaryRead(reader, reader.uint32(), options, message.positionNedYaw);
                    break;
                case /* mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw */ 2:
                    message.velocityNedYaw = VelocityNedYaw.internalBinaryRead(reader, reader.uint32(), options, message.velocityNedYaw);
                    break;
                case /* mavsdk.rpc.offboard.AccelerationNed acceleration_ned */ 3:
                    message.accelerationNed = AccelerationNed.internalBinaryRead(reader, reader.uint32(), options, message.accelerationNed);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPositionVelocityAccelerationNedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1; */
        if (message.positionNedYaw)
            PositionNedYaw.internalBinaryWrite(message.positionNedYaw, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2; */
        if (message.velocityNedYaw)
            VelocityNedYaw.internalBinaryWrite(message.velocityNedYaw, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.offboard.AccelerationNed acceleration_ned = 3; */
        if (message.accelerationNed)
            AccelerationNed.internalBinaryWrite(message.accelerationNed, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest
 */
export const SetPositionVelocityAccelerationNedRequest = new SetPositionVelocityAccelerationNedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPositionVelocityNedResponse$Type extends MessageType<SetPositionVelocityNedResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetPositionVelocityNedResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetPositionVelocityNedResponse>): SetPositionVelocityNedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPositionVelocityNedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPositionVelocityNedResponse): SetPositionVelocityNedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPositionVelocityNedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetPositionVelocityNedResponse
 */
export const SetPositionVelocityNedResponse = new SetPositionVelocityNedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPositionVelocityAccelerationNedResponse$Type extends MessageType<SetPositionVelocityAccelerationNedResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetPositionVelocityAccelerationNedResponse>): SetPositionVelocityAccelerationNedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPositionVelocityAccelerationNedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPositionVelocityAccelerationNedResponse): SetPositionVelocityAccelerationNedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPositionVelocityAccelerationNedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse
 */
export const SetPositionVelocityAccelerationNedResponse = new SetPositionVelocityAccelerationNedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAccelerationNedRequest$Type extends MessageType<SetAccelerationNedRequest> {
    constructor() {
        super("mavsdk.rpc.offboard.SetAccelerationNedRequest", [
            { no: 1, name: "acceleration_ned", kind: "message", T: () => AccelerationNed }
        ]);
    }
    create(value?: PartialMessage<SetAccelerationNedRequest>): SetAccelerationNedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetAccelerationNedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetAccelerationNedRequest): SetAccelerationNedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.AccelerationNed acceleration_ned */ 1:
                    message.accelerationNed = AccelerationNed.internalBinaryRead(reader, reader.uint32(), options, message.accelerationNed);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetAccelerationNedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.AccelerationNed acceleration_ned = 1; */
        if (message.accelerationNed)
            AccelerationNed.internalBinaryWrite(message.accelerationNed, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetAccelerationNedRequest
 */
export const SetAccelerationNedRequest = new SetAccelerationNedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAccelerationNedResponse$Type extends MessageType<SetAccelerationNedResponse> {
    constructor() {
        super("mavsdk.rpc.offboard.SetAccelerationNedResponse", [
            { no: 1, name: "offboard_result", kind: "message", T: () => OffboardResult }
        ]);
    }
    create(value?: PartialMessage<SetAccelerationNedResponse>): SetAccelerationNedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetAccelerationNedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetAccelerationNedResponse): SetAccelerationNedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult offboard_result */ 1:
                    message.offboardResult = OffboardResult.internalBinaryRead(reader, reader.uint32(), options, message.offboardResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetAccelerationNedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult offboard_result = 1; */
        if (message.offboardResult)
            OffboardResult.internalBinaryWrite(message.offboardResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.SetAccelerationNedResponse
 */
export const SetAccelerationNedResponse = new SetAccelerationNedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Attitude$Type extends MessageType<Attitude> {
    constructor() {
        super("mavsdk.rpc.offboard.Attitude", [
            { no: 1, name: "roll_deg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "pitch_deg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "yaw_deg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "thrust_value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Attitude>): Attitude {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rollDeg = 0;
        message.pitchDeg = 0;
        message.yawDeg = 0;
        message.thrustValue = 0;
        if (value !== undefined)
            reflectionMergePartial<Attitude>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Attitude): Attitude {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float roll_deg */ 1:
                    message.rollDeg = reader.float();
                    break;
                case /* float pitch_deg */ 2:
                    message.pitchDeg = reader.float();
                    break;
                case /* float yaw_deg */ 3:
                    message.yawDeg = reader.float();
                    break;
                case /* float thrust_value */ 4:
                    message.thrustValue = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Attitude, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float roll_deg = 1; */
        if (message.rollDeg !== 0)
            writer.tag(1, WireType.Bit32).float(message.rollDeg);
        /* float pitch_deg = 2; */
        if (message.pitchDeg !== 0)
            writer.tag(2, WireType.Bit32).float(message.pitchDeg);
        /* float yaw_deg = 3; */
        if (message.yawDeg !== 0)
            writer.tag(3, WireType.Bit32).float(message.yawDeg);
        /* float thrust_value = 4; */
        if (message.thrustValue !== 0)
            writer.tag(4, WireType.Bit32).float(message.thrustValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.Attitude
 */
export const Attitude = new Attitude$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActuatorControlGroup$Type extends MessageType<ActuatorControlGroup> {
    constructor() {
        super("mavsdk.rpc.offboard.ActuatorControlGroup", [
            { no: 1, name: "controls", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<ActuatorControlGroup>): ActuatorControlGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controls = [];
        if (value !== undefined)
            reflectionMergePartial<ActuatorControlGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActuatorControlGroup): ActuatorControlGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated float controls */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.controls.push(reader.float());
                    else
                        message.controls.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActuatorControlGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated float controls = 1; */
        if (message.controls.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.controls.length; i++)
                writer.float(message.controls[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.ActuatorControlGroup
 */
export const ActuatorControlGroup = new ActuatorControlGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActuatorControl$Type extends MessageType<ActuatorControl> {
    constructor() {
        super("mavsdk.rpc.offboard.ActuatorControl", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ActuatorControlGroup }
        ]);
    }
    create(value?: PartialMessage<ActuatorControl>): ActuatorControl {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groups = [];
        if (value !== undefined)
            reflectionMergePartial<ActuatorControl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActuatorControl): ActuatorControl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.offboard.ActuatorControlGroup groups */ 1:
                    message.groups.push(ActuatorControlGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActuatorControl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.offboard.ActuatorControlGroup groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            ActuatorControlGroup.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.ActuatorControl
 */
export const ActuatorControl = new ActuatorControl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttitudeRate$Type extends MessageType<AttitudeRate> {
    constructor() {
        super("mavsdk.rpc.offboard.AttitudeRate", [
            { no: 1, name: "roll_deg_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "pitch_deg_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "yaw_deg_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "thrust_value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AttitudeRate>): AttitudeRate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rollDegS = 0;
        message.pitchDegS = 0;
        message.yawDegS = 0;
        message.thrustValue = 0;
        if (value !== undefined)
            reflectionMergePartial<AttitudeRate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttitudeRate): AttitudeRate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float roll_deg_s */ 1:
                    message.rollDegS = reader.float();
                    break;
                case /* float pitch_deg_s */ 2:
                    message.pitchDegS = reader.float();
                    break;
                case /* float yaw_deg_s */ 3:
                    message.yawDegS = reader.float();
                    break;
                case /* float thrust_value */ 4:
                    message.thrustValue = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttitudeRate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float roll_deg_s = 1; */
        if (message.rollDegS !== 0)
            writer.tag(1, WireType.Bit32).float(message.rollDegS);
        /* float pitch_deg_s = 2; */
        if (message.pitchDegS !== 0)
            writer.tag(2, WireType.Bit32).float(message.pitchDegS);
        /* float yaw_deg_s = 3; */
        if (message.yawDegS !== 0)
            writer.tag(3, WireType.Bit32).float(message.yawDegS);
        /* float thrust_value = 4; */
        if (message.thrustValue !== 0)
            writer.tag(4, WireType.Bit32).float(message.thrustValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.AttitudeRate
 */
export const AttitudeRate = new AttitudeRate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PositionNedYaw$Type extends MessageType<PositionNedYaw> {
    constructor() {
        super("mavsdk.rpc.offboard.PositionNedYaw", [
            { no: 1, name: "north_m", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "east_m", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "down_m", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "yaw_deg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PositionNedYaw>): PositionNedYaw {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.northM = 0;
        message.eastM = 0;
        message.downM = 0;
        message.yawDeg = 0;
        if (value !== undefined)
            reflectionMergePartial<PositionNedYaw>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PositionNedYaw): PositionNedYaw {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float north_m */ 1:
                    message.northM = reader.float();
                    break;
                case /* float east_m */ 2:
                    message.eastM = reader.float();
                    break;
                case /* float down_m */ 3:
                    message.downM = reader.float();
                    break;
                case /* float yaw_deg */ 4:
                    message.yawDeg = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PositionNedYaw, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float north_m = 1; */
        if (message.northM !== 0)
            writer.tag(1, WireType.Bit32).float(message.northM);
        /* float east_m = 2; */
        if (message.eastM !== 0)
            writer.tag(2, WireType.Bit32).float(message.eastM);
        /* float down_m = 3; */
        if (message.downM !== 0)
            writer.tag(3, WireType.Bit32).float(message.downM);
        /* float yaw_deg = 4; */
        if (message.yawDeg !== 0)
            writer.tag(4, WireType.Bit32).float(message.yawDeg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.PositionNedYaw
 */
export const PositionNedYaw = new PositionNedYaw$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PositionGlobalYaw$Type extends MessageType<PositionGlobalYaw> {
    constructor() {
        super("mavsdk.rpc.offboard.PositionGlobalYaw", [
            { no: 1, name: "lat_deg", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "lon_deg", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "alt_m", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "yaw_deg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "altitude_type", kind: "enum", T: () => ["mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType", PositionGlobalYaw_AltitudeType, "ALTITUDE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<PositionGlobalYaw>): PositionGlobalYaw {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.latDeg = 0;
        message.lonDeg = 0;
        message.altM = 0;
        message.yawDeg = 0;
        message.altitudeType = 0;
        if (value !== undefined)
            reflectionMergePartial<PositionGlobalYaw>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PositionGlobalYaw): PositionGlobalYaw {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double lat_deg */ 1:
                    message.latDeg = reader.double();
                    break;
                case /* double lon_deg */ 2:
                    message.lonDeg = reader.double();
                    break;
                case /* float alt_m */ 3:
                    message.altM = reader.float();
                    break;
                case /* float yaw_deg */ 4:
                    message.yawDeg = reader.float();
                    break;
                case /* mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType altitude_type */ 5:
                    message.altitudeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PositionGlobalYaw, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double lat_deg = 1; */
        if (message.latDeg !== 0)
            writer.tag(1, WireType.Bit64).double(message.latDeg);
        /* double lon_deg = 2; */
        if (message.lonDeg !== 0)
            writer.tag(2, WireType.Bit64).double(message.lonDeg);
        /* float alt_m = 3; */
        if (message.altM !== 0)
            writer.tag(3, WireType.Bit32).float(message.altM);
        /* float yaw_deg = 4; */
        if (message.yawDeg !== 0)
            writer.tag(4, WireType.Bit32).float(message.yawDeg);
        /* mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType altitude_type = 5; */
        if (message.altitudeType !== 0)
            writer.tag(5, WireType.Varint).int32(message.altitudeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.PositionGlobalYaw
 */
export const PositionGlobalYaw = new PositionGlobalYaw$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VelocityBodyYawspeed$Type extends MessageType<VelocityBodyYawspeed> {
    constructor() {
        super("mavsdk.rpc.offboard.VelocityBodyYawspeed", [
            { no: 1, name: "forward_m_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "right_m_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "down_m_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "yawspeed_deg_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<VelocityBodyYawspeed>): VelocityBodyYawspeed {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.forwardMS = 0;
        message.rightMS = 0;
        message.downMS = 0;
        message.yawspeedDegS = 0;
        if (value !== undefined)
            reflectionMergePartial<VelocityBodyYawspeed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VelocityBodyYawspeed): VelocityBodyYawspeed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float forward_m_s */ 1:
                    message.forwardMS = reader.float();
                    break;
                case /* float right_m_s */ 2:
                    message.rightMS = reader.float();
                    break;
                case /* float down_m_s */ 3:
                    message.downMS = reader.float();
                    break;
                case /* float yawspeed_deg_s */ 4:
                    message.yawspeedDegS = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VelocityBodyYawspeed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float forward_m_s = 1; */
        if (message.forwardMS !== 0)
            writer.tag(1, WireType.Bit32).float(message.forwardMS);
        /* float right_m_s = 2; */
        if (message.rightMS !== 0)
            writer.tag(2, WireType.Bit32).float(message.rightMS);
        /* float down_m_s = 3; */
        if (message.downMS !== 0)
            writer.tag(3, WireType.Bit32).float(message.downMS);
        /* float yawspeed_deg_s = 4; */
        if (message.yawspeedDegS !== 0)
            writer.tag(4, WireType.Bit32).float(message.yawspeedDegS);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.VelocityBodyYawspeed
 */
export const VelocityBodyYawspeed = new VelocityBodyYawspeed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VelocityNedYaw$Type extends MessageType<VelocityNedYaw> {
    constructor() {
        super("mavsdk.rpc.offboard.VelocityNedYaw", [
            { no: 1, name: "north_m_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "east_m_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "down_m_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "yaw_deg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<VelocityNedYaw>): VelocityNedYaw {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.northMS = 0;
        message.eastMS = 0;
        message.downMS = 0;
        message.yawDeg = 0;
        if (value !== undefined)
            reflectionMergePartial<VelocityNedYaw>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VelocityNedYaw): VelocityNedYaw {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float north_m_s */ 1:
                    message.northMS = reader.float();
                    break;
                case /* float east_m_s */ 2:
                    message.eastMS = reader.float();
                    break;
                case /* float down_m_s */ 3:
                    message.downMS = reader.float();
                    break;
                case /* float yaw_deg */ 4:
                    message.yawDeg = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VelocityNedYaw, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float north_m_s = 1; */
        if (message.northMS !== 0)
            writer.tag(1, WireType.Bit32).float(message.northMS);
        /* float east_m_s = 2; */
        if (message.eastMS !== 0)
            writer.tag(2, WireType.Bit32).float(message.eastMS);
        /* float down_m_s = 3; */
        if (message.downMS !== 0)
            writer.tag(3, WireType.Bit32).float(message.downMS);
        /* float yaw_deg = 4; */
        if (message.yawDeg !== 0)
            writer.tag(4, WireType.Bit32).float(message.yawDeg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.VelocityNedYaw
 */
export const VelocityNedYaw = new VelocityNedYaw$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccelerationNed$Type extends MessageType<AccelerationNed> {
    constructor() {
        super("mavsdk.rpc.offboard.AccelerationNed", [
            { no: 1, name: "north_m_s2", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "east_m_s2", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "down_m_s2", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AccelerationNed>): AccelerationNed {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.northMS2 = 0;
        message.eastMS2 = 0;
        message.downMS2 = 0;
        if (value !== undefined)
            reflectionMergePartial<AccelerationNed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccelerationNed): AccelerationNed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float north_m_s2 */ 1:
                    message.northMS2 = reader.float();
                    break;
                case /* float east_m_s2 */ 2:
                    message.eastMS2 = reader.float();
                    break;
                case /* float down_m_s2 */ 3:
                    message.downMS2 = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccelerationNed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float north_m_s2 = 1; */
        if (message.northMS2 !== 0)
            writer.tag(1, WireType.Bit32).float(message.northMS2);
        /* float east_m_s2 = 2; */
        if (message.eastMS2 !== 0)
            writer.tag(2, WireType.Bit32).float(message.eastMS2);
        /* float down_m_s2 = 3; */
        if (message.downMS2 !== 0)
            writer.tag(3, WireType.Bit32).float(message.downMS2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.AccelerationNed
 */
export const AccelerationNed = new AccelerationNed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OffboardResult$Type extends MessageType<OffboardResult> {
    constructor() {
        super("mavsdk.rpc.offboard.OffboardResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.offboard.OffboardResult.Result", OffboardResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OffboardResult>): OffboardResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<OffboardResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OffboardResult): OffboardResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.offboard.OffboardResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OffboardResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.offboard.OffboardResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.offboard.OffboardResult
 */
export const OffboardResult = new OffboardResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.offboard.OffboardService
 */
export const OffboardService = new ServiceType("mavsdk.rpc.offboard.OffboardService", [
    { name: "Start", options: {}, I: StartRequest, O: StartResponse },
    { name: "Stop", options: {}, I: StopRequest, O: StopResponse },
    { name: "IsActive", options: { "mavsdk.options.async_type": "SYNC" }, I: IsActiveRequest, O: IsActiveResponse },
    { name: "SetAttitude", options: { "mavsdk.options.async_type": "SYNC" }, I: SetAttitudeRequest, O: SetAttitudeResponse },
    { name: "SetActuatorControl", options: { "mavsdk.options.async_type": "SYNC" }, I: SetActuatorControlRequest, O: SetActuatorControlResponse },
    { name: "SetAttitudeRate", options: { "mavsdk.options.async_type": "SYNC" }, I: SetAttitudeRateRequest, O: SetAttitudeRateResponse },
    { name: "SetPositionNed", options: { "mavsdk.options.async_type": "SYNC" }, I: SetPositionNedRequest, O: SetPositionNedResponse },
    { name: "SetPositionGlobal", options: { "mavsdk.options.async_type": "SYNC" }, I: SetPositionGlobalRequest, O: SetPositionGlobalResponse },
    { name: "SetVelocityBody", options: { "mavsdk.options.async_type": "SYNC" }, I: SetVelocityBodyRequest, O: SetVelocityBodyResponse },
    { name: "SetVelocityNed", options: { "mavsdk.options.async_type": "SYNC" }, I: SetVelocityNedRequest, O: SetVelocityNedResponse },
    { name: "SetPositionVelocityNed", options: { "mavsdk.options.async_type": "SYNC" }, I: SetPositionVelocityNedRequest, O: SetPositionVelocityNedResponse },
    { name: "SetPositionVelocityAccelerationNed", options: { "mavsdk.options.async_type": "SYNC" }, I: SetPositionVelocityAccelerationNedRequest, O: SetPositionVelocityAccelerationNedResponse },
    { name: "SetAccelerationNed", options: { "mavsdk.options.async_type": "SYNC" }, I: SetAccelerationNedRequest, O: SetAccelerationNedResponse }
]);
