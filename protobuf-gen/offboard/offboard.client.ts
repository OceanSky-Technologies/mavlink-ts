/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "offboard/offboard.proto" (package "mavsdk.rpc.offboard", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { OffboardService } from "./offboard";
import type { SetAccelerationNedResponse } from "./offboard";
import type { SetAccelerationNedRequest } from "./offboard";
import type { SetPositionVelocityAccelerationNedResponse } from "./offboard";
import type { SetPositionVelocityAccelerationNedRequest } from "./offboard";
import type { SetPositionVelocityNedResponse } from "./offboard";
import type { SetPositionVelocityNedRequest } from "./offboard";
import type { SetVelocityNedResponse } from "./offboard";
import type { SetVelocityNedRequest } from "./offboard";
import type { SetVelocityBodyResponse } from "./offboard";
import type { SetVelocityBodyRequest } from "./offboard";
import type { SetPositionGlobalResponse } from "./offboard";
import type { SetPositionGlobalRequest } from "./offboard";
import type { SetPositionNedResponse } from "./offboard";
import type { SetPositionNedRequest } from "./offboard";
import type { SetAttitudeRateResponse } from "./offboard";
import type { SetAttitudeRateRequest } from "./offboard";
import type { SetActuatorControlResponse } from "./offboard";
import type { SetActuatorControlRequest } from "./offboard";
import type { SetAttitudeResponse } from "./offboard";
import type { SetAttitudeRequest } from "./offboard";
import type { IsActiveResponse } from "./offboard";
import type { IsActiveRequest } from "./offboard";
import type { StopResponse } from "./offboard";
import type { StopRequest } from "./offboard";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartResponse } from "./offboard";
import type { StartRequest } from "./offboard";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * *
 * Control a drone with position, velocity, attitude or motor commands.
 *
 * The module is called offboard because the commands can be sent from external sources
 * as opposed to onboard control right inside the autopilot "board".
 *
 * Client code must specify a setpoint before starting offboard mode.
 * Mavsdk automatically sends setpoints at 20Hz (PX4 Offboard mode requires that setpoints
 * are minimally sent at 2Hz).
 *
 * @generated from protobuf service mavsdk.rpc.offboard.OffboardService
 */
export interface IOffboardServiceClient {
    /**
     *
     * Start offboard control.
     *
     * @generated from protobuf rpc: Start(mavsdk.rpc.offboard.StartRequest) returns (mavsdk.rpc.offboard.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse>;
    /**
     *
     * Stop offboard control.
     *
     * The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
     *
     * @generated from protobuf rpc: Stop(mavsdk.rpc.offboard.StopRequest) returns (mavsdk.rpc.offboard.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
    /**
     *
     * Check if offboard control is active.
     *
     * True means that the vehicle is in offboard mode and we are actively sending
     * setpoints.
     *
     * @generated from protobuf rpc: IsActive(mavsdk.rpc.offboard.IsActiveRequest) returns (mavsdk.rpc.offboard.IsActiveResponse);
     */
    isActive(input: IsActiveRequest, options?: RpcOptions): UnaryCall<IsActiveRequest, IsActiveResponse>;
    /**
     *
     * Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
     *
     * @generated from protobuf rpc: SetAttitude(mavsdk.rpc.offboard.SetAttitudeRequest) returns (mavsdk.rpc.offboard.SetAttitudeResponse);
     */
    setAttitude(input: SetAttitudeRequest, options?: RpcOptions): UnaryCall<SetAttitudeRequest, SetAttitudeResponse>;
    /**
     *
     * Set direct actuator control values to groups #0 and #1.
     *
     * First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
     * actuator_control.num_controls more than 8).
     *
     * @generated from protobuf rpc: SetActuatorControl(mavsdk.rpc.offboard.SetActuatorControlRequest) returns (mavsdk.rpc.offboard.SetActuatorControlResponse);
     */
    setActuatorControl(input: SetActuatorControlRequest, options?: RpcOptions): UnaryCall<SetActuatorControlRequest, SetActuatorControlResponse>;
    /**
     *
     * Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
     *
     * @generated from protobuf rpc: SetAttitudeRate(mavsdk.rpc.offboard.SetAttitudeRateRequest) returns (mavsdk.rpc.offboard.SetAttitudeRateResponse);
     */
    setAttitudeRate(input: SetAttitudeRateRequest, options?: RpcOptions): UnaryCall<SetAttitudeRateRequest, SetAttitudeRateResponse>;
    /**
     *
     * Set the position in NED coordinates and yaw.
     *
     * @generated from protobuf rpc: SetPositionNed(mavsdk.rpc.offboard.SetPositionNedRequest) returns (mavsdk.rpc.offboard.SetPositionNedResponse);
     */
    setPositionNed(input: SetPositionNedRequest, options?: RpcOptions): UnaryCall<SetPositionNedRequest, SetPositionNedResponse>;
    /**
     *
     * Set the position in Global coordinates (latitude, longitude, altitude) and yaw
     *
     * @generated from protobuf rpc: SetPositionGlobal(mavsdk.rpc.offboard.SetPositionGlobalRequest) returns (mavsdk.rpc.offboard.SetPositionGlobalResponse);
     */
    setPositionGlobal(input: SetPositionGlobalRequest, options?: RpcOptions): UnaryCall<SetPositionGlobalRequest, SetPositionGlobalResponse>;
    /**
     *
     * Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
     *
     * @generated from protobuf rpc: SetVelocityBody(mavsdk.rpc.offboard.SetVelocityBodyRequest) returns (mavsdk.rpc.offboard.SetVelocityBodyResponse);
     */
    setVelocityBody(input: SetVelocityBodyRequest, options?: RpcOptions): UnaryCall<SetVelocityBodyRequest, SetVelocityBodyResponse>;
    /**
     *
     * Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
     *
     * @generated from protobuf rpc: SetVelocityNed(mavsdk.rpc.offboard.SetVelocityNedRequest) returns (mavsdk.rpc.offboard.SetVelocityNedResponse);
     */
    setVelocityNed(input: SetVelocityNedRequest, options?: RpcOptions): UnaryCall<SetVelocityNedRequest, SetVelocityNedResponse>;
    /**
     *
     * Set the position in NED coordinates, with the velocity to be used as feed-forward.
     *
     * @generated from protobuf rpc: SetPositionVelocityNed(mavsdk.rpc.offboard.SetPositionVelocityNedRequest) returns (mavsdk.rpc.offboard.SetPositionVelocityNedResponse);
     */
    setPositionVelocityNed(input: SetPositionVelocityNedRequest, options?: RpcOptions): UnaryCall<SetPositionVelocityNedRequest, SetPositionVelocityNedResponse>;
    /**
     *
     * Set the position, velocity and acceleration in NED coordinates, with velocity and acceleration used as feed-forward.
     *
     * @generated from protobuf rpc: SetPositionVelocityAccelerationNed(mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest) returns (mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse);
     */
    setPositionVelocityAccelerationNed(input: SetPositionVelocityAccelerationNedRequest, options?: RpcOptions): UnaryCall<SetPositionVelocityAccelerationNedRequest, SetPositionVelocityAccelerationNedResponse>;
    /**
     *
     * Set the acceleration in NED coordinates.
     *
     * @generated from protobuf rpc: SetAccelerationNed(mavsdk.rpc.offboard.SetAccelerationNedRequest) returns (mavsdk.rpc.offboard.SetAccelerationNedResponse);
     */
    setAccelerationNed(input: SetAccelerationNedRequest, options?: RpcOptions): UnaryCall<SetAccelerationNedRequest, SetAccelerationNedResponse>;
}
/**
 * *
 * Control a drone with position, velocity, attitude or motor commands.
 *
 * The module is called offboard because the commands can be sent from external sources
 * as opposed to onboard control right inside the autopilot "board".
 *
 * Client code must specify a setpoint before starting offboard mode.
 * Mavsdk automatically sends setpoints at 20Hz (PX4 Offboard mode requires that setpoints
 * are minimally sent at 2Hz).
 *
 * @generated from protobuf service mavsdk.rpc.offboard.OffboardService
 */
export class OffboardServiceClient implements IOffboardServiceClient, ServiceInfo {
    typeName = OffboardService.typeName;
    methods = OffboardService.methods;
    options = OffboardService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *
     * Start offboard control.
     *
     * @generated from protobuf rpc: Start(mavsdk.rpc.offboard.StartRequest) returns (mavsdk.rpc.offboard.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartRequest, StartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Stop offboard control.
     *
     * The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
     *
     * @generated from protobuf rpc: Stop(mavsdk.rpc.offboard.StopRequest) returns (mavsdk.rpc.offboard.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopRequest, StopResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Check if offboard control is active.
     *
     * True means that the vehicle is in offboard mode and we are actively sending
     * setpoints.
     *
     * @generated from protobuf rpc: IsActive(mavsdk.rpc.offboard.IsActiveRequest) returns (mavsdk.rpc.offboard.IsActiveResponse);
     */
    isActive(input: IsActiveRequest, options?: RpcOptions): UnaryCall<IsActiveRequest, IsActiveResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<IsActiveRequest, IsActiveResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
     *
     * @generated from protobuf rpc: SetAttitude(mavsdk.rpc.offboard.SetAttitudeRequest) returns (mavsdk.rpc.offboard.SetAttitudeResponse);
     */
    setAttitude(input: SetAttitudeRequest, options?: RpcOptions): UnaryCall<SetAttitudeRequest, SetAttitudeResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetAttitudeRequest, SetAttitudeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set direct actuator control values to groups #0 and #1.
     *
     * First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
     * actuator_control.num_controls more than 8).
     *
     * @generated from protobuf rpc: SetActuatorControl(mavsdk.rpc.offboard.SetActuatorControlRequest) returns (mavsdk.rpc.offboard.SetActuatorControlResponse);
     */
    setActuatorControl(input: SetActuatorControlRequest, options?: RpcOptions): UnaryCall<SetActuatorControlRequest, SetActuatorControlResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetActuatorControlRequest, SetActuatorControlResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
     *
     * @generated from protobuf rpc: SetAttitudeRate(mavsdk.rpc.offboard.SetAttitudeRateRequest) returns (mavsdk.rpc.offboard.SetAttitudeRateResponse);
     */
    setAttitudeRate(input: SetAttitudeRateRequest, options?: RpcOptions): UnaryCall<SetAttitudeRateRequest, SetAttitudeRateResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetAttitudeRateRequest, SetAttitudeRateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the position in NED coordinates and yaw.
     *
     * @generated from protobuf rpc: SetPositionNed(mavsdk.rpc.offboard.SetPositionNedRequest) returns (mavsdk.rpc.offboard.SetPositionNedResponse);
     */
    setPositionNed(input: SetPositionNedRequest, options?: RpcOptions): UnaryCall<SetPositionNedRequest, SetPositionNedResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetPositionNedRequest, SetPositionNedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the position in Global coordinates (latitude, longitude, altitude) and yaw
     *
     * @generated from protobuf rpc: SetPositionGlobal(mavsdk.rpc.offboard.SetPositionGlobalRequest) returns (mavsdk.rpc.offboard.SetPositionGlobalResponse);
     */
    setPositionGlobal(input: SetPositionGlobalRequest, options?: RpcOptions): UnaryCall<SetPositionGlobalRequest, SetPositionGlobalResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetPositionGlobalRequest, SetPositionGlobalResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
     *
     * @generated from protobuf rpc: SetVelocityBody(mavsdk.rpc.offboard.SetVelocityBodyRequest) returns (mavsdk.rpc.offboard.SetVelocityBodyResponse);
     */
    setVelocityBody(input: SetVelocityBodyRequest, options?: RpcOptions): UnaryCall<SetVelocityBodyRequest, SetVelocityBodyResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetVelocityBodyRequest, SetVelocityBodyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
     *
     * @generated from protobuf rpc: SetVelocityNed(mavsdk.rpc.offboard.SetVelocityNedRequest) returns (mavsdk.rpc.offboard.SetVelocityNedResponse);
     */
    setVelocityNed(input: SetVelocityNedRequest, options?: RpcOptions): UnaryCall<SetVelocityNedRequest, SetVelocityNedResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetVelocityNedRequest, SetVelocityNedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the position in NED coordinates, with the velocity to be used as feed-forward.
     *
     * @generated from protobuf rpc: SetPositionVelocityNed(mavsdk.rpc.offboard.SetPositionVelocityNedRequest) returns (mavsdk.rpc.offboard.SetPositionVelocityNedResponse);
     */
    setPositionVelocityNed(input: SetPositionVelocityNedRequest, options?: RpcOptions): UnaryCall<SetPositionVelocityNedRequest, SetPositionVelocityNedResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetPositionVelocityNedRequest, SetPositionVelocityNedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the position, velocity and acceleration in NED coordinates, with velocity and acceleration used as feed-forward.
     *
     * @generated from protobuf rpc: SetPositionVelocityAccelerationNed(mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest) returns (mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse);
     */
    setPositionVelocityAccelerationNed(input: SetPositionVelocityAccelerationNedRequest, options?: RpcOptions): UnaryCall<SetPositionVelocityAccelerationNedRequest, SetPositionVelocityAccelerationNedResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetPositionVelocityAccelerationNedRequest, SetPositionVelocityAccelerationNedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Set the acceleration in NED coordinates.
     *
     * @generated from protobuf rpc: SetAccelerationNed(mavsdk.rpc.offboard.SetAccelerationNedRequest) returns (mavsdk.rpc.offboard.SetAccelerationNedResponse);
     */
    setAccelerationNed(input: SetAccelerationNedRequest, options?: RpcOptions): UnaryCall<SetAccelerationNedRequest, SetAccelerationNedResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetAccelerationNedRequest, SetAccelerationNedResponse>("unary", this._transport, method, opt, input);
    }
}
