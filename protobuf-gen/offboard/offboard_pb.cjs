/* eslint-disable */

// source: offboard/offboard.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.offboard.AccelerationNed', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.ActuatorControl', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.ActuatorControlGroup', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.Attitude', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.AttitudeRate', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.IsActiveRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.IsActiveResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.OffboardResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.OffboardResult.Result', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.PositionGlobalYaw', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.PositionNedYaw', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetAccelerationNedRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetAccelerationNedResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetActuatorControlRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetActuatorControlResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetAttitudeRateRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetAttitudeRateResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetAttitudeRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetAttitudeResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetPositionGlobalRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetPositionGlobalResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetPositionNedRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetPositionNedResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetVelocityBodyRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetVelocityBodyResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetVelocityNedRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.SetVelocityNedResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.StartRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.StartResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.StopRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.StopResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.VelocityBodyYawspeed', null, global);
goog.exportSymbol('proto.mavsdk.rpc.offboard.VelocityNedYaw', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.StartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.StartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.StartRequest.displayName = 'proto.mavsdk.rpc.offboard.StartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.StartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.StartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.StartResponse.displayName = 'proto.mavsdk.rpc.offboard.StartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.StopRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.StopRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.StopRequest.displayName = 'proto.mavsdk.rpc.offboard.StopRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.StopResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.StopResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.StopResponse.displayName = 'proto.mavsdk.rpc.offboard.StopResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.IsActiveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.IsActiveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.IsActiveRequest.displayName = 'proto.mavsdk.rpc.offboard.IsActiveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.IsActiveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.IsActiveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.IsActiveResponse.displayName = 'proto.mavsdk.rpc.offboard.IsActiveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetAttitudeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetAttitudeRequest.displayName = 'proto.mavsdk.rpc.offboard.SetAttitudeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetAttitudeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetAttitudeResponse.displayName = 'proto.mavsdk.rpc.offboard.SetAttitudeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetActuatorControlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetActuatorControlRequest.displayName = 'proto.mavsdk.rpc.offboard.SetActuatorControlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetActuatorControlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetActuatorControlResponse.displayName = 'proto.mavsdk.rpc.offboard.SetActuatorControlResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetAttitudeRateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.displayName = 'proto.mavsdk.rpc.offboard.SetAttitudeRateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetAttitudeRateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.displayName = 'proto.mavsdk.rpc.offboard.SetAttitudeRateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetPositionNedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetPositionNedRequest.displayName = 'proto.mavsdk.rpc.offboard.SetPositionNedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetPositionNedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetPositionNedResponse.displayName = 'proto.mavsdk.rpc.offboard.SetPositionNedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetPositionGlobalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.displayName = 'proto.mavsdk.rpc.offboard.SetPositionGlobalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetPositionGlobalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.displayName = 'proto.mavsdk.rpc.offboard.SetPositionGlobalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetVelocityBodyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.displayName = 'proto.mavsdk.rpc.offboard.SetVelocityBodyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetVelocityBodyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.displayName = 'proto.mavsdk.rpc.offboard.SetVelocityBodyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetVelocityNedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetVelocityNedRequest.displayName = 'proto.mavsdk.rpc.offboard.SetVelocityNedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetVelocityNedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetVelocityNedResponse.displayName = 'proto.mavsdk.rpc.offboard.SetVelocityNedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.displayName = 'proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.displayName = 'proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.displayName = 'proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.displayName = 'proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetAccelerationNedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.displayName = 'proto.mavsdk.rpc.offboard.SetAccelerationNedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.SetAccelerationNedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.displayName = 'proto.mavsdk.rpc.offboard.SetAccelerationNedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.Attitude = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.Attitude, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.Attitude.displayName = 'proto.mavsdk.rpc.offboard.Attitude';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.offboard.ActuatorControlGroup.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.ActuatorControlGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.ActuatorControlGroup.displayName = 'proto.mavsdk.rpc.offboard.ActuatorControlGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.ActuatorControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.offboard.ActuatorControl.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.ActuatorControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.ActuatorControl.displayName = 'proto.mavsdk.rpc.offboard.ActuatorControl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.AttitudeRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.AttitudeRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.AttitudeRate.displayName = 'proto.mavsdk.rpc.offboard.AttitudeRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.PositionNedYaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.PositionNedYaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.PositionNedYaw.displayName = 'proto.mavsdk.rpc.offboard.PositionNedYaw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.PositionGlobalYaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.PositionGlobalYaw.displayName = 'proto.mavsdk.rpc.offboard.PositionGlobalYaw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.VelocityBodyYawspeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.displayName = 'proto.mavsdk.rpc.offboard.VelocityBodyYawspeed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.VelocityNedYaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.VelocityNedYaw.displayName = 'proto.mavsdk.rpc.offboard.VelocityNedYaw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.AccelerationNed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.AccelerationNed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.AccelerationNed.displayName = 'proto.mavsdk.rpc.offboard.AccelerationNed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.offboard.OffboardResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.offboard.OffboardResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.offboard.OffboardResult.displayName = 'proto.mavsdk.rpc.offboard.OffboardResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.StartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.StartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.StartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.StartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.StartRequest}
 */
proto.mavsdk.rpc.offboard.StartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.StartRequest;
  return proto.mavsdk.rpc.offboard.StartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.StartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.StartRequest}
 */
proto.mavsdk.rpc.offboard.StartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.StartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.StartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.StartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.StartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.StartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.StartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.StartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.StartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.StartResponse}
 */
proto.mavsdk.rpc.offboard.StartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.StartResponse;
  return proto.mavsdk.rpc.offboard.StartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.StartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.StartResponse}
 */
proto.mavsdk.rpc.offboard.StartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.StartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.StartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.StartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.StartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.StartResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.StartResponse} returns this
*/
proto.mavsdk.rpc.offboard.StartResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.StartResponse} returns this
 */
proto.mavsdk.rpc.offboard.StartResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.StartResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.StopRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.StopRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.StopRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.StopRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.StopRequest}
 */
proto.mavsdk.rpc.offboard.StopRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.StopRequest;
  return proto.mavsdk.rpc.offboard.StopRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.StopRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.StopRequest}
 */
proto.mavsdk.rpc.offboard.StopRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.StopRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.StopRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.StopRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.StopRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.StopResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.StopResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.StopResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.StopResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.StopResponse}
 */
proto.mavsdk.rpc.offboard.StopResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.StopResponse;
  return proto.mavsdk.rpc.offboard.StopResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.StopResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.StopResponse}
 */
proto.mavsdk.rpc.offboard.StopResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.StopResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.StopResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.StopResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.StopResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.StopResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.StopResponse} returns this
*/
proto.mavsdk.rpc.offboard.StopResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.StopResponse} returns this
 */
proto.mavsdk.rpc.offboard.StopResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.StopResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.IsActiveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.IsActiveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.IsActiveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.IsActiveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.IsActiveRequest}
 */
proto.mavsdk.rpc.offboard.IsActiveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.IsActiveRequest;
  return proto.mavsdk.rpc.offboard.IsActiveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.IsActiveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.IsActiveRequest}
 */
proto.mavsdk.rpc.offboard.IsActiveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.IsActiveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.IsActiveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.IsActiveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.IsActiveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.IsActiveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.IsActiveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.IsActiveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.IsActiveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.IsActiveResponse}
 */
proto.mavsdk.rpc.offboard.IsActiveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.IsActiveResponse;
  return proto.mavsdk.rpc.offboard.IsActiveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.IsActiveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.IsActiveResponse}
 */
proto.mavsdk.rpc.offboard.IsActiveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.IsActiveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.IsActiveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.IsActiveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.IsActiveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_active = 1;
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.IsActiveResponse.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.offboard.IsActiveResponse} returns this
 */
proto.mavsdk.rpc.offboard.IsActiveResponse.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetAttitudeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    attitude: (f = msg.getAttitude()) && proto.mavsdk.rpc.offboard.Attitude.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRequest}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetAttitudeRequest;
  return proto.mavsdk.rpc.offboard.SetAttitudeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRequest}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.Attitude;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.Attitude.deserializeBinaryFromReader);
      msg.setAttitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetAttitudeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttitude();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.Attitude.serializeBinaryToWriter
    );
  }
};


/**
 * optional Attitude attitude = 1;
 * @return {?proto.mavsdk.rpc.offboard.Attitude}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.prototype.getAttitude = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.Attitude} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.Attitude, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.Attitude|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetAttitudeRequest.prototype.setAttitude = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.prototype.clearAttitude = function() {
  return this.setAttitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRequest.prototype.hasAttitude = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetAttitudeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeResponse}
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetAttitudeResponse;
  return proto.mavsdk.rpc.offboard.SetAttitudeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeResponse}
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetAttitudeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetAttitudeResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetAttitudeResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetActuatorControlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetActuatorControlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    actuatorControl: (f = msg.getActuatorControl()) && proto.mavsdk.rpc.offboard.ActuatorControl.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetActuatorControlRequest}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetActuatorControlRequest;
  return proto.mavsdk.rpc.offboard.SetActuatorControlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetActuatorControlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetActuatorControlRequest}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.ActuatorControl;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.ActuatorControl.deserializeBinaryFromReader);
      msg.setActuatorControl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetActuatorControlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetActuatorControlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActuatorControl();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.ActuatorControl.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActuatorControl actuator_control = 1;
 * @return {?proto.mavsdk.rpc.offboard.ActuatorControl}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.prototype.getActuatorControl = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.ActuatorControl} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.ActuatorControl, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.ActuatorControl|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetActuatorControlRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.prototype.setActuatorControl = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetActuatorControlRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.prototype.clearActuatorControl = function() {
  return this.setActuatorControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlRequest.prototype.hasActuatorControl = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetActuatorControlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetActuatorControlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetActuatorControlResponse}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetActuatorControlResponse;
  return proto.mavsdk.rpc.offboard.SetActuatorControlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetActuatorControlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetActuatorControlResponse}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetActuatorControlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetActuatorControlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetActuatorControlResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetActuatorControlResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetActuatorControlResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    attitudeRate: (f = msg.getAttitudeRate()) && proto.mavsdk.rpc.offboard.AttitudeRate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRateRequest}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetAttitudeRateRequest;
  return proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRateRequest}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.AttitudeRate;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.AttitudeRate.deserializeBinaryFromReader);
      msg.setAttitudeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttitudeRate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.AttitudeRate.serializeBinaryToWriter
    );
  }
};


/**
 * optional AttitudeRate attitude_rate = 1;
 * @return {?proto.mavsdk.rpc.offboard.AttitudeRate}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.prototype.getAttitudeRate = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.AttitudeRate} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.AttitudeRate, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.AttitudeRate|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRateRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.prototype.setAttitudeRate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRateRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.prototype.clearAttitudeRate = function() {
  return this.setAttitudeRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateRequest.prototype.hasAttitudeRate = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRateResponse}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetAttitudeRateResponse;
  return proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRateResponse}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetAttitudeRateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRateResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetAttitudeRateResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetAttitudeRateResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetPositionNedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetPositionNedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionNedYaw: (f = msg.getPositionNedYaw()) && proto.mavsdk.rpc.offboard.PositionNedYaw.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionNedRequest}
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetPositionNedRequest;
  return proto.mavsdk.rpc.offboard.SetPositionNedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionNedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionNedRequest}
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.PositionNedYaw;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.PositionNedYaw.deserializeBinaryFromReader);
      msg.setPositionNedYaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetPositionNedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionNedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionNedYaw();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.PositionNedYaw.serializeBinaryToWriter
    );
  }
};


/**
 * optional PositionNedYaw position_ned_yaw = 1;
 * @return {?proto.mavsdk.rpc.offboard.PositionNedYaw}
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.prototype.getPositionNedYaw = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.PositionNedYaw} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.PositionNedYaw, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.PositionNedYaw|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionNedRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionNedRequest.prototype.setPositionNedYaw = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionNedRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.prototype.clearPositionNedYaw = function() {
  return this.setPositionNedYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionNedRequest.prototype.hasPositionNedYaw = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetPositionNedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetPositionNedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionNedResponse}
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetPositionNedResponse;
  return proto.mavsdk.rpc.offboard.SetPositionNedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionNedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionNedResponse}
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetPositionNedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionNedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionNedResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionNedResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionNedResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionNedResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetPositionGlobalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionGlobalYaw: (f = msg.getPositionGlobalYaw()) && proto.mavsdk.rpc.offboard.PositionGlobalYaw.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionGlobalRequest}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetPositionGlobalRequest;
  return proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionGlobalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionGlobalRequest}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.PositionGlobalYaw;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.PositionGlobalYaw.deserializeBinaryFromReader);
      msg.setPositionGlobalYaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionGlobalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionGlobalYaw();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.PositionGlobalYaw.serializeBinaryToWriter
    );
  }
};


/**
 * optional PositionGlobalYaw position_global_yaw = 1;
 * @return {?proto.mavsdk.rpc.offboard.PositionGlobalYaw}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.prototype.getPositionGlobalYaw = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.PositionGlobalYaw} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.PositionGlobalYaw, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.PositionGlobalYaw|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionGlobalRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.prototype.setPositionGlobalYaw = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionGlobalRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.prototype.clearPositionGlobalYaw = function() {
  return this.setPositionGlobalYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalRequest.prototype.hasPositionGlobalYaw = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetPositionGlobalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionGlobalResponse}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetPositionGlobalResponse;
  return proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionGlobalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionGlobalResponse}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionGlobalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionGlobalResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionGlobalResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionGlobalResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityBodyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    velocityBodyYawspeed: (f = msg.getVelocityBodyYawspeed()) && proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityBodyRequest}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetVelocityBodyRequest;
  return proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityBodyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityBodyRequest}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.VelocityBodyYawspeed;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.deserializeBinaryFromReader);
      msg.setVelocityBodyYawspeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityBodyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVelocityBodyYawspeed();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.serializeBinaryToWriter
    );
  }
};


/**
 * optional VelocityBodyYawspeed velocity_body_yawspeed = 1;
 * @return {?proto.mavsdk.rpc.offboard.VelocityBodyYawspeed}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.prototype.getVelocityBodyYawspeed = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.VelocityBodyYawspeed} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.VelocityBodyYawspeed, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.VelocityBodyYawspeed|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityBodyRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.prototype.setVelocityBodyYawspeed = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityBodyRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.prototype.clearVelocityBodyYawspeed = function() {
  return this.setVelocityBodyYawspeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyRequest.prototype.hasVelocityBodyYawspeed = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityBodyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityBodyResponse}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetVelocityBodyResponse;
  return proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityBodyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityBodyResponse}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityBodyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityBodyResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityBodyResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetVelocityBodyResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetVelocityNedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityNedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    velocityNedYaw: (f = msg.getVelocityNedYaw()) && proto.mavsdk.rpc.offboard.VelocityNedYaw.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityNedRequest}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetVelocityNedRequest;
  return proto.mavsdk.rpc.offboard.SetVelocityNedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityNedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityNedRequest}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.VelocityNedYaw;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.VelocityNedYaw.deserializeBinaryFromReader);
      msg.setVelocityNedYaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetVelocityNedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityNedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVelocityNedYaw();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.VelocityNedYaw.serializeBinaryToWriter
    );
  }
};


/**
 * optional VelocityNedYaw velocity_ned_yaw = 1;
 * @return {?proto.mavsdk.rpc.offboard.VelocityNedYaw}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.prototype.getVelocityNedYaw = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.VelocityNedYaw} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.VelocityNedYaw, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.VelocityNedYaw|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityNedRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.prototype.setVelocityNedYaw = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityNedRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.prototype.clearVelocityNedYaw = function() {
  return this.setVelocityNedYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedRequest.prototype.hasVelocityNedYaw = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetVelocityNedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityNedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityNedResponse}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetVelocityNedResponse;
  return proto.mavsdk.rpc.offboard.SetVelocityNedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityNedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityNedResponse}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetVelocityNedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetVelocityNedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityNedResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetVelocityNedResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetVelocityNedResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionNedYaw: (f = msg.getPositionNedYaw()) && proto.mavsdk.rpc.offboard.PositionNedYaw.toObject(includeInstance, f),
    velocityNedYaw: (f = msg.getVelocityNedYaw()) && proto.mavsdk.rpc.offboard.VelocityNedYaw.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest;
  return proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.PositionNedYaw;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.PositionNedYaw.deserializeBinaryFromReader);
      msg.setPositionNedYaw(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.offboard.VelocityNedYaw;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.VelocityNedYaw.deserializeBinaryFromReader);
      msg.setVelocityNedYaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionNedYaw();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.PositionNedYaw.serializeBinaryToWriter
    );
  }
  f = message.getVelocityNedYaw();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.offboard.VelocityNedYaw.serializeBinaryToWriter
    );
  }
};


/**
 * optional PositionNedYaw position_ned_yaw = 1;
 * @return {?proto.mavsdk.rpc.offboard.PositionNedYaw}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.getPositionNedYaw = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.PositionNedYaw} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.PositionNedYaw, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.PositionNedYaw|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.setPositionNedYaw = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.clearPositionNedYaw = function() {
  return this.setPositionNedYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.hasPositionNedYaw = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VelocityNedYaw velocity_ned_yaw = 2;
 * @return {?proto.mavsdk.rpc.offboard.VelocityNedYaw}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.getVelocityNedYaw = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.VelocityNedYaw} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.VelocityNedYaw, 2));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.VelocityNedYaw|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.setVelocityNedYaw = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.clearVelocityNedYaw = function() {
  return this.setVelocityNedYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedRequest.prototype.hasVelocityNedYaw = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionNedYaw: (f = msg.getPositionNedYaw()) && proto.mavsdk.rpc.offboard.PositionNedYaw.toObject(includeInstance, f),
    velocityNedYaw: (f = msg.getVelocityNedYaw()) && proto.mavsdk.rpc.offboard.VelocityNedYaw.toObject(includeInstance, f),
    accelerationNed: (f = msg.getAccelerationNed()) && proto.mavsdk.rpc.offboard.AccelerationNed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest;
  return proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.PositionNedYaw;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.PositionNedYaw.deserializeBinaryFromReader);
      msg.setPositionNedYaw(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.offboard.VelocityNedYaw;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.VelocityNedYaw.deserializeBinaryFromReader);
      msg.setVelocityNedYaw(value);
      break;
    case 3:
      var value = new proto.mavsdk.rpc.offboard.AccelerationNed;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.AccelerationNed.deserializeBinaryFromReader);
      msg.setAccelerationNed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionNedYaw();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.PositionNedYaw.serializeBinaryToWriter
    );
  }
  f = message.getVelocityNedYaw();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.offboard.VelocityNedYaw.serializeBinaryToWriter
    );
  }
  f = message.getAccelerationNed();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mavsdk.rpc.offboard.AccelerationNed.serializeBinaryToWriter
    );
  }
};


/**
 * optional PositionNedYaw position_ned_yaw = 1;
 * @return {?proto.mavsdk.rpc.offboard.PositionNedYaw}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.getPositionNedYaw = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.PositionNedYaw} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.PositionNedYaw, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.PositionNedYaw|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.setPositionNedYaw = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.clearPositionNedYaw = function() {
  return this.setPositionNedYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.hasPositionNedYaw = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VelocityNedYaw velocity_ned_yaw = 2;
 * @return {?proto.mavsdk.rpc.offboard.VelocityNedYaw}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.getVelocityNedYaw = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.VelocityNedYaw} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.VelocityNedYaw, 2));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.VelocityNedYaw|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.setVelocityNedYaw = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.clearVelocityNedYaw = function() {
  return this.setVelocityNedYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.hasVelocityNedYaw = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccelerationNed acceleration_ned = 3;
 * @return {?proto.mavsdk.rpc.offboard.AccelerationNed}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.getAccelerationNed = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.AccelerationNed} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.AccelerationNed, 3));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.AccelerationNed|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.setAccelerationNed = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.clearAccelerationNed = function() {
  return this.setAccelerationNed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedRequest.prototype.hasAccelerationNed = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse;
  return proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityNedResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse;
  return proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetPositionVelocityAccelerationNedResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetAccelerationNedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accelerationNed: (f = msg.getAccelerationNed()) && proto.mavsdk.rpc.offboard.AccelerationNed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetAccelerationNedRequest}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetAccelerationNedRequest;
  return proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetAccelerationNedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetAccelerationNedRequest}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.AccelerationNed;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.AccelerationNed.deserializeBinaryFromReader);
      msg.setAccelerationNed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetAccelerationNedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccelerationNed();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.AccelerationNed.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccelerationNed acceleration_ned = 1;
 * @return {?proto.mavsdk.rpc.offboard.AccelerationNed}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.prototype.getAccelerationNed = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.AccelerationNed} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.AccelerationNed, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.AccelerationNed|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetAccelerationNedRequest} returns this
*/
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.prototype.setAccelerationNed = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetAccelerationNedRequest} returns this
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.prototype.clearAccelerationNed = function() {
  return this.setAccelerationNed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedRequest.prototype.hasAccelerationNed = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.SetAccelerationNedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offboardResult: (f = msg.getOffboardResult()) && proto.mavsdk.rpc.offboard.OffboardResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.SetAccelerationNedResponse}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.SetAccelerationNedResponse;
  return proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.SetAccelerationNedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.SetAccelerationNedResponse}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.OffboardResult;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader);
      msg.setOffboardResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.SetAccelerationNedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffboardResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OffboardResult offboard_result = 1;
 * @return {?proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.prototype.getOffboardResult = function() {
  return /** @type{?proto.mavsdk.rpc.offboard.OffboardResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.offboard.OffboardResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.offboard.OffboardResult|undefined} value
 * @return {!proto.mavsdk.rpc.offboard.SetAccelerationNedResponse} returns this
*/
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.prototype.setOffboardResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.offboard.SetAccelerationNedResponse} returns this
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.prototype.clearOffboardResult = function() {
  return this.setOffboardResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.offboard.SetAccelerationNedResponse.prototype.hasOffboardResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.Attitude.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.Attitude} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.Attitude.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitchDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    yawDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    thrustValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.Attitude}
 */
proto.mavsdk.rpc.offboard.Attitude.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.Attitude;
  return proto.mavsdk.rpc.offboard.Attitude.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.Attitude} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.Attitude}
 */
proto.mavsdk.rpc.offboard.Attitude.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollDeg(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchDeg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawDeg(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThrustValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.Attitude.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.Attitude} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.Attitude.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRollDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPitchDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getYawDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getThrustValue();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float roll_deg = 1;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.getRollDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.Attitude} returns this
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.setRollDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float pitch_deg = 2;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.getPitchDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.Attitude} returns this
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.setPitchDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float yaw_deg = 3;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.getYawDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.Attitude} returns this
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.setYawDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float thrust_value = 4;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.getThrustValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.Attitude} returns this
 */
proto.mavsdk.rpc.offboard.Attitude.prototype.setThrustValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.ActuatorControlGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.ActuatorControlGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControlGroup}
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.ActuatorControlGroup;
  return proto.mavsdk.rpc.offboard.ActuatorControlGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.ActuatorControlGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControlGroup}
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addControls(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.ActuatorControlGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.ActuatorControlGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float controls = 1;
 * @return {!Array<number>}
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.prototype.getControlsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControlGroup} returns this
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.prototype.setControlsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControlGroup} returns this
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.prototype.addControls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControlGroup} returns this
 */
proto.mavsdk.rpc.offboard.ActuatorControlGroup.prototype.clearControlsList = function() {
  return this.setControlsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.offboard.ActuatorControl.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.ActuatorControl.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.ActuatorControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.ActuatorControl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.ActuatorControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.mavsdk.rpc.offboard.ActuatorControlGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControl}
 */
proto.mavsdk.rpc.offboard.ActuatorControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.ActuatorControl;
  return proto.mavsdk.rpc.offboard.ActuatorControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.ActuatorControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControl}
 */
proto.mavsdk.rpc.offboard.ActuatorControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.offboard.ActuatorControlGroup;
      reader.readMessage(value,proto.mavsdk.rpc.offboard.ActuatorControlGroup.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.ActuatorControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.ActuatorControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.ActuatorControl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.ActuatorControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mavsdk.rpc.offboard.ActuatorControlGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ActuatorControlGroup groups = 1;
 * @return {!Array<!proto.mavsdk.rpc.offboard.ActuatorControlGroup>}
 */
proto.mavsdk.rpc.offboard.ActuatorControl.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.mavsdk.rpc.offboard.ActuatorControlGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mavsdk.rpc.offboard.ActuatorControlGroup, 1));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.offboard.ActuatorControlGroup>} value
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControl} returns this
*/
proto.mavsdk.rpc.offboard.ActuatorControl.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mavsdk.rpc.offboard.ActuatorControlGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControlGroup}
 */
proto.mavsdk.rpc.offboard.ActuatorControl.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mavsdk.rpc.offboard.ActuatorControlGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.offboard.ActuatorControl} returns this
 */
proto.mavsdk.rpc.offboard.ActuatorControl.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.AttitudeRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.AttitudeRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.AttitudeRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollDegS: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitchDegS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    yawDegS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    thrustValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.AttitudeRate}
 */
proto.mavsdk.rpc.offboard.AttitudeRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.AttitudeRate;
  return proto.mavsdk.rpc.offboard.AttitudeRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.AttitudeRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.AttitudeRate}
 */
proto.mavsdk.rpc.offboard.AttitudeRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollDegS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchDegS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawDegS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThrustValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.AttitudeRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.AttitudeRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.AttitudeRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRollDegS();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPitchDegS();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getYawDegS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getThrustValue();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float roll_deg_s = 1;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.getRollDegS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.AttitudeRate} returns this
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.setRollDegS = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float pitch_deg_s = 2;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.getPitchDegS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.AttitudeRate} returns this
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.setPitchDegS = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float yaw_deg_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.getYawDegS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.AttitudeRate} returns this
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.setYawDegS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float thrust_value = 4;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.getThrustValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.AttitudeRate} returns this
 */
proto.mavsdk.rpc.offboard.AttitudeRate.prototype.setThrustValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.PositionNedYaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.PositionNedYaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    northM: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    eastM: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    downM: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    yawDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.PositionNedYaw}
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.PositionNedYaw;
  return proto.mavsdk.rpc.offboard.PositionNedYaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.PositionNedYaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.PositionNedYaw}
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNorthM(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEastM(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownM(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawDeg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.PositionNedYaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.PositionNedYaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNorthM();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getEastM();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDownM();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getYawDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float north_m = 1;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.getNorthM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.PositionNedYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.setNorthM = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float east_m = 2;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.getEastM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.PositionNedYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.setEastM = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float down_m = 3;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.getDownM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.PositionNedYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.setDownM = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float yaw_deg = 4;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.getYawDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.PositionNedYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionNedYaw.prototype.setYawDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.PositionGlobalYaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.PositionGlobalYaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    latDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lonDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    altM: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    yawDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    altitudeType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.PositionGlobalYaw}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.PositionGlobalYaw;
  return proto.mavsdk.rpc.offboard.PositionGlobalYaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.PositionGlobalYaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.PositionGlobalYaw}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatDeg(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLonDeg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltM(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawDeg(value);
      break;
    case 5:
      var value = /** @type {!proto.mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType} */ (reader.readEnum());
      msg.setAltitudeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.PositionGlobalYaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.PositionGlobalYaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatDeg();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLonDeg();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getAltM();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getYawDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getAltitudeType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType = {
  ALTITUDE_TYPE_REL_HOME: 0,
  ALTITUDE_TYPE_AMSL: 1,
  ALTITUDE_TYPE_AGL: 2
};

/**
 * optional double lat_deg = 1;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.getLatDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.PositionGlobalYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.setLatDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double lon_deg = 2;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.getLonDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.PositionGlobalYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.setLonDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float alt_m = 3;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.getAltM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.PositionGlobalYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.setAltM = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float yaw_deg = 4;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.getYawDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.PositionGlobalYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.setYawDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional AltitudeType altitude_type = 5;
 * @return {!proto.mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType}
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.getAltitudeType = function() {
  return /** @type {!proto.mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mavsdk.rpc.offboard.PositionGlobalYaw.AltitudeType} value
 * @return {!proto.mavsdk.rpc.offboard.PositionGlobalYaw} returns this
 */
proto.mavsdk.rpc.offboard.PositionGlobalYaw.prototype.setAltitudeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.toObject = function(includeInstance, msg) {
  var f, obj = {
    forwardMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    rightMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    downMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    yawspeedDegS: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed}
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.VelocityBodyYawspeed;
  return proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed}
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setForwardMS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRightMS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownMS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawspeedDegS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForwardMS();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getRightMS();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDownMS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getYawspeedDegS();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float forward_m_s = 1;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.getForwardMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed} returns this
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.setForwardMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float right_m_s = 2;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.getRightMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed} returns this
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.setRightMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float down_m_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.getDownMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed} returns this
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.setDownMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float yawspeed_deg_s = 4;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.getYawspeedDegS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.VelocityBodyYawspeed} returns this
 */
proto.mavsdk.rpc.offboard.VelocityBodyYawspeed.prototype.setYawspeedDegS = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.VelocityNedYaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.VelocityNedYaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    northMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    eastMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    downMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    yawDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.VelocityNedYaw}
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.VelocityNedYaw;
  return proto.mavsdk.rpc.offboard.VelocityNedYaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.VelocityNedYaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.VelocityNedYaw}
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNorthMS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEastMS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownMS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawDeg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.VelocityNedYaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.VelocityNedYaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNorthMS();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getEastMS();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDownMS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getYawDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float north_m_s = 1;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.getNorthMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.VelocityNedYaw} returns this
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.setNorthMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float east_m_s = 2;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.getEastMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.VelocityNedYaw} returns this
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.setEastMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float down_m_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.getDownMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.VelocityNedYaw} returns this
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.setDownMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float yaw_deg = 4;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.getYawDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.VelocityNedYaw} returns this
 */
proto.mavsdk.rpc.offboard.VelocityNedYaw.prototype.setYawDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.AccelerationNed.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.AccelerationNed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.AccelerationNed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.AccelerationNed.toObject = function(includeInstance, msg) {
  var f, obj = {
    northMS2: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    eastMS2: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    downMS2: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.AccelerationNed}
 */
proto.mavsdk.rpc.offboard.AccelerationNed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.AccelerationNed;
  return proto.mavsdk.rpc.offboard.AccelerationNed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.AccelerationNed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.AccelerationNed}
 */
proto.mavsdk.rpc.offboard.AccelerationNed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNorthMS2(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEastMS2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownMS2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.AccelerationNed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.AccelerationNed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.AccelerationNed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.AccelerationNed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNorthMS2();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getEastMS2();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDownMS2();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float north_m_s2 = 1;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.AccelerationNed.prototype.getNorthMS2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.AccelerationNed} returns this
 */
proto.mavsdk.rpc.offboard.AccelerationNed.prototype.setNorthMS2 = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float east_m_s2 = 2;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.AccelerationNed.prototype.getEastMS2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.AccelerationNed} returns this
 */
proto.mavsdk.rpc.offboard.AccelerationNed.prototype.setEastMS2 = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float down_m_s2 = 3;
 * @return {number}
 */
proto.mavsdk.rpc.offboard.AccelerationNed.prototype.getDownMS2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.offboard.AccelerationNed} returns this
 */
proto.mavsdk.rpc.offboard.AccelerationNed.prototype.setDownMS2 = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.offboard.OffboardResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.offboard.OffboardResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.offboard.OffboardResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.OffboardResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.offboard.OffboardResult;
  return proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.offboard.OffboardResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.offboard.OffboardResult}
 */
proto.mavsdk.rpc.offboard.OffboardResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.offboard.OffboardResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.offboard.OffboardResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.offboard.OffboardResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.offboard.OffboardResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.offboard.OffboardResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_NO_SYSTEM: 2,
  RESULT_CONNECTION_ERROR: 3,
  RESULT_BUSY: 4,
  RESULT_COMMAND_DENIED: 5,
  RESULT_TIMEOUT: 6,
  RESULT_NO_SETPOINT_SET: 7,
  RESULT_FAILED: 8
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.offboard.OffboardResult.Result}
 */
proto.mavsdk.rpc.offboard.OffboardResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.offboard.OffboardResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.offboard.OffboardResult.Result} value
 * @return {!proto.mavsdk.rpc.offboard.OffboardResult} returns this
 */
proto.mavsdk.rpc.offboard.OffboardResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.offboard.OffboardResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.offboard.OffboardResult} returns this
 */
proto.mavsdk.rpc.offboard.OffboardResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.mavsdk.rpc.offboard);


// fix autocompletion
module.exports = exports;
