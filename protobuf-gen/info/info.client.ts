/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "info/info.proto" (package "mavsdk.rpc.info", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { InfoService } from "./info";
import type { FlightInformationResponse } from "./info";
import type { SubscribeFlightInformationRequest } from "./info";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetSpeedFactorResponse } from "./info";
import type { GetSpeedFactorRequest } from "./info";
import type { GetVersionResponse } from "./info";
import type { GetVersionRequest } from "./info";
import type { GetProductResponse } from "./info";
import type { GetProductRequest } from "./info";
import type { GetIdentificationResponse } from "./info";
import type { GetIdentificationRequest } from "./info";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetFlightInformationResponse } from "./info";
import type { GetFlightInformationRequest } from "./info";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Provide information about the hardware and/or software of a system.
 *
 * @generated from protobuf service mavsdk.rpc.info.InfoService
 */
export interface IInfoServiceClient {
    /**
     * Get flight information of the system.
     *
     * @generated from protobuf rpc: GetFlightInformation(mavsdk.rpc.info.GetFlightInformationRequest) returns (mavsdk.rpc.info.GetFlightInformationResponse);
     */
    getFlightInformation(input: GetFlightInformationRequest, options?: RpcOptions): UnaryCall<GetFlightInformationRequest, GetFlightInformationResponse>;
    /**
     * Get the identification of the system.
     *
     * @generated from protobuf rpc: GetIdentification(mavsdk.rpc.info.GetIdentificationRequest) returns (mavsdk.rpc.info.GetIdentificationResponse);
     */
    getIdentification(input: GetIdentificationRequest, options?: RpcOptions): UnaryCall<GetIdentificationRequest, GetIdentificationResponse>;
    /**
     * Get product information of the system.
     *
     * @generated from protobuf rpc: GetProduct(mavsdk.rpc.info.GetProductRequest) returns (mavsdk.rpc.info.GetProductResponse);
     */
    getProduct(input: GetProductRequest, options?: RpcOptions): UnaryCall<GetProductRequest, GetProductResponse>;
    /**
     * Get the version information of the system.
     *
     * @generated from protobuf rpc: GetVersion(mavsdk.rpc.info.GetVersionRequest) returns (mavsdk.rpc.info.GetVersionResponse);
     */
    getVersion(input: GetVersionRequest, options?: RpcOptions): UnaryCall<GetVersionRequest, GetVersionResponse>;
    /**
     * Get the speed factor of a simulation (with lockstep a simulation can run faster or slower than realtime).
     *
     * @generated from protobuf rpc: GetSpeedFactor(mavsdk.rpc.info.GetSpeedFactorRequest) returns (mavsdk.rpc.info.GetSpeedFactorResponse);
     */
    getSpeedFactor(input: GetSpeedFactorRequest, options?: RpcOptions): UnaryCall<GetSpeedFactorRequest, GetSpeedFactorResponse>;
    /**
     * Subscribe to 'flight information' updates.
     *
     * @generated from protobuf rpc: SubscribeFlightInformation(mavsdk.rpc.info.SubscribeFlightInformationRequest) returns (stream mavsdk.rpc.info.FlightInformationResponse);
     */
    subscribeFlightInformation(input: SubscribeFlightInformationRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFlightInformationRequest, FlightInformationResponse>;
}
/**
 * Provide information about the hardware and/or software of a system.
 *
 * @generated from protobuf service mavsdk.rpc.info.InfoService
 */
export class InfoServiceClient implements IInfoServiceClient, ServiceInfo {
    typeName = InfoService.typeName;
    methods = InfoService.methods;
    options = InfoService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get flight information of the system.
     *
     * @generated from protobuf rpc: GetFlightInformation(mavsdk.rpc.info.GetFlightInformationRequest) returns (mavsdk.rpc.info.GetFlightInformationResponse);
     */
    getFlightInformation(input: GetFlightInformationRequest, options?: RpcOptions): UnaryCall<GetFlightInformationRequest, GetFlightInformationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFlightInformationRequest, GetFlightInformationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get the identification of the system.
     *
     * @generated from protobuf rpc: GetIdentification(mavsdk.rpc.info.GetIdentificationRequest) returns (mavsdk.rpc.info.GetIdentificationResponse);
     */
    getIdentification(input: GetIdentificationRequest, options?: RpcOptions): UnaryCall<GetIdentificationRequest, GetIdentificationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetIdentificationRequest, GetIdentificationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get product information of the system.
     *
     * @generated from protobuf rpc: GetProduct(mavsdk.rpc.info.GetProductRequest) returns (mavsdk.rpc.info.GetProductResponse);
     */
    getProduct(input: GetProductRequest, options?: RpcOptions): UnaryCall<GetProductRequest, GetProductResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProductRequest, GetProductResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get the version information of the system.
     *
     * @generated from protobuf rpc: GetVersion(mavsdk.rpc.info.GetVersionRequest) returns (mavsdk.rpc.info.GetVersionResponse);
     */
    getVersion(input: GetVersionRequest, options?: RpcOptions): UnaryCall<GetVersionRequest, GetVersionResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetVersionRequest, GetVersionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get the speed factor of a simulation (with lockstep a simulation can run faster or slower than realtime).
     *
     * @generated from protobuf rpc: GetSpeedFactor(mavsdk.rpc.info.GetSpeedFactorRequest) returns (mavsdk.rpc.info.GetSpeedFactorResponse);
     */
    getSpeedFactor(input: GetSpeedFactorRequest, options?: RpcOptions): UnaryCall<GetSpeedFactorRequest, GetSpeedFactorResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSpeedFactorRequest, GetSpeedFactorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to 'flight information' updates.
     *
     * @generated from protobuf rpc: SubscribeFlightInformation(mavsdk.rpc.info.SubscribeFlightInformationRequest) returns (stream mavsdk.rpc.info.FlightInformationResponse);
     */
    subscribeFlightInformation(input: SubscribeFlightInformationRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFlightInformationRequest, FlightInformationResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeFlightInformationRequest, FlightInformationResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
