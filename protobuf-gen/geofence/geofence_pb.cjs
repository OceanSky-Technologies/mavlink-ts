/* eslint-disable */

// source: geofence/geofence.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.geofence.Circle', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.ClearGeofenceRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.ClearGeofenceResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.FenceType', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.GeofenceData', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.GeofenceResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.GeofenceResult.Result', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.Point', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.Polygon', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.UploadGeofenceRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.geofence.UploadGeofenceResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.Point.displayName = 'proto.mavsdk.rpc.geofence.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.Polygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.geofence.Polygon.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.Polygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.Polygon.displayName = 'proto.mavsdk.rpc.geofence.Polygon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.Circle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.Circle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.Circle.displayName = 'proto.mavsdk.rpc.geofence.Circle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.GeofenceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.geofence.GeofenceData.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.GeofenceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.GeofenceData.displayName = 'proto.mavsdk.rpc.geofence.GeofenceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.UploadGeofenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.UploadGeofenceRequest.displayName = 'proto.mavsdk.rpc.geofence.UploadGeofenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.UploadGeofenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.UploadGeofenceResponse.displayName = 'proto.mavsdk.rpc.geofence.UploadGeofenceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.ClearGeofenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.ClearGeofenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.ClearGeofenceRequest.displayName = 'proto.mavsdk.rpc.geofence.ClearGeofenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.ClearGeofenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.ClearGeofenceResponse.displayName = 'proto.mavsdk.rpc.geofence.ClearGeofenceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.geofence.GeofenceResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.geofence.GeofenceResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.geofence.GeofenceResult.displayName = 'proto.mavsdk.rpc.geofence.GeofenceResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitudeDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    longitudeDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.Point}
 */
proto.mavsdk.rpc.geofence.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.Point;
  return proto.mavsdk.rpc.geofence.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.Point}
 */
proto.mavsdk.rpc.geofence.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitudeDeg(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeDeg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitudeDeg();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLongitudeDeg();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double latitude_deg = 1;
 * @return {number}
 */
proto.mavsdk.rpc.geofence.Point.prototype.getLatitudeDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.geofence.Point} returns this
 */
proto.mavsdk.rpc.geofence.Point.prototype.setLatitudeDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double longitude_deg = 2;
 * @return {number}
 */
proto.mavsdk.rpc.geofence.Point.prototype.getLongitudeDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.geofence.Point} returns this
 */
proto.mavsdk.rpc.geofence.Point.prototype.setLongitudeDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.geofence.Polygon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.Polygon.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.Polygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.Polygon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.Polygon.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.mavsdk.rpc.geofence.Point.toObject, includeInstance),
    fenceType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.Polygon}
 */
proto.mavsdk.rpc.geofence.Polygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.Polygon;
  return proto.mavsdk.rpc.geofence.Polygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.Polygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.Polygon}
 */
proto.mavsdk.rpc.geofence.Polygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.geofence.Point;
      reader.readMessage(value,proto.mavsdk.rpc.geofence.Point.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 2:
      var value = /** @type {!proto.mavsdk.rpc.geofence.FenceType} */ (reader.readEnum());
      msg.setFenceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.Polygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.Polygon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.Polygon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.Polygon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mavsdk.rpc.geofence.Point.serializeBinaryToWriter
    );
  }
  f = message.getFenceType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated Point points = 1;
 * @return {!Array<!proto.mavsdk.rpc.geofence.Point>}
 */
proto.mavsdk.rpc.geofence.Polygon.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.mavsdk.rpc.geofence.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mavsdk.rpc.geofence.Point, 1));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.geofence.Point>} value
 * @return {!proto.mavsdk.rpc.geofence.Polygon} returns this
*/
proto.mavsdk.rpc.geofence.Polygon.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mavsdk.rpc.geofence.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.geofence.Point}
 */
proto.mavsdk.rpc.geofence.Polygon.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mavsdk.rpc.geofence.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.geofence.Polygon} returns this
 */
proto.mavsdk.rpc.geofence.Polygon.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};


/**
 * optional FenceType fence_type = 2;
 * @return {!proto.mavsdk.rpc.geofence.FenceType}
 */
proto.mavsdk.rpc.geofence.Polygon.prototype.getFenceType = function() {
  return /** @type {!proto.mavsdk.rpc.geofence.FenceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mavsdk.rpc.geofence.FenceType} value
 * @return {!proto.mavsdk.rpc.geofence.Polygon} returns this
 */
proto.mavsdk.rpc.geofence.Polygon.prototype.setFenceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.Circle.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.Circle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.Circle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.Circle.toObject = function(includeInstance, msg) {
  var f, obj = {
    point: (f = msg.getPoint()) && proto.mavsdk.rpc.geofence.Point.toObject(includeInstance, f),
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    fenceType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.Circle}
 */
proto.mavsdk.rpc.geofence.Circle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.Circle;
  return proto.mavsdk.rpc.geofence.Circle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.Circle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.Circle}
 */
proto.mavsdk.rpc.geofence.Circle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.geofence.Point;
      reader.readMessage(value,proto.mavsdk.rpc.geofence.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    case 3:
      var value = /** @type {!proto.mavsdk.rpc.geofence.FenceType} */ (reader.readEnum());
      msg.setFenceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.Circle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.Circle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.Circle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.Circle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.geofence.Point.serializeBinaryToWriter
    );
  }
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getFenceType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional Point point = 1;
 * @return {?proto.mavsdk.rpc.geofence.Point}
 */
proto.mavsdk.rpc.geofence.Circle.prototype.getPoint = function() {
  return /** @type{?proto.mavsdk.rpc.geofence.Point} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.geofence.Point, 1));
};


/**
 * @param {?proto.mavsdk.rpc.geofence.Point|undefined} value
 * @return {!proto.mavsdk.rpc.geofence.Circle} returns this
*/
proto.mavsdk.rpc.geofence.Circle.prototype.setPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.geofence.Circle} returns this
 */
proto.mavsdk.rpc.geofence.Circle.prototype.clearPoint = function() {
  return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.geofence.Circle.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float radius = 2;
 * @return {number}
 */
proto.mavsdk.rpc.geofence.Circle.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.geofence.Circle} returns this
 */
proto.mavsdk.rpc.geofence.Circle.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional FenceType fence_type = 3;
 * @return {!proto.mavsdk.rpc.geofence.FenceType}
 */
proto.mavsdk.rpc.geofence.Circle.prototype.getFenceType = function() {
  return /** @type {!proto.mavsdk.rpc.geofence.FenceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mavsdk.rpc.geofence.FenceType} value
 * @return {!proto.mavsdk.rpc.geofence.Circle} returns this
 */
proto.mavsdk.rpc.geofence.Circle.prototype.setFenceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.geofence.GeofenceData.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.GeofenceData.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.GeofenceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.GeofenceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.GeofenceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    polygonsList: jspb.Message.toObjectList(msg.getPolygonsList(),
    proto.mavsdk.rpc.geofence.Polygon.toObject, includeInstance),
    circlesList: jspb.Message.toObjectList(msg.getCirclesList(),
    proto.mavsdk.rpc.geofence.Circle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.GeofenceData}
 */
proto.mavsdk.rpc.geofence.GeofenceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.GeofenceData;
  return proto.mavsdk.rpc.geofence.GeofenceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.GeofenceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.GeofenceData}
 */
proto.mavsdk.rpc.geofence.GeofenceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.geofence.Polygon;
      reader.readMessage(value,proto.mavsdk.rpc.geofence.Polygon.deserializeBinaryFromReader);
      msg.addPolygons(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.geofence.Circle;
      reader.readMessage(value,proto.mavsdk.rpc.geofence.Circle.deserializeBinaryFromReader);
      msg.addCircles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.GeofenceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.GeofenceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.GeofenceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.GeofenceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPolygonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mavsdk.rpc.geofence.Polygon.serializeBinaryToWriter
    );
  }
  f = message.getCirclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mavsdk.rpc.geofence.Circle.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Polygon polygons = 1;
 * @return {!Array<!proto.mavsdk.rpc.geofence.Polygon>}
 */
proto.mavsdk.rpc.geofence.GeofenceData.prototype.getPolygonsList = function() {
  return /** @type{!Array<!proto.mavsdk.rpc.geofence.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mavsdk.rpc.geofence.Polygon, 1));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.geofence.Polygon>} value
 * @return {!proto.mavsdk.rpc.geofence.GeofenceData} returns this
*/
proto.mavsdk.rpc.geofence.GeofenceData.prototype.setPolygonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mavsdk.rpc.geofence.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.geofence.Polygon}
 */
proto.mavsdk.rpc.geofence.GeofenceData.prototype.addPolygons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mavsdk.rpc.geofence.Polygon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.geofence.GeofenceData} returns this
 */
proto.mavsdk.rpc.geofence.GeofenceData.prototype.clearPolygonsList = function() {
  return this.setPolygonsList([]);
};


/**
 * repeated Circle circles = 2;
 * @return {!Array<!proto.mavsdk.rpc.geofence.Circle>}
 */
proto.mavsdk.rpc.geofence.GeofenceData.prototype.getCirclesList = function() {
  return /** @type{!Array<!proto.mavsdk.rpc.geofence.Circle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mavsdk.rpc.geofence.Circle, 2));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.geofence.Circle>} value
 * @return {!proto.mavsdk.rpc.geofence.GeofenceData} returns this
*/
proto.mavsdk.rpc.geofence.GeofenceData.prototype.setCirclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mavsdk.rpc.geofence.Circle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.geofence.Circle}
 */
proto.mavsdk.rpc.geofence.GeofenceData.prototype.addCircles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mavsdk.rpc.geofence.Circle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.geofence.GeofenceData} returns this
 */
proto.mavsdk.rpc.geofence.GeofenceData.prototype.clearCirclesList = function() {
  return this.setCirclesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.UploadGeofenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.UploadGeofenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    geofenceData: (f = msg.getGeofenceData()) && proto.mavsdk.rpc.geofence.GeofenceData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.UploadGeofenceRequest}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.UploadGeofenceRequest;
  return proto.mavsdk.rpc.geofence.UploadGeofenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.UploadGeofenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.UploadGeofenceRequest}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.geofence.GeofenceData;
      reader.readMessage(value,proto.mavsdk.rpc.geofence.GeofenceData.deserializeBinaryFromReader);
      msg.setGeofenceData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.UploadGeofenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.UploadGeofenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeofenceData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.geofence.GeofenceData.serializeBinaryToWriter
    );
  }
};


/**
 * optional GeofenceData geofence_data = 1;
 * @return {?proto.mavsdk.rpc.geofence.GeofenceData}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.prototype.getGeofenceData = function() {
  return /** @type{?proto.mavsdk.rpc.geofence.GeofenceData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.geofence.GeofenceData, 1));
};


/**
 * @param {?proto.mavsdk.rpc.geofence.GeofenceData|undefined} value
 * @return {!proto.mavsdk.rpc.geofence.UploadGeofenceRequest} returns this
*/
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.prototype.setGeofenceData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.geofence.UploadGeofenceRequest} returns this
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.prototype.clearGeofenceData = function() {
  return this.setGeofenceData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceRequest.prototype.hasGeofenceData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.UploadGeofenceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.UploadGeofenceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    geofenceResult: (f = msg.getGeofenceResult()) && proto.mavsdk.rpc.geofence.GeofenceResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.UploadGeofenceResponse}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.UploadGeofenceResponse;
  return proto.mavsdk.rpc.geofence.UploadGeofenceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.UploadGeofenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.UploadGeofenceResponse}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.geofence.GeofenceResult;
      reader.readMessage(value,proto.mavsdk.rpc.geofence.GeofenceResult.deserializeBinaryFromReader);
      msg.setGeofenceResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.UploadGeofenceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.UploadGeofenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeofenceResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.geofence.GeofenceResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional GeofenceResult geofence_result = 1;
 * @return {?proto.mavsdk.rpc.geofence.GeofenceResult}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.prototype.getGeofenceResult = function() {
  return /** @type{?proto.mavsdk.rpc.geofence.GeofenceResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.geofence.GeofenceResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.geofence.GeofenceResult|undefined} value
 * @return {!proto.mavsdk.rpc.geofence.UploadGeofenceResponse} returns this
*/
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.prototype.setGeofenceResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.geofence.UploadGeofenceResponse} returns this
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.prototype.clearGeofenceResult = function() {
  return this.setGeofenceResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.geofence.UploadGeofenceResponse.prototype.hasGeofenceResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.ClearGeofenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.ClearGeofenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.ClearGeofenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.ClearGeofenceRequest}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.ClearGeofenceRequest;
  return proto.mavsdk.rpc.geofence.ClearGeofenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.ClearGeofenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.ClearGeofenceRequest}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.ClearGeofenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.ClearGeofenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.ClearGeofenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.ClearGeofenceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.ClearGeofenceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    geofenceResult: (f = msg.getGeofenceResult()) && proto.mavsdk.rpc.geofence.GeofenceResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.ClearGeofenceResponse}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.ClearGeofenceResponse;
  return proto.mavsdk.rpc.geofence.ClearGeofenceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.ClearGeofenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.ClearGeofenceResponse}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.geofence.GeofenceResult;
      reader.readMessage(value,proto.mavsdk.rpc.geofence.GeofenceResult.deserializeBinaryFromReader);
      msg.setGeofenceResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.ClearGeofenceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.ClearGeofenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeofenceResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.geofence.GeofenceResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional GeofenceResult geofence_result = 1;
 * @return {?proto.mavsdk.rpc.geofence.GeofenceResult}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.prototype.getGeofenceResult = function() {
  return /** @type{?proto.mavsdk.rpc.geofence.GeofenceResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.geofence.GeofenceResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.geofence.GeofenceResult|undefined} value
 * @return {!proto.mavsdk.rpc.geofence.ClearGeofenceResponse} returns this
*/
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.prototype.setGeofenceResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.geofence.ClearGeofenceResponse} returns this
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.prototype.clearGeofenceResult = function() {
  return this.setGeofenceResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.geofence.ClearGeofenceResponse.prototype.hasGeofenceResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.geofence.GeofenceResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.geofence.GeofenceResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.geofence.GeofenceResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.GeofenceResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.geofence.GeofenceResult}
 */
proto.mavsdk.rpc.geofence.GeofenceResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.geofence.GeofenceResult;
  return proto.mavsdk.rpc.geofence.GeofenceResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.geofence.GeofenceResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.geofence.GeofenceResult}
 */
proto.mavsdk.rpc.geofence.GeofenceResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.geofence.GeofenceResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.geofence.GeofenceResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.geofence.GeofenceResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.geofence.GeofenceResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.geofence.GeofenceResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.geofence.GeofenceResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_ERROR: 2,
  RESULT_TOO_MANY_GEOFENCE_ITEMS: 3,
  RESULT_BUSY: 4,
  RESULT_TIMEOUT: 5,
  RESULT_INVALID_ARGUMENT: 6,
  RESULT_NO_SYSTEM: 7
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.geofence.GeofenceResult.Result}
 */
proto.mavsdk.rpc.geofence.GeofenceResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.geofence.GeofenceResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.geofence.GeofenceResult.Result} value
 * @return {!proto.mavsdk.rpc.geofence.GeofenceResult} returns this
 */
proto.mavsdk.rpc.geofence.GeofenceResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.geofence.GeofenceResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.geofence.GeofenceResult} returns this
 */
proto.mavsdk.rpc.geofence.GeofenceResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.geofence.FenceType = {
  FENCE_TYPE_INCLUSION: 0,
  FENCE_TYPE_EXCLUSION: 1
};

goog.object.extend(exports, proto.mavsdk.rpc.geofence);


// fix autocompletion
module.exports = exports;
