/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "geofence/geofence.proto" (package "mavsdk.rpc.geofence", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GeofenceService } from "./geofence";
import type { ClearGeofenceResponse } from "./geofence";
import type { ClearGeofenceRequest } from "./geofence";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UploadGeofenceResponse } from "./geofence";
import type { UploadGeofenceRequest } from "./geofence";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Enable setting a geofence.
 *
 * @generated from protobuf service mavsdk.rpc.geofence.GeofenceService
 */
export interface IGeofenceServiceClient {
    /**
     *
     * Upload geofences.
     *
     * Polygon and Circular geofences are uploaded to a drone. Once uploaded, the geofence will remain
     * on the drone even if a connection is lost.
     *
     * @generated from protobuf rpc: UploadGeofence(mavsdk.rpc.geofence.UploadGeofenceRequest) returns (mavsdk.rpc.geofence.UploadGeofenceResponse);
     */
    uploadGeofence(input: UploadGeofenceRequest, options?: RpcOptions): UnaryCall<UploadGeofenceRequest, UploadGeofenceResponse>;
    /**
     *
     * Clear all geofences saved on the vehicle.
     *
     * @generated from protobuf rpc: ClearGeofence(mavsdk.rpc.geofence.ClearGeofenceRequest) returns (mavsdk.rpc.geofence.ClearGeofenceResponse);
     */
    clearGeofence(input: ClearGeofenceRequest, options?: RpcOptions): UnaryCall<ClearGeofenceRequest, ClearGeofenceResponse>;
}
/**
 * Enable setting a geofence.
 *
 * @generated from protobuf service mavsdk.rpc.geofence.GeofenceService
 */
export class GeofenceServiceClient implements IGeofenceServiceClient, ServiceInfo {
    typeName = GeofenceService.typeName;
    methods = GeofenceService.methods;
    options = GeofenceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *
     * Upload geofences.
     *
     * Polygon and Circular geofences are uploaded to a drone. Once uploaded, the geofence will remain
     * on the drone even if a connection is lost.
     *
     * @generated from protobuf rpc: UploadGeofence(mavsdk.rpc.geofence.UploadGeofenceRequest) returns (mavsdk.rpc.geofence.UploadGeofenceResponse);
     */
    uploadGeofence(input: UploadGeofenceRequest, options?: RpcOptions): UnaryCall<UploadGeofenceRequest, UploadGeofenceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadGeofenceRequest, UploadGeofenceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Clear all geofences saved on the vehicle.
     *
     * @generated from protobuf rpc: ClearGeofence(mavsdk.rpc.geofence.ClearGeofenceRequest) returns (mavsdk.rpc.geofence.ClearGeofenceResponse);
     */
    clearGeofence(input: ClearGeofenceRequest, options?: RpcOptions): UnaryCall<ClearGeofenceRequest, ClearGeofenceResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClearGeofenceRequest, ClearGeofenceResponse>("unary", this._transport, method, opt, input);
    }
}
