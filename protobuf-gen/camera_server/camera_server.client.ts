/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "camera_server/camera_server.proto" (package "mavsdk.rpc.camera_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CameraServerService } from "./camera_server";
import type { RespondTrackingOffCommandResponse } from "./camera_server";
import type { RespondTrackingOffCommandRequest } from "./camera_server";
import type { RespondTrackingRectangleCommandResponse } from "./camera_server";
import type { RespondTrackingRectangleCommandRequest } from "./camera_server";
import type { RespondTrackingPointCommandResponse } from "./camera_server";
import type { RespondTrackingPointCommandRequest } from "./camera_server";
import type { TrackingOffCommandResponse } from "./camera_server";
import type { SubscribeTrackingOffCommandRequest } from "./camera_server";
import type { TrackingRectangleCommandResponse } from "./camera_server";
import type { SubscribeTrackingRectangleCommandRequest } from "./camera_server";
import type { TrackingPointCommandResponse } from "./camera_server";
import type { SubscribeTrackingPointCommandRequest } from "./camera_server";
import type { SetTrackingOffStatusResponse } from "./camera_server";
import type { SetTrackingOffStatusRequest } from "./camera_server";
import type { SetTrackingRectangleStatusResponse } from "./camera_server";
import type { SetTrackingRectangleStatusRequest } from "./camera_server";
import type { RespondZoomRangeResponse } from "./camera_server";
import type { RespondZoomRangeRequest } from "./camera_server";
import type { ZoomRangeResponse } from "./camera_server";
import type { SubscribeZoomRangeRequest } from "./camera_server";
import type { RespondZoomStopResponse } from "./camera_server";
import type { RespondZoomStopRequest } from "./camera_server";
import type { ZoomStopResponse } from "./camera_server";
import type { SubscribeZoomStopRequest } from "./camera_server";
import type { RespondZoomOutStartResponse } from "./camera_server";
import type { RespondZoomOutStartRequest } from "./camera_server";
import type { ZoomOutStartResponse } from "./camera_server";
import type { SubscribeZoomOutStartRequest } from "./camera_server";
import type { RespondZoomInStartResponse } from "./camera_server";
import type { RespondZoomInStartRequest } from "./camera_server";
import type { ZoomInStartResponse } from "./camera_server";
import type { SubscribeZoomInStartRequest } from "./camera_server";
import type { RespondResetSettingsResponse } from "./camera_server";
import type { RespondResetSettingsRequest } from "./camera_server";
import type { ResetSettingsResponse } from "./camera_server";
import type { SubscribeResetSettingsRequest } from "./camera_server";
import type { RespondFormatStorageResponse } from "./camera_server";
import type { RespondFormatStorageRequest } from "./camera_server";
import type { FormatStorageResponse } from "./camera_server";
import type { SubscribeFormatStorageRequest } from "./camera_server";
import type { RespondCaptureStatusResponse } from "./camera_server";
import type { RespondCaptureStatusRequest } from "./camera_server";
import type { CaptureStatusResponse } from "./camera_server";
import type { SubscribeCaptureStatusRequest } from "./camera_server";
import type { RespondStorageInformationResponse } from "./camera_server";
import type { RespondStorageInformationRequest } from "./camera_server";
import type { StorageInformationResponse } from "./camera_server";
import type { SubscribeStorageInformationRequest } from "./camera_server";
import type { RespondSetModeResponse } from "./camera_server";
import type { RespondSetModeRequest } from "./camera_server";
import type { SetModeResponse } from "./camera_server";
import type { SubscribeSetModeRequest } from "./camera_server";
import type { RespondStopVideoStreamingResponse } from "./camera_server";
import type { RespondStopVideoStreamingRequest } from "./camera_server";
import type { StopVideoStreamingResponse } from "./camera_server";
import type { SubscribeStopVideoStreamingRequest } from "./camera_server";
import type { RespondStartVideoStreamingResponse } from "./camera_server";
import type { RespondStartVideoStreamingRequest } from "./camera_server";
import type { StartVideoStreamingResponse } from "./camera_server";
import type { SubscribeStartVideoStreamingRequest } from "./camera_server";
import type { RespondStopVideoResponse } from "./camera_server";
import type { RespondStopVideoRequest } from "./camera_server";
import type { StopVideoResponse } from "./camera_server";
import type { SubscribeStopVideoRequest } from "./camera_server";
import type { RespondStartVideoResponse } from "./camera_server";
import type { RespondStartVideoRequest } from "./camera_server";
import type { StartVideoResponse } from "./camera_server";
import type { SubscribeStartVideoRequest } from "./camera_server";
import type { RespondTakePhotoResponse } from "./camera_server";
import type { RespondTakePhotoRequest } from "./camera_server";
import type { TakePhotoResponse } from "./camera_server";
import type { SubscribeTakePhotoRequest } from "./camera_server";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SetInProgressResponse } from "./camera_server";
import type { SetInProgressRequest } from "./camera_server";
import type { SetVideoStreamingResponse } from "./camera_server";
import type { SetVideoStreamingRequest } from "./camera_server";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SetInformationResponse } from "./camera_server";
import type { SetInformationRequest } from "./camera_server";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Provides handling of camera interface
 *
 * @generated from protobuf service mavsdk.rpc.camera_server.CameraServerService
 */
export interface ICameraServerServiceClient {
    /**
     * Sets the camera information. This must be called as soon as the camera server is created.
     *
     * @generated from protobuf rpc: SetInformation(mavsdk.rpc.camera_server.SetInformationRequest) returns (mavsdk.rpc.camera_server.SetInformationResponse);
     */
    setInformation(input: SetInformationRequest, options?: RpcOptions): UnaryCall<SetInformationRequest, SetInformationResponse>;
    /**
     * Sets video streaming settings.
     *
     * @generated from protobuf rpc: SetVideoStreaming(mavsdk.rpc.camera_server.SetVideoStreamingRequest) returns (mavsdk.rpc.camera_server.SetVideoStreamingResponse);
     */
    setVideoStreaming(input: SetVideoStreamingRequest, options?: RpcOptions): UnaryCall<SetVideoStreamingRequest, SetVideoStreamingResponse>;
    /**
     * Sets image capture in progress status flags. This should be set to true when the camera is busy taking a photo and false when it is done.
     *
     * @generated from protobuf rpc: SetInProgress(mavsdk.rpc.camera_server.SetInProgressRequest) returns (mavsdk.rpc.camera_server.SetInProgressResponse);
     */
    setInProgress(input: SetInProgressRequest, options?: RpcOptions): UnaryCall<SetInProgressRequest, SetInProgressResponse>;
    /**
     * Subscribe to image capture requests. Each request received should respond to using RespondTakePhoto.
     *
     * @generated from protobuf rpc: SubscribeTakePhoto(mavsdk.rpc.camera_server.SubscribeTakePhotoRequest) returns (stream mavsdk.rpc.camera_server.TakePhotoResponse);
     */
    subscribeTakePhoto(input: SubscribeTakePhotoRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTakePhotoRequest, TakePhotoResponse>;
    /**
     * Respond to an image capture request from SubscribeTakePhoto.
     *
     * @generated from protobuf rpc: RespondTakePhoto(mavsdk.rpc.camera_server.RespondTakePhotoRequest) returns (mavsdk.rpc.camera_server.RespondTakePhotoResponse);
     */
    respondTakePhoto(input: RespondTakePhotoRequest, options?: RpcOptions): UnaryCall<RespondTakePhotoRequest, RespondTakePhotoResponse>;
    /**
     * Subscribe to start video requests. Each request received should respond to using RespondStartVideo
     *
     * @generated from protobuf rpc: SubscribeStartVideo(mavsdk.rpc.camera_server.SubscribeStartVideoRequest) returns (stream mavsdk.rpc.camera_server.StartVideoResponse);
     */
    subscribeStartVideo(input: SubscribeStartVideoRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStartVideoRequest, StartVideoResponse>;
    /**
     * Subscribe to stop video requests. Each request received should respond using StopVideoResponse
     *
     * @generated from protobuf rpc: RespondStartVideo(mavsdk.rpc.camera_server.RespondStartVideoRequest) returns (mavsdk.rpc.camera_server.RespondStartVideoResponse);
     */
    respondStartVideo(input: RespondStartVideoRequest, options?: RpcOptions): UnaryCall<RespondStartVideoRequest, RespondStartVideoResponse>;
    /**
     * Subscribe to stop video requests. Each request received should response to using RespondStopVideo
     *
     * @generated from protobuf rpc: SubscribeStopVideo(mavsdk.rpc.camera_server.SubscribeStopVideoRequest) returns (stream mavsdk.rpc.camera_server.StopVideoResponse);
     */
    subscribeStopVideo(input: SubscribeStopVideoRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStopVideoRequest, StopVideoResponse>;
    /**
     * Respond to stop video request from SubscribeStopVideo.
     *
     * @generated from protobuf rpc: RespondStopVideo(mavsdk.rpc.camera_server.RespondStopVideoRequest) returns (mavsdk.rpc.camera_server.RespondStopVideoResponse);
     */
    respondStopVideo(input: RespondStopVideoRequest, options?: RpcOptions): UnaryCall<RespondStopVideoRequest, RespondStopVideoResponse>;
    /**
     * Subscribe to start video streaming requests. Each request received should response to using RespondStartVideoStreaming
     *
     * @generated from protobuf rpc: SubscribeStartVideoStreaming(mavsdk.rpc.camera_server.SubscribeStartVideoStreamingRequest) returns (stream mavsdk.rpc.camera_server.StartVideoStreamingResponse);
     */
    subscribeStartVideoStreaming(input: SubscribeStartVideoStreamingRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStartVideoStreamingRequest, StartVideoStreamingResponse>;
    /**
     * Respond to start video streaming from SubscribeStartVideoStreaming.
     *
     * @generated from protobuf rpc: RespondStartVideoStreaming(mavsdk.rpc.camera_server.RespondStartVideoStreamingRequest) returns (mavsdk.rpc.camera_server.RespondStartVideoStreamingResponse);
     */
    respondStartVideoStreaming(input: RespondStartVideoStreamingRequest, options?: RpcOptions): UnaryCall<RespondStartVideoStreamingRequest, RespondStartVideoStreamingResponse>;
    /**
     * Subscribe to stop video streaming requests. Each request received should response to using RespondStopVideoStreaming
     *
     * @generated from protobuf rpc: SubscribeStopVideoStreaming(mavsdk.rpc.camera_server.SubscribeStopVideoStreamingRequest) returns (stream mavsdk.rpc.camera_server.StopVideoStreamingResponse);
     */
    subscribeStopVideoStreaming(input: SubscribeStopVideoStreamingRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStopVideoStreamingRequest, StopVideoStreamingResponse>;
    /**
     * Respond to stop video streaming from SubscribeStopVideoStreaming.
     *
     * @generated from protobuf rpc: RespondStopVideoStreaming(mavsdk.rpc.camera_server.RespondStopVideoStreamingRequest) returns (mavsdk.rpc.camera_server.RespondStopVideoStreamingResponse);
     */
    respondStopVideoStreaming(input: RespondStopVideoStreamingRequest, options?: RpcOptions): UnaryCall<RespondStopVideoStreamingRequest, RespondStopVideoStreamingResponse>;
    /**
     * Subscribe to set camera mode requests. Each request received should response to using RespondSetMode
     *
     * @generated from protobuf rpc: SubscribeSetMode(mavsdk.rpc.camera_server.SubscribeSetModeRequest) returns (stream mavsdk.rpc.camera_server.SetModeResponse);
     */
    subscribeSetMode(input: SubscribeSetModeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeSetModeRequest, SetModeResponse>;
    /**
     * Respond to set camera mode from SubscribeSetMode.
     *
     * @generated from protobuf rpc: RespondSetMode(mavsdk.rpc.camera_server.RespondSetModeRequest) returns (mavsdk.rpc.camera_server.RespondSetModeResponse);
     */
    respondSetMode(input: RespondSetModeRequest, options?: RpcOptions): UnaryCall<RespondSetModeRequest, RespondSetModeResponse>;
    /**
     * Subscribe to camera storage information requests. Each request received should response to using RespondStorageInformation
     *
     * @generated from protobuf rpc: SubscribeStorageInformation(mavsdk.rpc.camera_server.SubscribeStorageInformationRequest) returns (stream mavsdk.rpc.camera_server.StorageInformationResponse);
     */
    subscribeStorageInformation(input: SubscribeStorageInformationRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStorageInformationRequest, StorageInformationResponse>;
    /**
     * Respond to camera storage information from SubscribeStorageInformation.
     *
     * @generated from protobuf rpc: RespondStorageInformation(mavsdk.rpc.camera_server.RespondStorageInformationRequest) returns (mavsdk.rpc.camera_server.RespondStorageInformationResponse);
     */
    respondStorageInformation(input: RespondStorageInformationRequest, options?: RpcOptions): UnaryCall<RespondStorageInformationRequest, RespondStorageInformationResponse>;
    /**
     * Subscribe to camera capture status requests. Each request received should response to using RespondCaptureStatus
     *
     * @generated from protobuf rpc: SubscribeCaptureStatus(mavsdk.rpc.camera_server.SubscribeCaptureStatusRequest) returns (stream mavsdk.rpc.camera_server.CaptureStatusResponse);
     */
    subscribeCaptureStatus(input: SubscribeCaptureStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeCaptureStatusRequest, CaptureStatusResponse>;
    /**
     * Respond to camera capture status from SubscribeCaptureStatus.
     *
     * @generated from protobuf rpc: RespondCaptureStatus(mavsdk.rpc.camera_server.RespondCaptureStatusRequest) returns (mavsdk.rpc.camera_server.RespondCaptureStatusResponse);
     */
    respondCaptureStatus(input: RespondCaptureStatusRequest, options?: RpcOptions): UnaryCall<RespondCaptureStatusRequest, RespondCaptureStatusResponse>;
    /**
     * Subscribe to format storage requests. Each request received should response to using RespondFormatStorage
     *
     * @generated from protobuf rpc: SubscribeFormatStorage(mavsdk.rpc.camera_server.SubscribeFormatStorageRequest) returns (stream mavsdk.rpc.camera_server.FormatStorageResponse);
     */
    subscribeFormatStorage(input: SubscribeFormatStorageRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFormatStorageRequest, FormatStorageResponse>;
    /**
     * Respond to format storage from SubscribeFormatStorage.
     *
     * @generated from protobuf rpc: RespondFormatStorage(mavsdk.rpc.camera_server.RespondFormatStorageRequest) returns (mavsdk.rpc.camera_server.RespondFormatStorageResponse);
     */
    respondFormatStorage(input: RespondFormatStorageRequest, options?: RpcOptions): UnaryCall<RespondFormatStorageRequest, RespondFormatStorageResponse>;
    /**
     * Subscribe to reset settings requests. Each request received should response to using RespondResetSettings
     *
     * @generated from protobuf rpc: SubscribeResetSettings(mavsdk.rpc.camera_server.SubscribeResetSettingsRequest) returns (stream mavsdk.rpc.camera_server.ResetSettingsResponse);
     */
    subscribeResetSettings(input: SubscribeResetSettingsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeResetSettingsRequest, ResetSettingsResponse>;
    /**
     * Respond to reset settings from SubscribeResetSettings.
     *
     * @generated from protobuf rpc: RespondResetSettings(mavsdk.rpc.camera_server.RespondResetSettingsRequest) returns (mavsdk.rpc.camera_server.RespondResetSettingsResponse);
     */
    respondResetSettings(input: RespondResetSettingsRequest, options?: RpcOptions): UnaryCall<RespondResetSettingsRequest, RespondResetSettingsResponse>;
    /**
     * Subscribe to zoom in start command
     *
     * @generated from protobuf rpc: SubscribeZoomInStart(mavsdk.rpc.camera_server.SubscribeZoomInStartRequest) returns (stream mavsdk.rpc.camera_server.ZoomInStartResponse);
     */
    subscribeZoomInStart(input: SubscribeZoomInStartRequest, options?: RpcOptions): ServerStreamingCall<SubscribeZoomInStartRequest, ZoomInStartResponse>;
    /**
     * Respond to zoom in start.
     *
     * @generated from protobuf rpc: RespondZoomInStart(mavsdk.rpc.camera_server.RespondZoomInStartRequest) returns (mavsdk.rpc.camera_server.RespondZoomInStartResponse);
     */
    respondZoomInStart(input: RespondZoomInStartRequest, options?: RpcOptions): UnaryCall<RespondZoomInStartRequest, RespondZoomInStartResponse>;
    /**
     * Subscribe to zoom out start command
     *
     * @generated from protobuf rpc: SubscribeZoomOutStart(mavsdk.rpc.camera_server.SubscribeZoomOutStartRequest) returns (stream mavsdk.rpc.camera_server.ZoomOutStartResponse);
     */
    subscribeZoomOutStart(input: SubscribeZoomOutStartRequest, options?: RpcOptions): ServerStreamingCall<SubscribeZoomOutStartRequest, ZoomOutStartResponse>;
    /**
     * Respond to zoom out start.
     *
     * @generated from protobuf rpc: RespondZoomOutStart(mavsdk.rpc.camera_server.RespondZoomOutStartRequest) returns (mavsdk.rpc.camera_server.RespondZoomOutStartResponse);
     */
    respondZoomOutStart(input: RespondZoomOutStartRequest, options?: RpcOptions): UnaryCall<RespondZoomOutStartRequest, RespondZoomOutStartResponse>;
    /**
     * Subscribe to zoom stop command
     *
     * @generated from protobuf rpc: SubscribeZoomStop(mavsdk.rpc.camera_server.SubscribeZoomStopRequest) returns (stream mavsdk.rpc.camera_server.ZoomStopResponse);
     */
    subscribeZoomStop(input: SubscribeZoomStopRequest, options?: RpcOptions): ServerStreamingCall<SubscribeZoomStopRequest, ZoomStopResponse>;
    /**
     * Respond to zoom stop.
     *
     * @generated from protobuf rpc: RespondZoomStop(mavsdk.rpc.camera_server.RespondZoomStopRequest) returns (mavsdk.rpc.camera_server.RespondZoomStopResponse);
     */
    respondZoomStop(input: RespondZoomStopRequest, options?: RpcOptions): UnaryCall<RespondZoomStopRequest, RespondZoomStopResponse>;
    /**
     * Subscribe to zoom range command
     *
     * @generated from protobuf rpc: SubscribeZoomRange(mavsdk.rpc.camera_server.SubscribeZoomRangeRequest) returns (stream mavsdk.rpc.camera_server.ZoomRangeResponse);
     */
    subscribeZoomRange(input: SubscribeZoomRangeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeZoomRangeRequest, ZoomRangeResponse>;
    /**
     * Respond to zoom range.
     *
     * @generated from protobuf rpc: RespondZoomRange(mavsdk.rpc.camera_server.RespondZoomRangeRequest) returns (mavsdk.rpc.camera_server.RespondZoomRangeResponse);
     */
    respondZoomRange(input: RespondZoomRangeRequest, options?: RpcOptions): UnaryCall<RespondZoomRangeRequest, RespondZoomRangeResponse>;
    /**
     * Set/update the current rectangle tracking status.
     *
     * @generated from protobuf rpc: SetTrackingRectangleStatus(mavsdk.rpc.camera_server.SetTrackingRectangleStatusRequest) returns (mavsdk.rpc.camera_server.SetTrackingRectangleStatusResponse);
     */
    setTrackingRectangleStatus(input: SetTrackingRectangleStatusRequest, options?: RpcOptions): UnaryCall<SetTrackingRectangleStatusRequest, SetTrackingRectangleStatusResponse>;
    /**
     * Set the current tracking status to off.
     *
     * @generated from protobuf rpc: SetTrackingOffStatus(mavsdk.rpc.camera_server.SetTrackingOffStatusRequest) returns (mavsdk.rpc.camera_server.SetTrackingOffStatusResponse);
     */
    setTrackingOffStatus(input: SetTrackingOffStatusRequest, options?: RpcOptions): UnaryCall<SetTrackingOffStatusRequest, SetTrackingOffStatusResponse>;
    /**
     * Subscribe to incoming tracking point command.
     *
     * @generated from protobuf rpc: SubscribeTrackingPointCommand(mavsdk.rpc.camera_server.SubscribeTrackingPointCommandRequest) returns (stream mavsdk.rpc.camera_server.TrackingPointCommandResponse);
     */
    subscribeTrackingPointCommand(input: SubscribeTrackingPointCommandRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTrackingPointCommandRequest, TrackingPointCommandResponse>;
    /**
     * Subscribe to incoming tracking rectangle command.
     *
     * @generated from protobuf rpc: SubscribeTrackingRectangleCommand(mavsdk.rpc.camera_server.SubscribeTrackingRectangleCommandRequest) returns (stream mavsdk.rpc.camera_server.TrackingRectangleCommandResponse);
     */
    subscribeTrackingRectangleCommand(input: SubscribeTrackingRectangleCommandRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTrackingRectangleCommandRequest, TrackingRectangleCommandResponse>;
    /**
     * Subscribe to incoming tracking off command.
     *
     * @generated from protobuf rpc: SubscribeTrackingOffCommand(mavsdk.rpc.camera_server.SubscribeTrackingOffCommandRequest) returns (stream mavsdk.rpc.camera_server.TrackingOffCommandResponse);
     */
    subscribeTrackingOffCommand(input: SubscribeTrackingOffCommandRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTrackingOffCommandRequest, TrackingOffCommandResponse>;
    /**
     * Respond to an incoming tracking point command.
     *
     * @generated from protobuf rpc: RespondTrackingPointCommand(mavsdk.rpc.camera_server.RespondTrackingPointCommandRequest) returns (mavsdk.rpc.camera_server.RespondTrackingPointCommandResponse);
     */
    respondTrackingPointCommand(input: RespondTrackingPointCommandRequest, options?: RpcOptions): UnaryCall<RespondTrackingPointCommandRequest, RespondTrackingPointCommandResponse>;
    /**
     * Respond to an incoming tracking rectangle command.
     *
     * @generated from protobuf rpc: RespondTrackingRectangleCommand(mavsdk.rpc.camera_server.RespondTrackingRectangleCommandRequest) returns (mavsdk.rpc.camera_server.RespondTrackingRectangleCommandResponse);
     */
    respondTrackingRectangleCommand(input: RespondTrackingRectangleCommandRequest, options?: RpcOptions): UnaryCall<RespondTrackingRectangleCommandRequest, RespondTrackingRectangleCommandResponse>;
    /**
     * Respond to an incoming tracking off command.
     *
     * @generated from protobuf rpc: RespondTrackingOffCommand(mavsdk.rpc.camera_server.RespondTrackingOffCommandRequest) returns (mavsdk.rpc.camera_server.RespondTrackingOffCommandResponse);
     */
    respondTrackingOffCommand(input: RespondTrackingOffCommandRequest, options?: RpcOptions): UnaryCall<RespondTrackingOffCommandRequest, RespondTrackingOffCommandResponse>;
}
/**
 * Provides handling of camera interface
 *
 * @generated from protobuf service mavsdk.rpc.camera_server.CameraServerService
 */
export class CameraServerServiceClient implements ICameraServerServiceClient, ServiceInfo {
    typeName = CameraServerService.typeName;
    methods = CameraServerService.methods;
    options = CameraServerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Sets the camera information. This must be called as soon as the camera server is created.
     *
     * @generated from protobuf rpc: SetInformation(mavsdk.rpc.camera_server.SetInformationRequest) returns (mavsdk.rpc.camera_server.SetInformationResponse);
     */
    setInformation(input: SetInformationRequest, options?: RpcOptions): UnaryCall<SetInformationRequest, SetInformationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetInformationRequest, SetInformationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Sets video streaming settings.
     *
     * @generated from protobuf rpc: SetVideoStreaming(mavsdk.rpc.camera_server.SetVideoStreamingRequest) returns (mavsdk.rpc.camera_server.SetVideoStreamingResponse);
     */
    setVideoStreaming(input: SetVideoStreamingRequest, options?: RpcOptions): UnaryCall<SetVideoStreamingRequest, SetVideoStreamingResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetVideoStreamingRequest, SetVideoStreamingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Sets image capture in progress status flags. This should be set to true when the camera is busy taking a photo and false when it is done.
     *
     * @generated from protobuf rpc: SetInProgress(mavsdk.rpc.camera_server.SetInProgressRequest) returns (mavsdk.rpc.camera_server.SetInProgressResponse);
     */
    setInProgress(input: SetInProgressRequest, options?: RpcOptions): UnaryCall<SetInProgressRequest, SetInProgressResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetInProgressRequest, SetInProgressResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to image capture requests. Each request received should respond to using RespondTakePhoto.
     *
     * @generated from protobuf rpc: SubscribeTakePhoto(mavsdk.rpc.camera_server.SubscribeTakePhotoRequest) returns (stream mavsdk.rpc.camera_server.TakePhotoResponse);
     */
    subscribeTakePhoto(input: SubscribeTakePhotoRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTakePhotoRequest, TakePhotoResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTakePhotoRequest, TakePhotoResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to an image capture request from SubscribeTakePhoto.
     *
     * @generated from protobuf rpc: RespondTakePhoto(mavsdk.rpc.camera_server.RespondTakePhotoRequest) returns (mavsdk.rpc.camera_server.RespondTakePhotoResponse);
     */
    respondTakePhoto(input: RespondTakePhotoRequest, options?: RpcOptions): UnaryCall<RespondTakePhotoRequest, RespondTakePhotoResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondTakePhotoRequest, RespondTakePhotoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to start video requests. Each request received should respond to using RespondStartVideo
     *
     * @generated from protobuf rpc: SubscribeStartVideo(mavsdk.rpc.camera_server.SubscribeStartVideoRequest) returns (stream mavsdk.rpc.camera_server.StartVideoResponse);
     */
    subscribeStartVideo(input: SubscribeStartVideoRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStartVideoRequest, StartVideoResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeStartVideoRequest, StartVideoResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to stop video requests. Each request received should respond using StopVideoResponse
     *
     * @generated from protobuf rpc: RespondStartVideo(mavsdk.rpc.camera_server.RespondStartVideoRequest) returns (mavsdk.rpc.camera_server.RespondStartVideoResponse);
     */
    respondStartVideo(input: RespondStartVideoRequest, options?: RpcOptions): UnaryCall<RespondStartVideoRequest, RespondStartVideoResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondStartVideoRequest, RespondStartVideoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to stop video requests. Each request received should response to using RespondStopVideo
     *
     * @generated from protobuf rpc: SubscribeStopVideo(mavsdk.rpc.camera_server.SubscribeStopVideoRequest) returns (stream mavsdk.rpc.camera_server.StopVideoResponse);
     */
    subscribeStopVideo(input: SubscribeStopVideoRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStopVideoRequest, StopVideoResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeStopVideoRequest, StopVideoResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to stop video request from SubscribeStopVideo.
     *
     * @generated from protobuf rpc: RespondStopVideo(mavsdk.rpc.camera_server.RespondStopVideoRequest) returns (mavsdk.rpc.camera_server.RespondStopVideoResponse);
     */
    respondStopVideo(input: RespondStopVideoRequest, options?: RpcOptions): UnaryCall<RespondStopVideoRequest, RespondStopVideoResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondStopVideoRequest, RespondStopVideoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to start video streaming requests. Each request received should response to using RespondStartVideoStreaming
     *
     * @generated from protobuf rpc: SubscribeStartVideoStreaming(mavsdk.rpc.camera_server.SubscribeStartVideoStreamingRequest) returns (stream mavsdk.rpc.camera_server.StartVideoStreamingResponse);
     */
    subscribeStartVideoStreaming(input: SubscribeStartVideoStreamingRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStartVideoStreamingRequest, StartVideoStreamingResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeStartVideoStreamingRequest, StartVideoStreamingResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to start video streaming from SubscribeStartVideoStreaming.
     *
     * @generated from protobuf rpc: RespondStartVideoStreaming(mavsdk.rpc.camera_server.RespondStartVideoStreamingRequest) returns (mavsdk.rpc.camera_server.RespondStartVideoStreamingResponse);
     */
    respondStartVideoStreaming(input: RespondStartVideoStreamingRequest, options?: RpcOptions): UnaryCall<RespondStartVideoStreamingRequest, RespondStartVideoStreamingResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondStartVideoStreamingRequest, RespondStartVideoStreamingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to stop video streaming requests. Each request received should response to using RespondStopVideoStreaming
     *
     * @generated from protobuf rpc: SubscribeStopVideoStreaming(mavsdk.rpc.camera_server.SubscribeStopVideoStreamingRequest) returns (stream mavsdk.rpc.camera_server.StopVideoStreamingResponse);
     */
    subscribeStopVideoStreaming(input: SubscribeStopVideoStreamingRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStopVideoStreamingRequest, StopVideoStreamingResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeStopVideoStreamingRequest, StopVideoStreamingResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to stop video streaming from SubscribeStopVideoStreaming.
     *
     * @generated from protobuf rpc: RespondStopVideoStreaming(mavsdk.rpc.camera_server.RespondStopVideoStreamingRequest) returns (mavsdk.rpc.camera_server.RespondStopVideoStreamingResponse);
     */
    respondStopVideoStreaming(input: RespondStopVideoStreamingRequest, options?: RpcOptions): UnaryCall<RespondStopVideoStreamingRequest, RespondStopVideoStreamingResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondStopVideoStreamingRequest, RespondStopVideoStreamingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to set camera mode requests. Each request received should response to using RespondSetMode
     *
     * @generated from protobuf rpc: SubscribeSetMode(mavsdk.rpc.camera_server.SubscribeSetModeRequest) returns (stream mavsdk.rpc.camera_server.SetModeResponse);
     */
    subscribeSetMode(input: SubscribeSetModeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeSetModeRequest, SetModeResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeSetModeRequest, SetModeResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to set camera mode from SubscribeSetMode.
     *
     * @generated from protobuf rpc: RespondSetMode(mavsdk.rpc.camera_server.RespondSetModeRequest) returns (mavsdk.rpc.camera_server.RespondSetModeResponse);
     */
    respondSetMode(input: RespondSetModeRequest, options?: RpcOptions): UnaryCall<RespondSetModeRequest, RespondSetModeResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondSetModeRequest, RespondSetModeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to camera storage information requests. Each request received should response to using RespondStorageInformation
     *
     * @generated from protobuf rpc: SubscribeStorageInformation(mavsdk.rpc.camera_server.SubscribeStorageInformationRequest) returns (stream mavsdk.rpc.camera_server.StorageInformationResponse);
     */
    subscribeStorageInformation(input: SubscribeStorageInformationRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStorageInformationRequest, StorageInformationResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeStorageInformationRequest, StorageInformationResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to camera storage information from SubscribeStorageInformation.
     *
     * @generated from protobuf rpc: RespondStorageInformation(mavsdk.rpc.camera_server.RespondStorageInformationRequest) returns (mavsdk.rpc.camera_server.RespondStorageInformationResponse);
     */
    respondStorageInformation(input: RespondStorageInformationRequest, options?: RpcOptions): UnaryCall<RespondStorageInformationRequest, RespondStorageInformationResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondStorageInformationRequest, RespondStorageInformationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to camera capture status requests. Each request received should response to using RespondCaptureStatus
     *
     * @generated from protobuf rpc: SubscribeCaptureStatus(mavsdk.rpc.camera_server.SubscribeCaptureStatusRequest) returns (stream mavsdk.rpc.camera_server.CaptureStatusResponse);
     */
    subscribeCaptureStatus(input: SubscribeCaptureStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeCaptureStatusRequest, CaptureStatusResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeCaptureStatusRequest, CaptureStatusResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to camera capture status from SubscribeCaptureStatus.
     *
     * @generated from protobuf rpc: RespondCaptureStatus(mavsdk.rpc.camera_server.RespondCaptureStatusRequest) returns (mavsdk.rpc.camera_server.RespondCaptureStatusResponse);
     */
    respondCaptureStatus(input: RespondCaptureStatusRequest, options?: RpcOptions): UnaryCall<RespondCaptureStatusRequest, RespondCaptureStatusResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondCaptureStatusRequest, RespondCaptureStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to format storage requests. Each request received should response to using RespondFormatStorage
     *
     * @generated from protobuf rpc: SubscribeFormatStorage(mavsdk.rpc.camera_server.SubscribeFormatStorageRequest) returns (stream mavsdk.rpc.camera_server.FormatStorageResponse);
     */
    subscribeFormatStorage(input: SubscribeFormatStorageRequest, options?: RpcOptions): ServerStreamingCall<SubscribeFormatStorageRequest, FormatStorageResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeFormatStorageRequest, FormatStorageResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to format storage from SubscribeFormatStorage.
     *
     * @generated from protobuf rpc: RespondFormatStorage(mavsdk.rpc.camera_server.RespondFormatStorageRequest) returns (mavsdk.rpc.camera_server.RespondFormatStorageResponse);
     */
    respondFormatStorage(input: RespondFormatStorageRequest, options?: RpcOptions): UnaryCall<RespondFormatStorageRequest, RespondFormatStorageResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondFormatStorageRequest, RespondFormatStorageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to reset settings requests. Each request received should response to using RespondResetSettings
     *
     * @generated from protobuf rpc: SubscribeResetSettings(mavsdk.rpc.camera_server.SubscribeResetSettingsRequest) returns (stream mavsdk.rpc.camera_server.ResetSettingsResponse);
     */
    subscribeResetSettings(input: SubscribeResetSettingsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeResetSettingsRequest, ResetSettingsResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeResetSettingsRequest, ResetSettingsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to reset settings from SubscribeResetSettings.
     *
     * @generated from protobuf rpc: RespondResetSettings(mavsdk.rpc.camera_server.RespondResetSettingsRequest) returns (mavsdk.rpc.camera_server.RespondResetSettingsResponse);
     */
    respondResetSettings(input: RespondResetSettingsRequest, options?: RpcOptions): UnaryCall<RespondResetSettingsRequest, RespondResetSettingsResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondResetSettingsRequest, RespondResetSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to zoom in start command
     *
     * @generated from protobuf rpc: SubscribeZoomInStart(mavsdk.rpc.camera_server.SubscribeZoomInStartRequest) returns (stream mavsdk.rpc.camera_server.ZoomInStartResponse);
     */
    subscribeZoomInStart(input: SubscribeZoomInStartRequest, options?: RpcOptions): ServerStreamingCall<SubscribeZoomInStartRequest, ZoomInStartResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeZoomInStartRequest, ZoomInStartResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to zoom in start.
     *
     * @generated from protobuf rpc: RespondZoomInStart(mavsdk.rpc.camera_server.RespondZoomInStartRequest) returns (mavsdk.rpc.camera_server.RespondZoomInStartResponse);
     */
    respondZoomInStart(input: RespondZoomInStartRequest, options?: RpcOptions): UnaryCall<RespondZoomInStartRequest, RespondZoomInStartResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondZoomInStartRequest, RespondZoomInStartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to zoom out start command
     *
     * @generated from protobuf rpc: SubscribeZoomOutStart(mavsdk.rpc.camera_server.SubscribeZoomOutStartRequest) returns (stream mavsdk.rpc.camera_server.ZoomOutStartResponse);
     */
    subscribeZoomOutStart(input: SubscribeZoomOutStartRequest, options?: RpcOptions): ServerStreamingCall<SubscribeZoomOutStartRequest, ZoomOutStartResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeZoomOutStartRequest, ZoomOutStartResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to zoom out start.
     *
     * @generated from protobuf rpc: RespondZoomOutStart(mavsdk.rpc.camera_server.RespondZoomOutStartRequest) returns (mavsdk.rpc.camera_server.RespondZoomOutStartResponse);
     */
    respondZoomOutStart(input: RespondZoomOutStartRequest, options?: RpcOptions): UnaryCall<RespondZoomOutStartRequest, RespondZoomOutStartResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondZoomOutStartRequest, RespondZoomOutStartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to zoom stop command
     *
     * @generated from protobuf rpc: SubscribeZoomStop(mavsdk.rpc.camera_server.SubscribeZoomStopRequest) returns (stream mavsdk.rpc.camera_server.ZoomStopResponse);
     */
    subscribeZoomStop(input: SubscribeZoomStopRequest, options?: RpcOptions): ServerStreamingCall<SubscribeZoomStopRequest, ZoomStopResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeZoomStopRequest, ZoomStopResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to zoom stop.
     *
     * @generated from protobuf rpc: RespondZoomStop(mavsdk.rpc.camera_server.RespondZoomStopRequest) returns (mavsdk.rpc.camera_server.RespondZoomStopResponse);
     */
    respondZoomStop(input: RespondZoomStopRequest, options?: RpcOptions): UnaryCall<RespondZoomStopRequest, RespondZoomStopResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondZoomStopRequest, RespondZoomStopResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to zoom range command
     *
     * @generated from protobuf rpc: SubscribeZoomRange(mavsdk.rpc.camera_server.SubscribeZoomRangeRequest) returns (stream mavsdk.rpc.camera_server.ZoomRangeResponse);
     */
    subscribeZoomRange(input: SubscribeZoomRangeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeZoomRangeRequest, ZoomRangeResponse> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeZoomRangeRequest, ZoomRangeResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to zoom range.
     *
     * @generated from protobuf rpc: RespondZoomRange(mavsdk.rpc.camera_server.RespondZoomRangeRequest) returns (mavsdk.rpc.camera_server.RespondZoomRangeResponse);
     */
    respondZoomRange(input: RespondZoomRangeRequest, options?: RpcOptions): UnaryCall<RespondZoomRangeRequest, RespondZoomRangeResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondZoomRangeRequest, RespondZoomRangeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set/update the current rectangle tracking status.
     *
     * @generated from protobuf rpc: SetTrackingRectangleStatus(mavsdk.rpc.camera_server.SetTrackingRectangleStatusRequest) returns (mavsdk.rpc.camera_server.SetTrackingRectangleStatusResponse);
     */
    setTrackingRectangleStatus(input: SetTrackingRectangleStatusRequest, options?: RpcOptions): UnaryCall<SetTrackingRectangleStatusRequest, SetTrackingRectangleStatusResponse> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetTrackingRectangleStatusRequest, SetTrackingRectangleStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set the current tracking status to off.
     *
     * @generated from protobuf rpc: SetTrackingOffStatus(mavsdk.rpc.camera_server.SetTrackingOffStatusRequest) returns (mavsdk.rpc.camera_server.SetTrackingOffStatusResponse);
     */
    setTrackingOffStatus(input: SetTrackingOffStatusRequest, options?: RpcOptions): UnaryCall<SetTrackingOffStatusRequest, SetTrackingOffStatusResponse> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetTrackingOffStatusRequest, SetTrackingOffStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to incoming tracking point command.
     *
     * @generated from protobuf rpc: SubscribeTrackingPointCommand(mavsdk.rpc.camera_server.SubscribeTrackingPointCommandRequest) returns (stream mavsdk.rpc.camera_server.TrackingPointCommandResponse);
     */
    subscribeTrackingPointCommand(input: SubscribeTrackingPointCommandRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTrackingPointCommandRequest, TrackingPointCommandResponse> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTrackingPointCommandRequest, TrackingPointCommandResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to incoming tracking rectangle command.
     *
     * @generated from protobuf rpc: SubscribeTrackingRectangleCommand(mavsdk.rpc.camera_server.SubscribeTrackingRectangleCommandRequest) returns (stream mavsdk.rpc.camera_server.TrackingRectangleCommandResponse);
     */
    subscribeTrackingRectangleCommand(input: SubscribeTrackingRectangleCommandRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTrackingRectangleCommandRequest, TrackingRectangleCommandResponse> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTrackingRectangleCommandRequest, TrackingRectangleCommandResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to incoming tracking off command.
     *
     * @generated from protobuf rpc: SubscribeTrackingOffCommand(mavsdk.rpc.camera_server.SubscribeTrackingOffCommandRequest) returns (stream mavsdk.rpc.camera_server.TrackingOffCommandResponse);
     */
    subscribeTrackingOffCommand(input: SubscribeTrackingOffCommandRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTrackingOffCommandRequest, TrackingOffCommandResponse> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTrackingOffCommandRequest, TrackingOffCommandResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Respond to an incoming tracking point command.
     *
     * @generated from protobuf rpc: RespondTrackingPointCommand(mavsdk.rpc.camera_server.RespondTrackingPointCommandRequest) returns (mavsdk.rpc.camera_server.RespondTrackingPointCommandResponse);
     */
    respondTrackingPointCommand(input: RespondTrackingPointCommandRequest, options?: RpcOptions): UnaryCall<RespondTrackingPointCommandRequest, RespondTrackingPointCommandResponse> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondTrackingPointCommandRequest, RespondTrackingPointCommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Respond to an incoming tracking rectangle command.
     *
     * @generated from protobuf rpc: RespondTrackingRectangleCommand(mavsdk.rpc.camera_server.RespondTrackingRectangleCommandRequest) returns (mavsdk.rpc.camera_server.RespondTrackingRectangleCommandResponse);
     */
    respondTrackingRectangleCommand(input: RespondTrackingRectangleCommandRequest, options?: RpcOptions): UnaryCall<RespondTrackingRectangleCommandRequest, RespondTrackingRectangleCommandResponse> {
        const method = this.methods[37], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondTrackingRectangleCommandRequest, RespondTrackingRectangleCommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Respond to an incoming tracking off command.
     *
     * @generated from protobuf rpc: RespondTrackingOffCommand(mavsdk.rpc.camera_server.RespondTrackingOffCommandRequest) returns (mavsdk.rpc.camera_server.RespondTrackingOffCommandResponse);
     */
    respondTrackingOffCommand(input: RespondTrackingOffCommandRequest, options?: RpcOptions): UnaryCall<RespondTrackingOffCommandRequest, RespondTrackingOffCommandResponse> {
        const method = this.methods[38], opt = this._transport.mergeOptions(options);
        return stackIntercept<RespondTrackingOffCommandRequest, RespondTrackingOffCommandResponse>("unary", this._transport, method, opt, input);
    }
}
