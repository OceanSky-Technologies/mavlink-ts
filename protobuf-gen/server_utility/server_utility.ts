/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "server_utility/server_utility.proto" (package "mavsdk.rpc.server_utility", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.server_utility.SendStatusTextRequest
 */
export interface SendStatusTextRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.server_utility.StatusTextType type = 1;
     */
    type: StatusTextType; // The text to send
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string; // Text message
}
/**
 * @generated from protobuf message mavsdk.rpc.server_utility.SendStatusTextResponse
 */
export interface SendStatusTextResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.server_utility.ServerUtilityResult server_utility_result = 1;
     */
    serverUtilityResult?: ServerUtilityResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.server_utility.ServerUtilityResult
 */
export interface ServerUtilityResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.server_utility.ServerUtilityResult.Result result = 1;
     */
    result: ServerUtilityResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for server utility requests.
 *
 * @generated from protobuf enum mavsdk.rpc.server_utility.ServerUtilityResult.Result
 */
export enum ServerUtilityResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 2;
     */
    NO_SYSTEM = 2,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 3;
     */
    CONNECTION_ERROR = 3,
    /**
     * Invalid argument
     *
     * @generated from protobuf enum value: RESULT_INVALID_ARGUMENT = 4;
     */
    INVALID_ARGUMENT = 4
}
/**
 * Status types.
 *
 * @generated from protobuf enum mavsdk.rpc.server_utility.StatusTextType
 */
export enum StatusTextType {
    /**
     * Debug
     *
     * @generated from protobuf enum value: STATUS_TEXT_TYPE_DEBUG = 0;
     */
    DEBUG = 0,
    /**
     * Information
     *
     * @generated from protobuf enum value: STATUS_TEXT_TYPE_INFO = 1;
     */
    INFO = 1,
    /**
     * Notice
     *
     * @generated from protobuf enum value: STATUS_TEXT_TYPE_NOTICE = 2;
     */
    NOTICE = 2,
    /**
     * Warning
     *
     * @generated from protobuf enum value: STATUS_TEXT_TYPE_WARNING = 3;
     */
    WARNING = 3,
    /**
     * Error
     *
     * @generated from protobuf enum value: STATUS_TEXT_TYPE_ERROR = 4;
     */
    ERROR = 4,
    /**
     * Critical
     *
     * @generated from protobuf enum value: STATUS_TEXT_TYPE_CRITICAL = 5;
     */
    CRITICAL = 5,
    /**
     * Alert
     *
     * @generated from protobuf enum value: STATUS_TEXT_TYPE_ALERT = 6;
     */
    ALERT = 6,
    /**
     * Emergency
     *
     * @generated from protobuf enum value: STATUS_TEXT_TYPE_EMERGENCY = 7;
     */
    EMERGENCY = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class SendStatusTextRequest$Type extends MessageType<SendStatusTextRequest> {
    constructor() {
        super("mavsdk.rpc.server_utility.SendStatusTextRequest", [
            { no: 1, name: "type", kind: "enum", T: () => ["mavsdk.rpc.server_utility.StatusTextType", StatusTextType, "STATUS_TEXT_TYPE_"] },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendStatusTextRequest>): SendStatusTextRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<SendStatusTextRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendStatusTextRequest): SendStatusTextRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.server_utility.StatusTextType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendStatusTextRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.server_utility.StatusTextType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.server_utility.SendStatusTextRequest
 */
export const SendStatusTextRequest = new SendStatusTextRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendStatusTextResponse$Type extends MessageType<SendStatusTextResponse> {
    constructor() {
        super("mavsdk.rpc.server_utility.SendStatusTextResponse", [
            { no: 1, name: "server_utility_result", kind: "message", T: () => ServerUtilityResult }
        ]);
    }
    create(value?: PartialMessage<SendStatusTextResponse>): SendStatusTextResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendStatusTextResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendStatusTextResponse): SendStatusTextResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.server_utility.ServerUtilityResult server_utility_result */ 1:
                    message.serverUtilityResult = ServerUtilityResult.internalBinaryRead(reader, reader.uint32(), options, message.serverUtilityResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendStatusTextResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.server_utility.ServerUtilityResult server_utility_result = 1; */
        if (message.serverUtilityResult)
            ServerUtilityResult.internalBinaryWrite(message.serverUtilityResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.server_utility.SendStatusTextResponse
 */
export const SendStatusTextResponse = new SendStatusTextResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerUtilityResult$Type extends MessageType<ServerUtilityResult> {
    constructor() {
        super("mavsdk.rpc.server_utility.ServerUtilityResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.server_utility.ServerUtilityResult.Result", ServerUtilityResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServerUtilityResult>): ServerUtilityResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<ServerUtilityResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerUtilityResult): ServerUtilityResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.server_utility.ServerUtilityResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerUtilityResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.server_utility.ServerUtilityResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.server_utility.ServerUtilityResult
 */
export const ServerUtilityResult = new ServerUtilityResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.server_utility.ServerUtilityService
 */
export const ServerUtilityService = new ServiceType("mavsdk.rpc.server_utility.ServerUtilityService", [
    { name: "SendStatusText", options: { "mavsdk.options.async_type": "SYNC" }, I: SendStatusTextRequest, O: SendStatusTextResponse }
]);
