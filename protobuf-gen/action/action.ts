/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "action/action.proto" (package "mavsdk.rpc.action", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.action.ArmRequest
 */
export interface ArmRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.ArmResponse
 */
export interface ArmResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.ArmForceRequest
 */
export interface ArmForceRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.ArmForceResponse
 */
export interface ArmForceResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.DisarmRequest
 */
export interface DisarmRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.DisarmResponse
 */
export interface DisarmResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.TakeoffRequest
 */
export interface TakeoffRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.TakeoffResponse
 */
export interface TakeoffResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.LandRequest
 */
export interface LandRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.LandResponse
 */
export interface LandResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.RebootRequest
 */
export interface RebootRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.RebootResponse
 */
export interface RebootResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.ShutdownRequest
 */
export interface ShutdownRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.ShutdownResponse
 */
export interface ShutdownResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.TerminateRequest
 */
export interface TerminateRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.TerminateResponse
 */
export interface TerminateResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.KillRequest
 */
export interface KillRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.KillResponse
 */
export interface KillResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.ReturnToLaunchRequest
 */
export interface ReturnToLaunchRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.ReturnToLaunchResponse
 */
export interface ReturnToLaunchResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.GotoLocationRequest
 */
export interface GotoLocationRequest {
    /**
     * @generated from protobuf field: double latitude_deg = 1;
     */
    latitudeDeg: number; // Latitude (in degrees)
    /**
     * @generated from protobuf field: double longitude_deg = 2;
     */
    longitudeDeg: number; // Longitude (in degrees)
    /**
     * @generated from protobuf field: float absolute_altitude_m = 3;
     */
    absoluteAltitudeM: number; // Altitude AMSL (in meters)
    /**
     * @generated from protobuf field: float yaw_deg = 4;
     */
    yawDeg: number; // Yaw angle (in degrees, frame is NED, 0 is North, positive is clockwise)
}
/**
 * @generated from protobuf message mavsdk.rpc.action.GotoLocationResponse
 */
export interface GotoLocationResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.DoOrbitRequest
 */
export interface DoOrbitRequest {
    /**
     * @generated from protobuf field: float radius_m = 1;
     */
    radiusM: number; // Radius of circle (in meters)
    /**
     * @generated from protobuf field: float velocity_ms = 2;
     */
    velocityMs: number; // Tangential velocity (in m/s)
    /**
     * @generated from protobuf field: mavsdk.rpc.action.OrbitYawBehavior yaw_behavior = 3;
     */
    yawBehavior: OrbitYawBehavior; // Yaw behavior of vehicle (ORBIT_YAW_BEHAVIOUR)
    /**
     * @generated from protobuf field: double latitude_deg = 5;
     */
    latitudeDeg: number; // Center point latitude in degrees. NAN: use current latitude for center
    /**
     * @generated from protobuf field: double longitude_deg = 6;
     */
    longitudeDeg: number; // Center point longitude in degrees. NAN: use current longitude for center
    /**
     * @generated from protobuf field: double absolute_altitude_m = 7;
     */
    absoluteAltitudeM: number; // Center point altitude in meters. NAN: use current altitude for center
}
/**
 * @generated from protobuf message mavsdk.rpc.action.DoOrbitResponse
 */
export interface DoOrbitResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.HoldRequest
 */
export interface HoldRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.HoldResponse
 */
export interface HoldResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetActuatorRequest
 */
export interface SetActuatorRequest {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number; // Index of actuator (starting with 1)
    /**
     * @generated from protobuf field: float value = 2;
     */
    value: number; // Value to set the actuator to (normalized from [-1..1])
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetActuatorResponse
 */
export interface SetActuatorResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.TransitionToFixedwingRequest
 */
export interface TransitionToFixedwingRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.TransitionToFixedwingResponse
 */
export interface TransitionToFixedwingResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.TransitionToMulticopterRequest
 */
export interface TransitionToMulticopterRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.TransitionToMulticopterResponse
 */
export interface TransitionToMulticopterResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.GetTakeoffAltitudeRequest
 */
export interface GetTakeoffAltitudeRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.GetTakeoffAltitudeResponse
 */
export interface GetTakeoffAltitudeResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
    /**
     * @generated from protobuf field: float altitude = 2;
     */
    altitude: number; // Takeoff altitude relative to ground/takeoff location (in meters)
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetTakeoffAltitudeRequest
 */
export interface SetTakeoffAltitudeRequest {
    /**
     * @generated from protobuf field: float altitude = 1;
     */
    altitude: number; // Takeoff altitude relative to ground/takeoff location (in meters)
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetTakeoffAltitudeResponse
 */
export interface SetTakeoffAltitudeResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.GetMaximumSpeedRequest
 */
export interface GetMaximumSpeedRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.GetMaximumSpeedResponse
 */
export interface GetMaximumSpeedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
    /**
     * @generated from protobuf field: float speed = 2;
     */
    speed: number; // Maximum speed (in metres/second)
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetMaximumSpeedRequest
 */
export interface SetMaximumSpeedRequest {
    /**
     * @generated from protobuf field: float speed = 1;
     */
    speed: number; // Maximum speed (in metres/second)
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetMaximumSpeedResponse
 */
export interface SetMaximumSpeedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.GetReturnToLaunchAltitudeRequest
 */
export interface GetReturnToLaunchAltitudeRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse
 */
export interface GetReturnToLaunchAltitudeResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
    /**
     * @generated from protobuf field: float relative_altitude_m = 2;
     */
    relativeAltitudeM: number; // Return altitude relative to takeoff location (in meters)
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest
 */
export interface SetReturnToLaunchAltitudeRequest {
    /**
     * @generated from protobuf field: float relative_altitude_m = 1;
     */
    relativeAltitudeM: number; // Return altitude relative to takeoff location (in meters)
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse
 */
export interface SetReturnToLaunchAltitudeResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetCurrentSpeedRequest
 */
export interface SetCurrentSpeedRequest {
    /**
     * @generated from protobuf field: float speed_m_s = 1;
     */
    speedMS: number; // Speed in meters/second
}
/**
 * @generated from protobuf message mavsdk.rpc.action.SetCurrentSpeedResponse
 */
export interface SetCurrentSpeedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult action_result = 1;
     */
    actionResult?: ActionResult;
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.action.ActionResult
 */
export interface ActionResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.action.ActionResult.Result result = 1;
     */
    result: ActionResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for action requests.
 *
 * @generated from protobuf enum mavsdk.rpc.action.ActionResult.Result
 */
export enum ActionResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request was successful
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 2;
     */
    NO_SYSTEM = 2,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 3;
     */
    CONNECTION_ERROR = 3,
    /**
     * Vehicle is busy
     *
     * @generated from protobuf enum value: RESULT_BUSY = 4;
     */
    BUSY = 4,
    /**
     * Command refused by vehicle
     *
     * @generated from protobuf enum value: RESULT_COMMAND_DENIED = 5;
     */
    COMMAND_DENIED = 5,
    /**
     * Command refused because landed state is unknown
     *
     * @generated from protobuf enum value: RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6;
     */
    COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
    /**
     * Command refused because vehicle not landed
     *
     * @generated from protobuf enum value: RESULT_COMMAND_DENIED_NOT_LANDED = 7;
     */
    COMMAND_DENIED_NOT_LANDED = 7,
    /**
     * Request timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 8;
     */
    TIMEOUT = 8,
    /**
     * Hybrid/VTOL transition support is unknown
     *
     * @generated from protobuf enum value: RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN = 9;
     */
    VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
    /**
     * Vehicle does not support hybrid/VTOL transitions
     *
     * @generated from protobuf enum value: RESULT_NO_VTOL_TRANSITION_SUPPORT = 10;
     */
    NO_VTOL_TRANSITION_SUPPORT = 10,
    /**
     * Error getting or setting parameter
     *
     * @generated from protobuf enum value: RESULT_PARAMETER_ERROR = 11;
     */
    PARAMETER_ERROR = 11,
    /**
     * Action not supported
     *
     * @generated from protobuf enum value: RESULT_UNSUPPORTED = 12;
     */
    UNSUPPORTED = 12,
    /**
     * Action failed
     *
     * @generated from protobuf enum value: RESULT_FAILED = 13;
     */
    FAILED = 13,
    /**
     * Invalid argument
     *
     * @generated from protobuf enum value: RESULT_INVALID_ARGUMENT = 14;
     */
    INVALID_ARGUMENT = 14
}
/**
 * Yaw behaviour during orbit flight.
 *
 * @generated from protobuf enum mavsdk.rpc.action.OrbitYawBehavior
 */
export enum OrbitYawBehavior {
    /**
     * Vehicle front points to the center (default)
     *
     * @generated from protobuf enum value: ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TO_CIRCLE_CENTER = 0;
     */
    HOLD_FRONT_TO_CIRCLE_CENTER = 0,
    /**
     * Vehicle front holds heading when message received
     *
     * @generated from protobuf enum value: ORBIT_YAW_BEHAVIOR_HOLD_INITIAL_HEADING = 1;
     */
    HOLD_INITIAL_HEADING = 1,
    /**
     * Yaw uncontrolled
     *
     * @generated from protobuf enum value: ORBIT_YAW_BEHAVIOR_UNCONTROLLED = 2;
     */
    UNCONTROLLED = 2,
    /**
     * Vehicle front follows flight path (tangential to circle)
     *
     * @generated from protobuf enum value: ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TANGENT_TO_CIRCLE = 3;
     */
    HOLD_FRONT_TANGENT_TO_CIRCLE = 3,
    /**
     * Yaw controlled by RC input
     *
     * @generated from protobuf enum value: ORBIT_YAW_BEHAVIOR_RC_CONTROLLED = 4;
     */
    RC_CONTROLLED = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class ArmRequest$Type extends MessageType<ArmRequest> {
    constructor() {
        super("mavsdk.rpc.action.ArmRequest", []);
    }
    create(value?: PartialMessage<ArmRequest>): ArmRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ArmRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmRequest): ArmRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ArmRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ArmRequest
 */
export const ArmRequest = new ArmRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArmResponse$Type extends MessageType<ArmResponse> {
    constructor() {
        super("mavsdk.rpc.action.ArmResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<ArmResponse>): ArmResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ArmResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmResponse): ArmResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArmResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ArmResponse
 */
export const ArmResponse = new ArmResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArmForceRequest$Type extends MessageType<ArmForceRequest> {
    constructor() {
        super("mavsdk.rpc.action.ArmForceRequest", []);
    }
    create(value?: PartialMessage<ArmForceRequest>): ArmForceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ArmForceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmForceRequest): ArmForceRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ArmForceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ArmForceRequest
 */
export const ArmForceRequest = new ArmForceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArmForceResponse$Type extends MessageType<ArmForceResponse> {
    constructor() {
        super("mavsdk.rpc.action.ArmForceResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<ArmForceResponse>): ArmForceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ArmForceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmForceResponse): ArmForceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArmForceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ArmForceResponse
 */
export const ArmForceResponse = new ArmForceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisarmRequest$Type extends MessageType<DisarmRequest> {
    constructor() {
        super("mavsdk.rpc.action.DisarmRequest", []);
    }
    create(value?: PartialMessage<DisarmRequest>): DisarmRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DisarmRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisarmRequest): DisarmRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DisarmRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.DisarmRequest
 */
export const DisarmRequest = new DisarmRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisarmResponse$Type extends MessageType<DisarmResponse> {
    constructor() {
        super("mavsdk.rpc.action.DisarmResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<DisarmResponse>): DisarmResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DisarmResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisarmResponse): DisarmResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisarmResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.DisarmResponse
 */
export const DisarmResponse = new DisarmResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeoffRequest$Type extends MessageType<TakeoffRequest> {
    constructor() {
        super("mavsdk.rpc.action.TakeoffRequest", []);
    }
    create(value?: PartialMessage<TakeoffRequest>): TakeoffRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TakeoffRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeoffRequest): TakeoffRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TakeoffRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.TakeoffRequest
 */
export const TakeoffRequest = new TakeoffRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeoffResponse$Type extends MessageType<TakeoffResponse> {
    constructor() {
        super("mavsdk.rpc.action.TakeoffResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<TakeoffResponse>): TakeoffResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TakeoffResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeoffResponse): TakeoffResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeoffResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.TakeoffResponse
 */
export const TakeoffResponse = new TakeoffResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LandRequest$Type extends MessageType<LandRequest> {
    constructor() {
        super("mavsdk.rpc.action.LandRequest", []);
    }
    create(value?: PartialMessage<LandRequest>): LandRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LandRequest): LandRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.LandRequest
 */
export const LandRequest = new LandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LandResponse$Type extends MessageType<LandResponse> {
    constructor() {
        super("mavsdk.rpc.action.LandResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<LandResponse>): LandResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LandResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LandResponse): LandResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LandResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.LandResponse
 */
export const LandResponse = new LandResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RebootRequest$Type extends MessageType<RebootRequest> {
    constructor() {
        super("mavsdk.rpc.action.RebootRequest", []);
    }
    create(value?: PartialMessage<RebootRequest>): RebootRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RebootRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RebootRequest): RebootRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RebootRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.RebootRequest
 */
export const RebootRequest = new RebootRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RebootResponse$Type extends MessageType<RebootResponse> {
    constructor() {
        super("mavsdk.rpc.action.RebootResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<RebootResponse>): RebootResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RebootResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RebootResponse): RebootResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RebootResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.RebootResponse
 */
export const RebootResponse = new RebootResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShutdownRequest$Type extends MessageType<ShutdownRequest> {
    constructor() {
        super("mavsdk.rpc.action.ShutdownRequest", []);
    }
    create(value?: PartialMessage<ShutdownRequest>): ShutdownRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ShutdownRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShutdownRequest): ShutdownRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ShutdownRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ShutdownRequest
 */
export const ShutdownRequest = new ShutdownRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShutdownResponse$Type extends MessageType<ShutdownResponse> {
    constructor() {
        super("mavsdk.rpc.action.ShutdownResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<ShutdownResponse>): ShutdownResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ShutdownResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShutdownResponse): ShutdownResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShutdownResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ShutdownResponse
 */
export const ShutdownResponse = new ShutdownResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TerminateRequest$Type extends MessageType<TerminateRequest> {
    constructor() {
        super("mavsdk.rpc.action.TerminateRequest", []);
    }
    create(value?: PartialMessage<TerminateRequest>): TerminateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TerminateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TerminateRequest): TerminateRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TerminateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.TerminateRequest
 */
export const TerminateRequest = new TerminateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TerminateResponse$Type extends MessageType<TerminateResponse> {
    constructor() {
        super("mavsdk.rpc.action.TerminateResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<TerminateResponse>): TerminateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TerminateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TerminateResponse): TerminateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TerminateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.TerminateResponse
 */
export const TerminateResponse = new TerminateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KillRequest$Type extends MessageType<KillRequest> {
    constructor() {
        super("mavsdk.rpc.action.KillRequest", []);
    }
    create(value?: PartialMessage<KillRequest>): KillRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<KillRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KillRequest): KillRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: KillRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.KillRequest
 */
export const KillRequest = new KillRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KillResponse$Type extends MessageType<KillResponse> {
    constructor() {
        super("mavsdk.rpc.action.KillResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<KillResponse>): KillResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<KillResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KillResponse): KillResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KillResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.KillResponse
 */
export const KillResponse = new KillResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReturnToLaunchRequest$Type extends MessageType<ReturnToLaunchRequest> {
    constructor() {
        super("mavsdk.rpc.action.ReturnToLaunchRequest", []);
    }
    create(value?: PartialMessage<ReturnToLaunchRequest>): ReturnToLaunchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReturnToLaunchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReturnToLaunchRequest): ReturnToLaunchRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReturnToLaunchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ReturnToLaunchRequest
 */
export const ReturnToLaunchRequest = new ReturnToLaunchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReturnToLaunchResponse$Type extends MessageType<ReturnToLaunchResponse> {
    constructor() {
        super("mavsdk.rpc.action.ReturnToLaunchResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<ReturnToLaunchResponse>): ReturnToLaunchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReturnToLaunchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReturnToLaunchResponse): ReturnToLaunchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReturnToLaunchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ReturnToLaunchResponse
 */
export const ReturnToLaunchResponse = new ReturnToLaunchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GotoLocationRequest$Type extends MessageType<GotoLocationRequest> {
    constructor() {
        super("mavsdk.rpc.action.GotoLocationRequest", [
            { no: 1, name: "latitude_deg", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "longitude_deg", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "absolute_altitude_m", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "yaw_deg", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<GotoLocationRequest>): GotoLocationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.latitudeDeg = 0;
        message.longitudeDeg = 0;
        message.absoluteAltitudeM = 0;
        message.yawDeg = 0;
        if (value !== undefined)
            reflectionMergePartial<GotoLocationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GotoLocationRequest): GotoLocationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double latitude_deg */ 1:
                    message.latitudeDeg = reader.double();
                    break;
                case /* double longitude_deg */ 2:
                    message.longitudeDeg = reader.double();
                    break;
                case /* float absolute_altitude_m */ 3:
                    message.absoluteAltitudeM = reader.float();
                    break;
                case /* float yaw_deg */ 4:
                    message.yawDeg = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GotoLocationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double latitude_deg = 1; */
        if (message.latitudeDeg !== 0)
            writer.tag(1, WireType.Bit64).double(message.latitudeDeg);
        /* double longitude_deg = 2; */
        if (message.longitudeDeg !== 0)
            writer.tag(2, WireType.Bit64).double(message.longitudeDeg);
        /* float absolute_altitude_m = 3; */
        if (message.absoluteAltitudeM !== 0)
            writer.tag(3, WireType.Bit32).float(message.absoluteAltitudeM);
        /* float yaw_deg = 4; */
        if (message.yawDeg !== 0)
            writer.tag(4, WireType.Bit32).float(message.yawDeg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.GotoLocationRequest
 */
export const GotoLocationRequest = new GotoLocationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GotoLocationResponse$Type extends MessageType<GotoLocationResponse> {
    constructor() {
        super("mavsdk.rpc.action.GotoLocationResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<GotoLocationResponse>): GotoLocationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GotoLocationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GotoLocationResponse): GotoLocationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GotoLocationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.GotoLocationResponse
 */
export const GotoLocationResponse = new GotoLocationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoOrbitRequest$Type extends MessageType<DoOrbitRequest> {
    constructor() {
        super("mavsdk.rpc.action.DoOrbitRequest", [
            { no: 1, name: "radius_m", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "velocity_ms", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "yaw_behavior", kind: "enum", T: () => ["mavsdk.rpc.action.OrbitYawBehavior", OrbitYawBehavior, "ORBIT_YAW_BEHAVIOR_"] },
            { no: 5, name: "latitude_deg", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "mavsdk.options.default_value": "NaN" } },
            { no: 6, name: "longitude_deg", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "mavsdk.options.default_value": "NaN" } },
            { no: 7, name: "absolute_altitude_m", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "mavsdk.options.default_value": "NaN" } }
        ]);
    }
    create(value?: PartialMessage<DoOrbitRequest>): DoOrbitRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.radiusM = 0;
        message.velocityMs = 0;
        message.yawBehavior = 0;
        message.latitudeDeg = 0;
        message.longitudeDeg = 0;
        message.absoluteAltitudeM = 0;
        if (value !== undefined)
            reflectionMergePartial<DoOrbitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoOrbitRequest): DoOrbitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float radius_m */ 1:
                    message.radiusM = reader.float();
                    break;
                case /* float velocity_ms */ 2:
                    message.velocityMs = reader.float();
                    break;
                case /* mavsdk.rpc.action.OrbitYawBehavior yaw_behavior */ 3:
                    message.yawBehavior = reader.int32();
                    break;
                case /* double latitude_deg */ 5:
                    message.latitudeDeg = reader.double();
                    break;
                case /* double longitude_deg */ 6:
                    message.longitudeDeg = reader.double();
                    break;
                case /* double absolute_altitude_m */ 7:
                    message.absoluteAltitudeM = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoOrbitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float radius_m = 1; */
        if (message.radiusM !== 0)
            writer.tag(1, WireType.Bit32).float(message.radiusM);
        /* float velocity_ms = 2; */
        if (message.velocityMs !== 0)
            writer.tag(2, WireType.Bit32).float(message.velocityMs);
        /* mavsdk.rpc.action.OrbitYawBehavior yaw_behavior = 3; */
        if (message.yawBehavior !== 0)
            writer.tag(3, WireType.Varint).int32(message.yawBehavior);
        /* double latitude_deg = 5; */
        if (message.latitudeDeg !== 0)
            writer.tag(5, WireType.Bit64).double(message.latitudeDeg);
        /* double longitude_deg = 6; */
        if (message.longitudeDeg !== 0)
            writer.tag(6, WireType.Bit64).double(message.longitudeDeg);
        /* double absolute_altitude_m = 7; */
        if (message.absoluteAltitudeM !== 0)
            writer.tag(7, WireType.Bit64).double(message.absoluteAltitudeM);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.DoOrbitRequest
 */
export const DoOrbitRequest = new DoOrbitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoOrbitResponse$Type extends MessageType<DoOrbitResponse> {
    constructor() {
        super("mavsdk.rpc.action.DoOrbitResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<DoOrbitResponse>): DoOrbitResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DoOrbitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoOrbitResponse): DoOrbitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoOrbitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.DoOrbitResponse
 */
export const DoOrbitResponse = new DoOrbitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HoldRequest$Type extends MessageType<HoldRequest> {
    constructor() {
        super("mavsdk.rpc.action.HoldRequest", []);
    }
    create(value?: PartialMessage<HoldRequest>): HoldRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HoldRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HoldRequest): HoldRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HoldRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.HoldRequest
 */
export const HoldRequest = new HoldRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HoldResponse$Type extends MessageType<HoldResponse> {
    constructor() {
        super("mavsdk.rpc.action.HoldResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<HoldResponse>): HoldResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HoldResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HoldResponse): HoldResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HoldResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.HoldResponse
 */
export const HoldResponse = new HoldResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetActuatorRequest$Type extends MessageType<SetActuatorRequest> {
    constructor() {
        super("mavsdk.rpc.action.SetActuatorRequest", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SetActuatorRequest>): SetActuatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.index = 0;
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<SetActuatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetActuatorRequest): SetActuatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                case /* float value */ 2:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetActuatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        /* float value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetActuatorRequest
 */
export const SetActuatorRequest = new SetActuatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetActuatorResponse$Type extends MessageType<SetActuatorResponse> {
    constructor() {
        super("mavsdk.rpc.action.SetActuatorResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<SetActuatorResponse>): SetActuatorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetActuatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetActuatorResponse): SetActuatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetActuatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetActuatorResponse
 */
export const SetActuatorResponse = new SetActuatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransitionToFixedwingRequest$Type extends MessageType<TransitionToFixedwingRequest> {
    constructor() {
        super("mavsdk.rpc.action.TransitionToFixedwingRequest", []);
    }
    create(value?: PartialMessage<TransitionToFixedwingRequest>): TransitionToFixedwingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TransitionToFixedwingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransitionToFixedwingRequest): TransitionToFixedwingRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TransitionToFixedwingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.TransitionToFixedwingRequest
 */
export const TransitionToFixedwingRequest = new TransitionToFixedwingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransitionToFixedwingResponse$Type extends MessageType<TransitionToFixedwingResponse> {
    constructor() {
        super("mavsdk.rpc.action.TransitionToFixedwingResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<TransitionToFixedwingResponse>): TransitionToFixedwingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TransitionToFixedwingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransitionToFixedwingResponse): TransitionToFixedwingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransitionToFixedwingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.TransitionToFixedwingResponse
 */
export const TransitionToFixedwingResponse = new TransitionToFixedwingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransitionToMulticopterRequest$Type extends MessageType<TransitionToMulticopterRequest> {
    constructor() {
        super("mavsdk.rpc.action.TransitionToMulticopterRequest", []);
    }
    create(value?: PartialMessage<TransitionToMulticopterRequest>): TransitionToMulticopterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TransitionToMulticopterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransitionToMulticopterRequest): TransitionToMulticopterRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TransitionToMulticopterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.TransitionToMulticopterRequest
 */
export const TransitionToMulticopterRequest = new TransitionToMulticopterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransitionToMulticopterResponse$Type extends MessageType<TransitionToMulticopterResponse> {
    constructor() {
        super("mavsdk.rpc.action.TransitionToMulticopterResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<TransitionToMulticopterResponse>): TransitionToMulticopterResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TransitionToMulticopterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransitionToMulticopterResponse): TransitionToMulticopterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransitionToMulticopterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.TransitionToMulticopterResponse
 */
export const TransitionToMulticopterResponse = new TransitionToMulticopterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTakeoffAltitudeRequest$Type extends MessageType<GetTakeoffAltitudeRequest> {
    constructor() {
        super("mavsdk.rpc.action.GetTakeoffAltitudeRequest", []);
    }
    create(value?: PartialMessage<GetTakeoffAltitudeRequest>): GetTakeoffAltitudeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTakeoffAltitudeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTakeoffAltitudeRequest): GetTakeoffAltitudeRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetTakeoffAltitudeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.GetTakeoffAltitudeRequest
 */
export const GetTakeoffAltitudeRequest = new GetTakeoffAltitudeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTakeoffAltitudeResponse$Type extends MessageType<GetTakeoffAltitudeResponse> {
    constructor() {
        super("mavsdk.rpc.action.GetTakeoffAltitudeResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult },
            { no: 2, name: "altitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<GetTakeoffAltitudeResponse>): GetTakeoffAltitudeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.altitude = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTakeoffAltitudeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTakeoffAltitudeResponse): GetTakeoffAltitudeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                case /* float altitude */ 2:
                    message.altitude = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTakeoffAltitudeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float altitude = 2; */
        if (message.altitude !== 0)
            writer.tag(2, WireType.Bit32).float(message.altitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.GetTakeoffAltitudeResponse
 */
export const GetTakeoffAltitudeResponse = new GetTakeoffAltitudeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetTakeoffAltitudeRequest$Type extends MessageType<SetTakeoffAltitudeRequest> {
    constructor() {
        super("mavsdk.rpc.action.SetTakeoffAltitudeRequest", [
            { no: 1, name: "altitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SetTakeoffAltitudeRequest>): SetTakeoffAltitudeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.altitude = 0;
        if (value !== undefined)
            reflectionMergePartial<SetTakeoffAltitudeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetTakeoffAltitudeRequest): SetTakeoffAltitudeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float altitude */ 1:
                    message.altitude = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetTakeoffAltitudeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float altitude = 1; */
        if (message.altitude !== 0)
            writer.tag(1, WireType.Bit32).float(message.altitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetTakeoffAltitudeRequest
 */
export const SetTakeoffAltitudeRequest = new SetTakeoffAltitudeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetTakeoffAltitudeResponse$Type extends MessageType<SetTakeoffAltitudeResponse> {
    constructor() {
        super("mavsdk.rpc.action.SetTakeoffAltitudeResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<SetTakeoffAltitudeResponse>): SetTakeoffAltitudeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetTakeoffAltitudeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetTakeoffAltitudeResponse): SetTakeoffAltitudeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetTakeoffAltitudeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetTakeoffAltitudeResponse
 */
export const SetTakeoffAltitudeResponse = new SetTakeoffAltitudeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMaximumSpeedRequest$Type extends MessageType<GetMaximumSpeedRequest> {
    constructor() {
        super("mavsdk.rpc.action.GetMaximumSpeedRequest", []);
    }
    create(value?: PartialMessage<GetMaximumSpeedRequest>): GetMaximumSpeedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMaximumSpeedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMaximumSpeedRequest): GetMaximumSpeedRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetMaximumSpeedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.GetMaximumSpeedRequest
 */
export const GetMaximumSpeedRequest = new GetMaximumSpeedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMaximumSpeedResponse$Type extends MessageType<GetMaximumSpeedResponse> {
    constructor() {
        super("mavsdk.rpc.action.GetMaximumSpeedResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult },
            { no: 2, name: "speed", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<GetMaximumSpeedResponse>): GetMaximumSpeedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.speed = 0;
        if (value !== undefined)
            reflectionMergePartial<GetMaximumSpeedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMaximumSpeedResponse): GetMaximumSpeedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                case /* float speed */ 2:
                    message.speed = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMaximumSpeedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float speed = 2; */
        if (message.speed !== 0)
            writer.tag(2, WireType.Bit32).float(message.speed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.GetMaximumSpeedResponse
 */
export const GetMaximumSpeedResponse = new GetMaximumSpeedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMaximumSpeedRequest$Type extends MessageType<SetMaximumSpeedRequest> {
    constructor() {
        super("mavsdk.rpc.action.SetMaximumSpeedRequest", [
            { no: 1, name: "speed", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SetMaximumSpeedRequest>): SetMaximumSpeedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.speed = 0;
        if (value !== undefined)
            reflectionMergePartial<SetMaximumSpeedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetMaximumSpeedRequest): SetMaximumSpeedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float speed */ 1:
                    message.speed = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetMaximumSpeedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float speed = 1; */
        if (message.speed !== 0)
            writer.tag(1, WireType.Bit32).float(message.speed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetMaximumSpeedRequest
 */
export const SetMaximumSpeedRequest = new SetMaximumSpeedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMaximumSpeedResponse$Type extends MessageType<SetMaximumSpeedResponse> {
    constructor() {
        super("mavsdk.rpc.action.SetMaximumSpeedResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<SetMaximumSpeedResponse>): SetMaximumSpeedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetMaximumSpeedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetMaximumSpeedResponse): SetMaximumSpeedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetMaximumSpeedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetMaximumSpeedResponse
 */
export const SetMaximumSpeedResponse = new SetMaximumSpeedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetReturnToLaunchAltitudeRequest$Type extends MessageType<GetReturnToLaunchAltitudeRequest> {
    constructor() {
        super("mavsdk.rpc.action.GetReturnToLaunchAltitudeRequest", []);
    }
    create(value?: PartialMessage<GetReturnToLaunchAltitudeRequest>): GetReturnToLaunchAltitudeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetReturnToLaunchAltitudeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetReturnToLaunchAltitudeRequest): GetReturnToLaunchAltitudeRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetReturnToLaunchAltitudeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.GetReturnToLaunchAltitudeRequest
 */
export const GetReturnToLaunchAltitudeRequest = new GetReturnToLaunchAltitudeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetReturnToLaunchAltitudeResponse$Type extends MessageType<GetReturnToLaunchAltitudeResponse> {
    constructor() {
        super("mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult },
            { no: 2, name: "relative_altitude_m", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<GetReturnToLaunchAltitudeResponse>): GetReturnToLaunchAltitudeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.relativeAltitudeM = 0;
        if (value !== undefined)
            reflectionMergePartial<GetReturnToLaunchAltitudeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetReturnToLaunchAltitudeResponse): GetReturnToLaunchAltitudeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                case /* float relative_altitude_m */ 2:
                    message.relativeAltitudeM = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetReturnToLaunchAltitudeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float relative_altitude_m = 2; */
        if (message.relativeAltitudeM !== 0)
            writer.tag(2, WireType.Bit32).float(message.relativeAltitudeM);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.GetReturnToLaunchAltitudeResponse
 */
export const GetReturnToLaunchAltitudeResponse = new GetReturnToLaunchAltitudeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReturnToLaunchAltitudeRequest$Type extends MessageType<SetReturnToLaunchAltitudeRequest> {
    constructor() {
        super("mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest", [
            { no: 1, name: "relative_altitude_m", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SetReturnToLaunchAltitudeRequest>): SetReturnToLaunchAltitudeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.relativeAltitudeM = 0;
        if (value !== undefined)
            reflectionMergePartial<SetReturnToLaunchAltitudeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReturnToLaunchAltitudeRequest): SetReturnToLaunchAltitudeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float relative_altitude_m */ 1:
                    message.relativeAltitudeM = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReturnToLaunchAltitudeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float relative_altitude_m = 1; */
        if (message.relativeAltitudeM !== 0)
            writer.tag(1, WireType.Bit32).float(message.relativeAltitudeM);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest
 */
export const SetReturnToLaunchAltitudeRequest = new SetReturnToLaunchAltitudeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReturnToLaunchAltitudeResponse$Type extends MessageType<SetReturnToLaunchAltitudeResponse> {
    constructor() {
        super("mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<SetReturnToLaunchAltitudeResponse>): SetReturnToLaunchAltitudeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetReturnToLaunchAltitudeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReturnToLaunchAltitudeResponse): SetReturnToLaunchAltitudeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReturnToLaunchAltitudeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetReturnToLaunchAltitudeResponse
 */
export const SetReturnToLaunchAltitudeResponse = new SetReturnToLaunchAltitudeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurrentSpeedRequest$Type extends MessageType<SetCurrentSpeedRequest> {
    constructor() {
        super("mavsdk.rpc.action.SetCurrentSpeedRequest", [
            { no: 1, name: "speed_m_s", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SetCurrentSpeedRequest>): SetCurrentSpeedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.speedMS = 0;
        if (value !== undefined)
            reflectionMergePartial<SetCurrentSpeedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCurrentSpeedRequest): SetCurrentSpeedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float speed_m_s */ 1:
                    message.speedMS = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetCurrentSpeedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float speed_m_s = 1; */
        if (message.speedMS !== 0)
            writer.tag(1, WireType.Bit32).float(message.speedMS);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetCurrentSpeedRequest
 */
export const SetCurrentSpeedRequest = new SetCurrentSpeedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurrentSpeedResponse$Type extends MessageType<SetCurrentSpeedResponse> {
    constructor() {
        super("mavsdk.rpc.action.SetCurrentSpeedResponse", [
            { no: 1, name: "action_result", kind: "message", T: () => ActionResult }
        ]);
    }
    create(value?: PartialMessage<SetCurrentSpeedResponse>): SetCurrentSpeedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetCurrentSpeedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCurrentSpeedResponse): SetCurrentSpeedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult action_result */ 1:
                    message.actionResult = ActionResult.internalBinaryRead(reader, reader.uint32(), options, message.actionResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetCurrentSpeedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult action_result = 1; */
        if (message.actionResult)
            ActionResult.internalBinaryWrite(message.actionResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.SetCurrentSpeedResponse
 */
export const SetCurrentSpeedResponse = new SetCurrentSpeedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionResult$Type extends MessageType<ActionResult> {
    constructor() {
        super("mavsdk.rpc.action.ActionResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.action.ActionResult.Result", ActionResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ActionResult>): ActionResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<ActionResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionResult): ActionResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.action.ActionResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.action.ActionResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.action.ActionResult
 */
export const ActionResult = new ActionResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.action.ActionService
 */
export const ActionService = new ServiceType("mavsdk.rpc.action.ActionService", [
    { name: "Arm", options: {}, I: ArmRequest, O: ArmResponse },
    { name: "ArmForce", options: {}, I: ArmForceRequest, O: ArmForceResponse },
    { name: "Disarm", options: {}, I: DisarmRequest, O: DisarmResponse },
    { name: "Takeoff", options: {}, I: TakeoffRequest, O: TakeoffResponse },
    { name: "Land", options: {}, I: LandRequest, O: LandResponse },
    { name: "Reboot", options: {}, I: RebootRequest, O: RebootResponse },
    { name: "Shutdown", options: {}, I: ShutdownRequest, O: ShutdownResponse },
    { name: "Terminate", options: {}, I: TerminateRequest, O: TerminateResponse },
    { name: "Kill", options: {}, I: KillRequest, O: KillResponse },
    { name: "ReturnToLaunch", options: {}, I: ReturnToLaunchRequest, O: ReturnToLaunchResponse },
    { name: "GotoLocation", options: {}, I: GotoLocationRequest, O: GotoLocationResponse },
    { name: "DoOrbit", options: {}, I: DoOrbitRequest, O: DoOrbitResponse },
    { name: "Hold", options: {}, I: HoldRequest, O: HoldResponse },
    { name: "SetActuator", options: {}, I: SetActuatorRequest, O: SetActuatorResponse },
    { name: "TransitionToFixedwing", options: {}, I: TransitionToFixedwingRequest, O: TransitionToFixedwingResponse },
    { name: "TransitionToMulticopter", options: {}, I: TransitionToMulticopterRequest, O: TransitionToMulticopterResponse },
    { name: "GetTakeoffAltitude", options: {}, I: GetTakeoffAltitudeRequest, O: GetTakeoffAltitudeResponse },
    { name: "SetTakeoffAltitude", options: {}, I: SetTakeoffAltitudeRequest, O: SetTakeoffAltitudeResponse },
    { name: "GetMaximumSpeed", options: {}, I: GetMaximumSpeedRequest, O: GetMaximumSpeedResponse },
    { name: "SetMaximumSpeed", options: {}, I: SetMaximumSpeedRequest, O: SetMaximumSpeedResponse },
    { name: "GetReturnToLaunchAltitude", options: {}, I: GetReturnToLaunchAltitudeRequest, O: GetReturnToLaunchAltitudeResponse },
    { name: "SetReturnToLaunchAltitude", options: {}, I: SetReturnToLaunchAltitudeRequest, O: SetReturnToLaunchAltitudeResponse },
    { name: "SetCurrentSpeed", options: {}, I: SetCurrentSpeedRequest, O: SetCurrentSpeedResponse }
]);
