/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "ftp_server/ftp_server.proto" (package "mavsdk.rpc.ftp_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.ftp_server.SetRootDirRequest
 */
export interface SetRootDirRequest {
    /**
     * @generated from protobuf field: string path = 1;
     */
    path: string; // Absolute path of folder
}
/**
 * @generated from protobuf message mavsdk.rpc.ftp_server.SetRootDirResponse
 */
export interface SetRootDirResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.ftp_server.FtpServerResult ftp_server_result = 1;
     */
    ftpServerResult?: FtpServerResult;
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.ftp_server.FtpServerResult
 */
export interface FtpServerResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.ftp_server.FtpServerResult.Result result = 1;
     */
    result: FtpServerResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for FTP server requests.
 *
 * @generated from protobuf enum mavsdk.rpc.ftp_server.FtpServerResult.Result
 */
export enum FtpServerResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Directory does not exist
     *
     * @generated from protobuf enum value: RESULT_DOES_NOT_EXIST = 2;
     */
    DOES_NOT_EXIST = 2,
    /**
     * Operations in progress
     *
     * @generated from protobuf enum value: RESULT_BUSY = 3;
     */
    BUSY = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class SetRootDirRequest$Type extends MessageType<SetRootDirRequest> {
    constructor() {
        super("mavsdk.rpc.ftp_server.SetRootDirRequest", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetRootDirRequest>): SetRootDirRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<SetRootDirRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetRootDirRequest): SetRootDirRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetRootDirRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.ftp_server.SetRootDirRequest
 */
export const SetRootDirRequest = new SetRootDirRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetRootDirResponse$Type extends MessageType<SetRootDirResponse> {
    constructor() {
        super("mavsdk.rpc.ftp_server.SetRootDirResponse", [
            { no: 1, name: "ftp_server_result", kind: "message", T: () => FtpServerResult }
        ]);
    }
    create(value?: PartialMessage<SetRootDirResponse>): SetRootDirResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetRootDirResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetRootDirResponse): SetRootDirResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.ftp_server.FtpServerResult ftp_server_result */ 1:
                    message.ftpServerResult = FtpServerResult.internalBinaryRead(reader, reader.uint32(), options, message.ftpServerResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetRootDirResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.ftp_server.FtpServerResult ftp_server_result = 1; */
        if (message.ftpServerResult)
            FtpServerResult.internalBinaryWrite(message.ftpServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.ftp_server.SetRootDirResponse
 */
export const SetRootDirResponse = new SetRootDirResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FtpServerResult$Type extends MessageType<FtpServerResult> {
    constructor() {
        super("mavsdk.rpc.ftp_server.FtpServerResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.ftp_server.FtpServerResult.Result", FtpServerResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FtpServerResult>): FtpServerResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<FtpServerResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FtpServerResult): FtpServerResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.ftp_server.FtpServerResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FtpServerResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.ftp_server.FtpServerResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.ftp_server.FtpServerResult
 */
export const FtpServerResult = new FtpServerResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.ftp_server.FtpServerService
 */
export const FtpServerService = new ServiceType("mavsdk.rpc.ftp_server.FtpServerService", [
    { name: "SetRootDir", options: { "mavsdk.options.async_type": "SYNC" }, I: SetRootDirRequest, O: SetRootDirResponse }
]);
