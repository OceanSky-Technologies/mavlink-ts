/* eslint-disable */

// source: tune/tune.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.mavsdk.rpc.tune.PlayTuneRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.tune.PlayTuneResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.tune.SongElement', null, global);
goog.exportSymbol('proto.mavsdk.rpc.tune.TuneDescription', null, global);
goog.exportSymbol('proto.mavsdk.rpc.tune.TuneResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.tune.TuneResult.Result', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.tune.PlayTuneRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.tune.PlayTuneRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.tune.PlayTuneRequest.displayName = 'proto.mavsdk.rpc.tune.PlayTuneRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.tune.PlayTuneResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.tune.PlayTuneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.tune.PlayTuneResponse.displayName = 'proto.mavsdk.rpc.tune.PlayTuneResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.tune.TuneDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.tune.TuneDescription.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.tune.TuneDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.tune.TuneDescription.displayName = 'proto.mavsdk.rpc.tune.TuneDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.tune.TuneResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.tune.TuneResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.tune.TuneResult.displayName = 'proto.mavsdk.rpc.tune.TuneResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.tune.PlayTuneRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.tune.PlayTuneRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tuneDescription: (f = msg.getTuneDescription()) && proto.mavsdk.rpc.tune.TuneDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.tune.PlayTuneRequest}
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.tune.PlayTuneRequest;
  return proto.mavsdk.rpc.tune.PlayTuneRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.tune.PlayTuneRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.tune.PlayTuneRequest}
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.tune.TuneDescription;
      reader.readMessage(value,proto.mavsdk.rpc.tune.TuneDescription.deserializeBinaryFromReader);
      msg.setTuneDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.tune.PlayTuneRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.tune.PlayTuneRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTuneDescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.tune.TuneDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional TuneDescription tune_description = 1;
 * @return {?proto.mavsdk.rpc.tune.TuneDescription}
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.prototype.getTuneDescription = function() {
  return /** @type{?proto.mavsdk.rpc.tune.TuneDescription} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.tune.TuneDescription, 1));
};


/**
 * @param {?proto.mavsdk.rpc.tune.TuneDescription|undefined} value
 * @return {!proto.mavsdk.rpc.tune.PlayTuneRequest} returns this
*/
proto.mavsdk.rpc.tune.PlayTuneRequest.prototype.setTuneDescription = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.tune.PlayTuneRequest} returns this
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.prototype.clearTuneDescription = function() {
  return this.setTuneDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.tune.PlayTuneRequest.prototype.hasTuneDescription = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.tune.PlayTuneResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.tune.PlayTuneResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tuneResult: (f = msg.getTuneResult()) && proto.mavsdk.rpc.tune.TuneResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.tune.PlayTuneResponse}
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.tune.PlayTuneResponse;
  return proto.mavsdk.rpc.tune.PlayTuneResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.tune.PlayTuneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.tune.PlayTuneResponse}
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.tune.TuneResult;
      reader.readMessage(value,proto.mavsdk.rpc.tune.TuneResult.deserializeBinaryFromReader);
      msg.setTuneResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.tune.PlayTuneResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.tune.PlayTuneResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTuneResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.tune.TuneResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional TuneResult tune_result = 1;
 * @return {?proto.mavsdk.rpc.tune.TuneResult}
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.prototype.getTuneResult = function() {
  return /** @type{?proto.mavsdk.rpc.tune.TuneResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.tune.TuneResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.tune.TuneResult|undefined} value
 * @return {!proto.mavsdk.rpc.tune.PlayTuneResponse} returns this
*/
proto.mavsdk.rpc.tune.PlayTuneResponse.prototype.setTuneResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.tune.PlayTuneResponse} returns this
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.prototype.clearTuneResult = function() {
  return this.setTuneResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.tune.PlayTuneResponse.prototype.hasTuneResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.tune.TuneDescription.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.tune.TuneDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.tune.TuneDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.tune.TuneDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.tune.TuneDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    songElementsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    tempo: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.tune.TuneDescription}
 */
proto.mavsdk.rpc.tune.TuneDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.tune.TuneDescription;
  return proto.mavsdk.rpc.tune.TuneDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.tune.TuneDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.tune.TuneDescription}
 */
proto.mavsdk.rpc.tune.TuneDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.mavsdk.rpc.tune.SongElement>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSongElements(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTempo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.tune.TuneDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.tune.TuneDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.tune.TuneDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.tune.TuneDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSongElementsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getTempo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated SongElement song_elements = 1;
 * @return {!Array<!proto.mavsdk.rpc.tune.SongElement>}
 */
proto.mavsdk.rpc.tune.TuneDescription.prototype.getSongElementsList = function() {
  return /** @type {!Array<!proto.mavsdk.rpc.tune.SongElement>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.tune.SongElement>} value
 * @return {!proto.mavsdk.rpc.tune.TuneDescription} returns this
 */
proto.mavsdk.rpc.tune.TuneDescription.prototype.setSongElementsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.mavsdk.rpc.tune.SongElement} value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.tune.TuneDescription} returns this
 */
proto.mavsdk.rpc.tune.TuneDescription.prototype.addSongElements = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.tune.TuneDescription} returns this
 */
proto.mavsdk.rpc.tune.TuneDescription.prototype.clearSongElementsList = function() {
  return this.setSongElementsList([]);
};


/**
 * optional int32 tempo = 2;
 * @return {number}
 */
proto.mavsdk.rpc.tune.TuneDescription.prototype.getTempo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.tune.TuneDescription} returns this
 */
proto.mavsdk.rpc.tune.TuneDescription.prototype.setTempo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.tune.TuneResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.tune.TuneResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.tune.TuneResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.tune.TuneResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.tune.TuneResult}
 */
proto.mavsdk.rpc.tune.TuneResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.tune.TuneResult;
  return proto.mavsdk.rpc.tune.TuneResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.tune.TuneResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.tune.TuneResult}
 */
proto.mavsdk.rpc.tune.TuneResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.tune.TuneResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.tune.TuneResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.tune.TuneResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.tune.TuneResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.tune.TuneResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.tune.TuneResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_INVALID_TEMPO: 2,
  RESULT_TUNE_TOO_LONG: 3,
  RESULT_ERROR: 4,
  RESULT_NO_SYSTEM: 5
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.tune.TuneResult.Result}
 */
proto.mavsdk.rpc.tune.TuneResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.tune.TuneResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.tune.TuneResult.Result} value
 * @return {!proto.mavsdk.rpc.tune.TuneResult} returns this
 */
proto.mavsdk.rpc.tune.TuneResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.tune.TuneResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.tune.TuneResult} returns this
 */
proto.mavsdk.rpc.tune.TuneResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.tune.SongElement = {
  SONG_ELEMENT_STYLE_LEGATO: 0,
  SONG_ELEMENT_STYLE_NORMAL: 1,
  SONG_ELEMENT_STYLE_STACCATO: 2,
  SONG_ELEMENT_DURATION_1: 3,
  SONG_ELEMENT_DURATION_2: 4,
  SONG_ELEMENT_DURATION_4: 5,
  SONG_ELEMENT_DURATION_8: 6,
  SONG_ELEMENT_DURATION_16: 7,
  SONG_ELEMENT_DURATION_32: 8,
  SONG_ELEMENT_NOTE_A: 9,
  SONG_ELEMENT_NOTE_B: 10,
  SONG_ELEMENT_NOTE_C: 11,
  SONG_ELEMENT_NOTE_D: 12,
  SONG_ELEMENT_NOTE_E: 13,
  SONG_ELEMENT_NOTE_F: 14,
  SONG_ELEMENT_NOTE_G: 15,
  SONG_ELEMENT_NOTE_PAUSE: 16,
  SONG_ELEMENT_SHARP: 17,
  SONG_ELEMENT_FLAT: 18,
  SONG_ELEMENT_OCTAVE_UP: 19,
  SONG_ELEMENT_OCTAVE_DOWN: 20
};

goog.object.extend(exports, proto.mavsdk.rpc.tune);


// fix autocompletion
module.exports = exports;
