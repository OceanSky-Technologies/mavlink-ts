/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "tune/tune.proto" (package "mavsdk.rpc.tune", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.tune.PlayTuneRequest
 */
export interface PlayTuneRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.tune.TuneDescription tune_description = 1;
     */
    tuneDescription?: TuneDescription; // The tune to be played
}
/**
 * @generated from protobuf message mavsdk.rpc.tune.PlayTuneResponse
 */
export interface PlayTuneResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.tune.TuneResult tune_result = 1;
     */
    tuneResult?: TuneResult;
}
/**
 * Tune description, containing song elements and tempo.
 *
 * @generated from protobuf message mavsdk.rpc.tune.TuneDescription
 */
export interface TuneDescription {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.tune.SongElement song_elements = 1;
     */
    songElements: SongElement[]; // The list of song elements (notes, pauses, ...) to be played
    /**
     * @generated from protobuf field: int32 tempo = 2;
     */
    tempo: number; // The tempo of the song (range: 32 - 255)
}
/**
 * @generated from protobuf message mavsdk.rpc.tune.TuneResult
 */
export interface TuneResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.tune.TuneResult.Result result = 1;
     */
    result: TuneResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for tune requests.
 *
 * @generated from protobuf enum mavsdk.rpc.tune.TuneResult.Result
 */
export enum TuneResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Invalid tempo (range: 32 - 255)
     *
     * @generated from protobuf enum value: RESULT_INVALID_TEMPO = 2;
     */
    INVALID_TEMPO = 2,
    /**
     * Invalid tune: encoded string must be at most 247 chars
     *
     * @generated from protobuf enum value: RESULT_TUNE_TOO_LONG = 3;
     */
    TUNE_TOO_LONG = 3,
    /**
     * Failed to send the request
     *
     * @generated from protobuf enum value: RESULT_ERROR = 4;
     */
    ERROR = 4,
    /**
     * No system connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 5;
     */
    NO_SYSTEM = 5
}
/**
 * An element of the tune
 *
 * @generated from protobuf enum mavsdk.rpc.tune.SongElement
 */
export enum SongElement {
    /**
     * After this element, start playing legato
     *
     * @generated from protobuf enum value: SONG_ELEMENT_STYLE_LEGATO = 0;
     */
    STYLE_LEGATO = 0,
    /**
     * After this element, start playing normal
     *
     * @generated from protobuf enum value: SONG_ELEMENT_STYLE_NORMAL = 1;
     */
    STYLE_NORMAL = 1,
    /**
     * After this element, start playing staccato
     *
     * @generated from protobuf enum value: SONG_ELEMENT_STYLE_STACCATO = 2;
     */
    STYLE_STACCATO = 2,
    /**
     * After this element, set the note duration to 1
     *
     * @generated from protobuf enum value: SONG_ELEMENT_DURATION_1 = 3;
     */
    DURATION_1 = 3,
    /**
     * After this element, set the note duration to 2
     *
     * @generated from protobuf enum value: SONG_ELEMENT_DURATION_2 = 4;
     */
    DURATION_2 = 4,
    /**
     * After this element, set the note duration to 4
     *
     * @generated from protobuf enum value: SONG_ELEMENT_DURATION_4 = 5;
     */
    DURATION_4 = 5,
    /**
     * After this element, set the note duration to 8
     *
     * @generated from protobuf enum value: SONG_ELEMENT_DURATION_8 = 6;
     */
    DURATION_8 = 6,
    /**
     * After this element, set the note duration to 16
     *
     * @generated from protobuf enum value: SONG_ELEMENT_DURATION_16 = 7;
     */
    DURATION_16 = 7,
    /**
     * After this element, set the note duration to 32
     *
     * @generated from protobuf enum value: SONG_ELEMENT_DURATION_32 = 8;
     */
    DURATION_32 = 8,
    /**
     * Play note A
     *
     * @generated from protobuf enum value: SONG_ELEMENT_NOTE_A = 9;
     */
    NOTE_A = 9,
    /**
     * Play note B
     *
     * @generated from protobuf enum value: SONG_ELEMENT_NOTE_B = 10;
     */
    NOTE_B = 10,
    /**
     * Play note C
     *
     * @generated from protobuf enum value: SONG_ELEMENT_NOTE_C = 11;
     */
    NOTE_C = 11,
    /**
     * Play note D
     *
     * @generated from protobuf enum value: SONG_ELEMENT_NOTE_D = 12;
     */
    NOTE_D = 12,
    /**
     * Play note E
     *
     * @generated from protobuf enum value: SONG_ELEMENT_NOTE_E = 13;
     */
    NOTE_E = 13,
    /**
     * Play note F
     *
     * @generated from protobuf enum value: SONG_ELEMENT_NOTE_F = 14;
     */
    NOTE_F = 14,
    /**
     * Play note G
     *
     * @generated from protobuf enum value: SONG_ELEMENT_NOTE_G = 15;
     */
    NOTE_G = 15,
    /**
     * Play a rest
     *
     * @generated from protobuf enum value: SONG_ELEMENT_NOTE_PAUSE = 16;
     */
    NOTE_PAUSE = 16,
    /**
     * After this element, sharp the note (half a step up)
     *
     * @generated from protobuf enum value: SONG_ELEMENT_SHARP = 17;
     */
    SHARP = 17,
    /**
     * After this element, flat the note (half a step down)
     *
     * @generated from protobuf enum value: SONG_ELEMENT_FLAT = 18;
     */
    FLAT = 18,
    /**
     * After this element, shift the note 1 octave up
     *
     * @generated from protobuf enum value: SONG_ELEMENT_OCTAVE_UP = 19;
     */
    OCTAVE_UP = 19,
    /**
     * After this element, shift the note 1 octave down
     *
     * @generated from protobuf enum value: SONG_ELEMENT_OCTAVE_DOWN = 20;
     */
    OCTAVE_DOWN = 20
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayTuneRequest$Type extends MessageType<PlayTuneRequest> {
    constructor() {
        super("mavsdk.rpc.tune.PlayTuneRequest", [
            { no: 1, name: "tune_description", kind: "message", T: () => TuneDescription }
        ]);
    }
    create(value?: PartialMessage<PlayTuneRequest>): PlayTuneRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayTuneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayTuneRequest): PlayTuneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.tune.TuneDescription tune_description */ 1:
                    message.tuneDescription = TuneDescription.internalBinaryRead(reader, reader.uint32(), options, message.tuneDescription);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayTuneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.tune.TuneDescription tune_description = 1; */
        if (message.tuneDescription)
            TuneDescription.internalBinaryWrite(message.tuneDescription, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.tune.PlayTuneRequest
 */
export const PlayTuneRequest = new PlayTuneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayTuneResponse$Type extends MessageType<PlayTuneResponse> {
    constructor() {
        super("mavsdk.rpc.tune.PlayTuneResponse", [
            { no: 1, name: "tune_result", kind: "message", T: () => TuneResult }
        ]);
    }
    create(value?: PartialMessage<PlayTuneResponse>): PlayTuneResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayTuneResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayTuneResponse): PlayTuneResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.tune.TuneResult tune_result */ 1:
                    message.tuneResult = TuneResult.internalBinaryRead(reader, reader.uint32(), options, message.tuneResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayTuneResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.tune.TuneResult tune_result = 1; */
        if (message.tuneResult)
            TuneResult.internalBinaryWrite(message.tuneResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.tune.PlayTuneResponse
 */
export const PlayTuneResponse = new PlayTuneResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TuneDescription$Type extends MessageType<TuneDescription> {
    constructor() {
        super("mavsdk.rpc.tune.TuneDescription", [
            { no: 1, name: "song_elements", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["mavsdk.rpc.tune.SongElement", SongElement, "SONG_ELEMENT_"] },
            { no: 2, name: "tempo", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TuneDescription>): TuneDescription {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.songElements = [];
        message.tempo = 0;
        if (value !== undefined)
            reflectionMergePartial<TuneDescription>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TuneDescription): TuneDescription {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.tune.SongElement song_elements */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.songElements.push(reader.int32());
                    else
                        message.songElements.push(reader.int32());
                    break;
                case /* int32 tempo */ 2:
                    message.tempo = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TuneDescription, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.tune.SongElement song_elements = 1; */
        if (message.songElements.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.songElements.length; i++)
                writer.int32(message.songElements[i]);
            writer.join();
        }
        /* int32 tempo = 2; */
        if (message.tempo !== 0)
            writer.tag(2, WireType.Varint).int32(message.tempo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.tune.TuneDescription
 */
export const TuneDescription = new TuneDescription$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TuneResult$Type extends MessageType<TuneResult> {
    constructor() {
        super("mavsdk.rpc.tune.TuneResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.tune.TuneResult.Result", TuneResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TuneResult>): TuneResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<TuneResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TuneResult): TuneResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.tune.TuneResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TuneResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.tune.TuneResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.tune.TuneResult
 */
export const TuneResult = new TuneResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.tune.TuneService
 */
export const TuneService = new ServiceType("mavsdk.rpc.tune.TuneService", [
    { name: "PlayTune", options: {}, I: PlayTuneRequest, O: PlayTuneResponse }
]);
