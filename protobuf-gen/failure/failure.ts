/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "failure/failure.proto" (package "mavsdk.rpc.failure", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.failure.InjectRequest
 */
export interface InjectRequest {
    /**
     * @generated from protobuf field: mavsdk.rpc.failure.FailureUnit failure_unit = 1;
     */
    failureUnit: FailureUnit; // The failure unit to send
    /**
     * @generated from protobuf field: mavsdk.rpc.failure.FailureType failure_type = 2;
     */
    failureType: FailureType; // The failure type to send
    /**
     * @generated from protobuf field: int32 instance = 3;
     */
    instance: number; // Instance to affect (0 for all)
}
/**
 * @generated from protobuf message mavsdk.rpc.failure.InjectResponse
 */
export interface InjectResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.failure.FailureResult failure_result = 1;
     */
    failureResult?: FailureResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.failure.FailureResult
 */
export interface FailureResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.failure.FailureResult.Result result = 1;
     */
    result: FailureResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for failure requests.
 *
 * @generated from protobuf enum mavsdk.rpc.failure.FailureResult.Result
 */
export enum FailureResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 2;
     */
    NO_SYSTEM = 2,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 3;
     */
    CONNECTION_ERROR = 3,
    /**
     * Failure not supported
     *
     * @generated from protobuf enum value: RESULT_UNSUPPORTED = 4;
     */
    UNSUPPORTED = 4,
    /**
     * Failure injection denied
     *
     * @generated from protobuf enum value: RESULT_DENIED = 5;
     */
    DENIED = 5,
    /**
     * Failure injection is disabled
     *
     * @generated from protobuf enum value: RESULT_DISABLED = 6;
     */
    DISABLED = 6,
    /**
     * Request timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 7;
     */
    TIMEOUT = 7
}
/**
 * A failure unit.
 *
 * @generated from protobuf enum mavsdk.rpc.failure.FailureUnit
 */
export enum FailureUnit {
    /**
     * Gyro
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_GYRO = 0;
     */
    SENSOR_GYRO = 0,
    /**
     * Accelerometer
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_ACCEL = 1;
     */
    SENSOR_ACCEL = 1,
    /**
     * Magnetometer
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_MAG = 2;
     */
    SENSOR_MAG = 2,
    /**
     * Barometer
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_BARO = 3;
     */
    SENSOR_BARO = 3,
    /**
     * GPS
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_GPS = 4;
     */
    SENSOR_GPS = 4,
    /**
     * Optical flow
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_OPTICAL_FLOW = 5;
     */
    SENSOR_OPTICAL_FLOW = 5,
    /**
     * Visual inertial odometry
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_VIO = 6;
     */
    SENSOR_VIO = 6,
    /**
     * Distance sensor
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_DISTANCE_SENSOR = 7;
     */
    SENSOR_DISTANCE_SENSOR = 7,
    /**
     * Airspeed
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SENSOR_AIRSPEED = 8;
     */
    SENSOR_AIRSPEED = 8,
    /**
     * Battery
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SYSTEM_BATTERY = 100;
     */
    SYSTEM_BATTERY = 100,
    /**
     * Motor
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SYSTEM_MOTOR = 101;
     */
    SYSTEM_MOTOR = 101,
    /**
     * Servo
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SYSTEM_SERVO = 102;
     */
    SYSTEM_SERVO = 102,
    /**
     * Avoidance
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SYSTEM_AVOIDANCE = 103;
     */
    SYSTEM_AVOIDANCE = 103,
    /**
     * RC signal
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SYSTEM_RC_SIGNAL = 104;
     */
    SYSTEM_RC_SIGNAL = 104,
    /**
     * MAVLink signal
     *
     * @generated from protobuf enum value: FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL = 105;
     */
    SYSTEM_MAVLINK_SIGNAL = 105
}
/**
 * A failure type
 *
 * @generated from protobuf enum mavsdk.rpc.failure.FailureType
 */
export enum FailureType {
    /**
     * No failure injected, used to reset a previous failure
     *
     * @generated from protobuf enum value: FAILURE_TYPE_OK = 0;
     */
    OK = 0,
    /**
     * Sets unit off, so completely non-responsive
     *
     * @generated from protobuf enum value: FAILURE_TYPE_OFF = 1;
     */
    OFF = 1,
    /**
     * Unit is stuck e.g. keeps reporting the same value
     *
     * @generated from protobuf enum value: FAILURE_TYPE_STUCK = 2;
     */
    STUCK = 2,
    /**
     * Unit is reporting complete garbage
     *
     * @generated from protobuf enum value: FAILURE_TYPE_GARBAGE = 3;
     */
    GARBAGE = 3,
    /**
     * Unit is consistently wrong
     *
     * @generated from protobuf enum value: FAILURE_TYPE_WRONG = 4;
     */
    WRONG = 4,
    /**
     * Unit is slow, so e.g. reporting at slower than expected rate
     *
     * @generated from protobuf enum value: FAILURE_TYPE_SLOW = 5;
     */
    SLOW = 5,
    /**
     * Data of unit is delayed in time
     *
     * @generated from protobuf enum value: FAILURE_TYPE_DELAYED = 6;
     */
    DELAYED = 6,
    /**
     * Unit is sometimes working, sometimes not
     *
     * @generated from protobuf enum value: FAILURE_TYPE_INTERMITTENT = 7;
     */
    INTERMITTENT = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class InjectRequest$Type extends MessageType<InjectRequest> {
    constructor() {
        super("mavsdk.rpc.failure.InjectRequest", [
            { no: 1, name: "failure_unit", kind: "enum", T: () => ["mavsdk.rpc.failure.FailureUnit", FailureUnit, "FAILURE_UNIT_"] },
            { no: 2, name: "failure_type", kind: "enum", T: () => ["mavsdk.rpc.failure.FailureType", FailureType, "FAILURE_TYPE_"] },
            { no: 3, name: "instance", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InjectRequest>): InjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.failureUnit = 0;
        message.failureType = 0;
        message.instance = 0;
        if (value !== undefined)
            reflectionMergePartial<InjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InjectRequest): InjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.failure.FailureUnit failure_unit */ 1:
                    message.failureUnit = reader.int32();
                    break;
                case /* mavsdk.rpc.failure.FailureType failure_type */ 2:
                    message.failureType = reader.int32();
                    break;
                case /* int32 instance */ 3:
                    message.instance = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.failure.FailureUnit failure_unit = 1; */
        if (message.failureUnit !== 0)
            writer.tag(1, WireType.Varint).int32(message.failureUnit);
        /* mavsdk.rpc.failure.FailureType failure_type = 2; */
        if (message.failureType !== 0)
            writer.tag(2, WireType.Varint).int32(message.failureType);
        /* int32 instance = 3; */
        if (message.instance !== 0)
            writer.tag(3, WireType.Varint).int32(message.instance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.failure.InjectRequest
 */
export const InjectRequest = new InjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InjectResponse$Type extends MessageType<InjectResponse> {
    constructor() {
        super("mavsdk.rpc.failure.InjectResponse", [
            { no: 1, name: "failure_result", kind: "message", T: () => FailureResult }
        ]);
    }
    create(value?: PartialMessage<InjectResponse>): InjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InjectResponse): InjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.failure.FailureResult failure_result */ 1:
                    message.failureResult = FailureResult.internalBinaryRead(reader, reader.uint32(), options, message.failureResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.failure.FailureResult failure_result = 1; */
        if (message.failureResult)
            FailureResult.internalBinaryWrite(message.failureResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.failure.InjectResponse
 */
export const InjectResponse = new InjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FailureResult$Type extends MessageType<FailureResult> {
    constructor() {
        super("mavsdk.rpc.failure.FailureResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.failure.FailureResult.Result", FailureResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FailureResult>): FailureResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<FailureResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FailureResult): FailureResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.failure.FailureResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FailureResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.failure.FailureResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.failure.FailureResult
 */
export const FailureResult = new FailureResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.failure.FailureService
 */
export const FailureService = new ServiceType("mavsdk.rpc.failure.FailureService", [
    { name: "Inject", options: { "mavsdk.options.async_type": "SYNC" }, I: InjectRequest, O: InjectResponse }
]);
