/* eslint-disable */

// source: failure/failure.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.failure.FailureResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.failure.FailureResult.Result', null, global);
goog.exportSymbol('proto.mavsdk.rpc.failure.FailureType', null, global);
goog.exportSymbol('proto.mavsdk.rpc.failure.FailureUnit', null, global);
goog.exportSymbol('proto.mavsdk.rpc.failure.InjectRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.failure.InjectResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.failure.InjectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.failure.InjectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.failure.InjectRequest.displayName = 'proto.mavsdk.rpc.failure.InjectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.failure.InjectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.failure.InjectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.failure.InjectResponse.displayName = 'proto.mavsdk.rpc.failure.InjectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.failure.FailureResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.failure.FailureResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.failure.FailureResult.displayName = 'proto.mavsdk.rpc.failure.FailureResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.failure.InjectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.failure.InjectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.failure.InjectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.failure.InjectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    failureUnit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    failureType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    instance: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.failure.InjectRequest}
 */
proto.mavsdk.rpc.failure.InjectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.failure.InjectRequest;
  return proto.mavsdk.rpc.failure.InjectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.failure.InjectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.failure.InjectRequest}
 */
proto.mavsdk.rpc.failure.InjectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.failure.FailureUnit} */ (reader.readEnum());
      msg.setFailureUnit(value);
      break;
    case 2:
      var value = /** @type {!proto.mavsdk.rpc.failure.FailureType} */ (reader.readEnum());
      msg.setFailureType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.failure.InjectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.failure.InjectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.failure.InjectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.failure.InjectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFailureUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFailureType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getInstance();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional FailureUnit failure_unit = 1;
 * @return {!proto.mavsdk.rpc.failure.FailureUnit}
 */
proto.mavsdk.rpc.failure.InjectRequest.prototype.getFailureUnit = function() {
  return /** @type {!proto.mavsdk.rpc.failure.FailureUnit} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.failure.FailureUnit} value
 * @return {!proto.mavsdk.rpc.failure.InjectRequest} returns this
 */
proto.mavsdk.rpc.failure.InjectRequest.prototype.setFailureUnit = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FailureType failure_type = 2;
 * @return {!proto.mavsdk.rpc.failure.FailureType}
 */
proto.mavsdk.rpc.failure.InjectRequest.prototype.getFailureType = function() {
  return /** @type {!proto.mavsdk.rpc.failure.FailureType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mavsdk.rpc.failure.FailureType} value
 * @return {!proto.mavsdk.rpc.failure.InjectRequest} returns this
 */
proto.mavsdk.rpc.failure.InjectRequest.prototype.setFailureType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 instance = 3;
 * @return {number}
 */
proto.mavsdk.rpc.failure.InjectRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.failure.InjectRequest} returns this
 */
proto.mavsdk.rpc.failure.InjectRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.failure.InjectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.failure.InjectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.failure.InjectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.failure.InjectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    failureResult: (f = msg.getFailureResult()) && proto.mavsdk.rpc.failure.FailureResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.failure.InjectResponse}
 */
proto.mavsdk.rpc.failure.InjectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.failure.InjectResponse;
  return proto.mavsdk.rpc.failure.InjectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.failure.InjectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.failure.InjectResponse}
 */
proto.mavsdk.rpc.failure.InjectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.failure.FailureResult;
      reader.readMessage(value,proto.mavsdk.rpc.failure.FailureResult.deserializeBinaryFromReader);
      msg.setFailureResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.failure.InjectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.failure.InjectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.failure.InjectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.failure.InjectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFailureResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.failure.FailureResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional FailureResult failure_result = 1;
 * @return {?proto.mavsdk.rpc.failure.FailureResult}
 */
proto.mavsdk.rpc.failure.InjectResponse.prototype.getFailureResult = function() {
  return /** @type{?proto.mavsdk.rpc.failure.FailureResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.failure.FailureResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.failure.FailureResult|undefined} value
 * @return {!proto.mavsdk.rpc.failure.InjectResponse} returns this
*/
proto.mavsdk.rpc.failure.InjectResponse.prototype.setFailureResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.failure.InjectResponse} returns this
 */
proto.mavsdk.rpc.failure.InjectResponse.prototype.clearFailureResult = function() {
  return this.setFailureResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.failure.InjectResponse.prototype.hasFailureResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.failure.FailureResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.failure.FailureResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.failure.FailureResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.failure.FailureResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.failure.FailureResult}
 */
proto.mavsdk.rpc.failure.FailureResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.failure.FailureResult;
  return proto.mavsdk.rpc.failure.FailureResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.failure.FailureResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.failure.FailureResult}
 */
proto.mavsdk.rpc.failure.FailureResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.failure.FailureResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.failure.FailureResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.failure.FailureResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.failure.FailureResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.failure.FailureResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.failure.FailureResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_NO_SYSTEM: 2,
  RESULT_CONNECTION_ERROR: 3,
  RESULT_UNSUPPORTED: 4,
  RESULT_DENIED: 5,
  RESULT_DISABLED: 6,
  RESULT_TIMEOUT: 7
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.failure.FailureResult.Result}
 */
proto.mavsdk.rpc.failure.FailureResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.failure.FailureResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.failure.FailureResult.Result} value
 * @return {!proto.mavsdk.rpc.failure.FailureResult} returns this
 */
proto.mavsdk.rpc.failure.FailureResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.failure.FailureResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.failure.FailureResult} returns this
 */
proto.mavsdk.rpc.failure.FailureResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.failure.FailureUnit = {
  FAILURE_UNIT_SENSOR_GYRO: 0,
  FAILURE_UNIT_SENSOR_ACCEL: 1,
  FAILURE_UNIT_SENSOR_MAG: 2,
  FAILURE_UNIT_SENSOR_BARO: 3,
  FAILURE_UNIT_SENSOR_GPS: 4,
  FAILURE_UNIT_SENSOR_OPTICAL_FLOW: 5,
  FAILURE_UNIT_SENSOR_VIO: 6,
  FAILURE_UNIT_SENSOR_DISTANCE_SENSOR: 7,
  FAILURE_UNIT_SENSOR_AIRSPEED: 8,
  FAILURE_UNIT_SYSTEM_BATTERY: 100,
  FAILURE_UNIT_SYSTEM_MOTOR: 101,
  FAILURE_UNIT_SYSTEM_SERVO: 102,
  FAILURE_UNIT_SYSTEM_AVOIDANCE: 103,
  FAILURE_UNIT_SYSTEM_RC_SIGNAL: 104,
  FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL: 105
};

/**
 * @enum {number}
 */
proto.mavsdk.rpc.failure.FailureType = {
  FAILURE_TYPE_OK: 0,
  FAILURE_TYPE_OFF: 1,
  FAILURE_TYPE_STUCK: 2,
  FAILURE_TYPE_GARBAGE: 3,
  FAILURE_TYPE_WRONG: 4,
  FAILURE_TYPE_SLOW: 5,
  FAILURE_TYPE_DELAYED: 6,
  FAILURE_TYPE_INTERMITTENT: 7
};

goog.object.extend(exports, proto.mavsdk.rpc.failure);


// fix autocompletion
module.exports = exports;
