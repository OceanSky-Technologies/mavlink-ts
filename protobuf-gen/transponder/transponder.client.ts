/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "transponder/transponder.proto" (package "mavsdk.rpc.transponder", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TransponderService } from "./transponder";
import type { SetRateTransponderResponse } from "./transponder";
import type { SetRateTransponderRequest } from "./transponder";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TransponderResponse } from "./transponder";
import type { SubscribeTransponderRequest } from "./transponder";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Allow users to get ADS-B information
 * and set ADS-B update rates.
 *
 * @generated from protobuf service mavsdk.rpc.transponder.TransponderService
 */
export interface ITransponderServiceClient {
    /**
     * Subscribe to 'transponder' updates.
     *
     * @generated from protobuf rpc: SubscribeTransponder(mavsdk.rpc.transponder.SubscribeTransponderRequest) returns (stream mavsdk.rpc.transponder.TransponderResponse);
     */
    subscribeTransponder(input: SubscribeTransponderRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTransponderRequest, TransponderResponse>;
    /**
     * Set rate to 'transponder' updates.
     *
     * @generated from protobuf rpc: SetRateTransponder(mavsdk.rpc.transponder.SetRateTransponderRequest) returns (mavsdk.rpc.transponder.SetRateTransponderResponse);
     */
    setRateTransponder(input: SetRateTransponderRequest, options?: RpcOptions): UnaryCall<SetRateTransponderRequest, SetRateTransponderResponse>;
}
/**
 *
 * Allow users to get ADS-B information
 * and set ADS-B update rates.
 *
 * @generated from protobuf service mavsdk.rpc.transponder.TransponderService
 */
export class TransponderServiceClient implements ITransponderServiceClient, ServiceInfo {
    typeName = TransponderService.typeName;
    methods = TransponderService.methods;
    options = TransponderService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Subscribe to 'transponder' updates.
     *
     * @generated from protobuf rpc: SubscribeTransponder(mavsdk.rpc.transponder.SubscribeTransponderRequest) returns (stream mavsdk.rpc.transponder.TransponderResponse);
     */
    subscribeTransponder(input: SubscribeTransponderRequest, options?: RpcOptions): ServerStreamingCall<SubscribeTransponderRequest, TransponderResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeTransponderRequest, TransponderResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Set rate to 'transponder' updates.
     *
     * @generated from protobuf rpc: SetRateTransponder(mavsdk.rpc.transponder.SetRateTransponderRequest) returns (mavsdk.rpc.transponder.SetRateTransponderResponse);
     */
    setRateTransponder(input: SetRateTransponderRequest, options?: RpcOptions): UnaryCall<SetRateTransponderRequest, SetRateTransponderResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetRateTransponderRequest, SetRateTransponderResponse>("unary", this._transport, method, opt, input);
    }
}
