/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "gripper/gripper.proto" (package "mavsdk.rpc.gripper", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.gripper.GrabRequest
 */
export interface GrabRequest {
    /**
     * @generated from protobuf field: uint32 instance = 1;
     */
    instance: number;
}
/**
 * @generated from protobuf message mavsdk.rpc.gripper.GrabResponse
 */
export interface GrabResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.gripper.GripperResult gripper_result = 1;
     */
    gripperResult?: GripperResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.gripper.ReleaseRequest
 */
export interface ReleaseRequest {
    /**
     * @generated from protobuf field: uint32 instance = 1;
     */
    instance: number;
}
/**
 * @generated from protobuf message mavsdk.rpc.gripper.ReleaseResponse
 */
export interface ReleaseResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.gripper.GripperResult gripper_result = 1;
     */
    gripperResult?: GripperResult;
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.gripper.GripperResult
 */
export interface GripperResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.gripper.GripperResult.Result result = 1;
     */
    result: GripperResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for gripper action requests.
 *
 * @generated from protobuf enum mavsdk.rpc.gripper.GripperResult.Result
 */
export enum GripperResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request was successful
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 2;
     */
    NO_SYSTEM = 2,
    /**
     * Temporarily rejected
     *
     * @generated from protobuf enum value: RESULT_BUSY = 3;
     */
    BUSY = 3,
    /**
     * Request timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 4;
     */
    TIMEOUT = 4,
    /**
     * Action not supported
     *
     * @generated from protobuf enum value: RESULT_UNSUPPORTED = 5;
     */
    UNSUPPORTED = 5,
    /**
     * Action failed
     *
     * @generated from protobuf enum value: RESULT_FAILED = 6;
     */
    FAILED = 6
}
/**
 *
 * Gripper Actions.
 *
 * Available gripper actions are defined in mavlink under
 * https://mavlink.io/en/messages/common.html#GRIPPER_ACTIONS
 *
 * @generated from protobuf enum mavsdk.rpc.gripper.GripperAction
 */
export enum GripperAction {
    /**
     * Open the gripper to release the cargo
     *
     * @generated from protobuf enum value: GRIPPER_ACTION_RELEASE = 0;
     */
    RELEASE = 0,
    /**
     * Close the gripper and grab onto cargo
     *
     * @generated from protobuf enum value: GRIPPER_ACTION_GRAB = 1;
     */
    GRAB = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class GrabRequest$Type extends MessageType<GrabRequest> {
    constructor() {
        super("mavsdk.rpc.gripper.GrabRequest", [
            { no: 1, name: "instance", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GrabRequest>): GrabRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.instance = 0;
        if (value !== undefined)
            reflectionMergePartial<GrabRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrabRequest): GrabRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 instance */ 1:
                    message.instance = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrabRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 instance = 1; */
        if (message.instance !== 0)
            writer.tag(1, WireType.Varint).uint32(message.instance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.gripper.GrabRequest
 */
export const GrabRequest = new GrabRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrabResponse$Type extends MessageType<GrabResponse> {
    constructor() {
        super("mavsdk.rpc.gripper.GrabResponse", [
            { no: 1, name: "gripper_result", kind: "message", T: () => GripperResult }
        ]);
    }
    create(value?: PartialMessage<GrabResponse>): GrabResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GrabResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrabResponse): GrabResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.gripper.GripperResult gripper_result */ 1:
                    message.gripperResult = GripperResult.internalBinaryRead(reader, reader.uint32(), options, message.gripperResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrabResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.gripper.GripperResult gripper_result = 1; */
        if (message.gripperResult)
            GripperResult.internalBinaryWrite(message.gripperResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.gripper.GrabResponse
 */
export const GrabResponse = new GrabResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleaseRequest$Type extends MessageType<ReleaseRequest> {
    constructor() {
        super("mavsdk.rpc.gripper.ReleaseRequest", [
            { no: 1, name: "instance", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReleaseRequest>): ReleaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.instance = 0;
        if (value !== undefined)
            reflectionMergePartial<ReleaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReleaseRequest): ReleaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 instance */ 1:
                    message.instance = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReleaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 instance = 1; */
        if (message.instance !== 0)
            writer.tag(1, WireType.Varint).uint32(message.instance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.gripper.ReleaseRequest
 */
export const ReleaseRequest = new ReleaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleaseResponse$Type extends MessageType<ReleaseResponse> {
    constructor() {
        super("mavsdk.rpc.gripper.ReleaseResponse", [
            { no: 1, name: "gripper_result", kind: "message", T: () => GripperResult }
        ]);
    }
    create(value?: PartialMessage<ReleaseResponse>): ReleaseResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReleaseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReleaseResponse): ReleaseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.gripper.GripperResult gripper_result */ 1:
                    message.gripperResult = GripperResult.internalBinaryRead(reader, reader.uint32(), options, message.gripperResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReleaseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.gripper.GripperResult gripper_result = 1; */
        if (message.gripperResult)
            GripperResult.internalBinaryWrite(message.gripperResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.gripper.ReleaseResponse
 */
export const ReleaseResponse = new ReleaseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GripperResult$Type extends MessageType<GripperResult> {
    constructor() {
        super("mavsdk.rpc.gripper.GripperResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.gripper.GripperResult.Result", GripperResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GripperResult>): GripperResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<GripperResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GripperResult): GripperResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.gripper.GripperResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GripperResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.gripper.GripperResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.gripper.GripperResult
 */
export const GripperResult = new GripperResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.gripper.GripperService
 */
export const GripperService = new ServiceType("mavsdk.rpc.gripper.GripperService", [
    { name: "Grab", options: {}, I: GrabRequest, O: GrabResponse },
    { name: "Release", options: {}, I: ReleaseRequest, O: ReleaseResponse }
]);
