/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "winch/winch.proto" (package "mavsdk.rpc.winch", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WinchService } from "./winch";
import type { LoadPayloadResponse } from "./winch";
import type { LoadPayloadRequest } from "./winch";
import type { AbandonLineResponse } from "./winch";
import type { AbandonLineRequest } from "./winch";
import type { LoadLineResponse } from "./winch";
import type { LoadLineRequest } from "./winch";
import type { RetractResponse } from "./winch";
import type { RetractRequest } from "./winch";
import type { HoldResponse } from "./winch";
import type { HoldRequest } from "./winch";
import type { DeliverResponse } from "./winch";
import type { DeliverRequest } from "./winch";
import type { LockResponse } from "./winch";
import type { LockRequest } from "./winch";
import type { RateControlResponse } from "./winch";
import type { RateControlRequest } from "./winch";
import type { RelativeLengthControlResponse } from "./winch";
import type { RelativeLengthControlRequest } from "./winch";
import type { RelaxResponse } from "./winch";
import type { RelaxRequest } from "./winch";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StatusResponse } from "./winch";
import type { SubscribeStatusRequest } from "./winch";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Allows users to send winch actions, as well as receive status information from winch systems.
 *
 *
 * @generated from protobuf service mavsdk.rpc.winch.WinchService
 */
export interface IWinchServiceClient {
    /**
     * Subscribe to 'winch status' updates.
     *
     * @generated from protobuf rpc: SubscribeStatus(mavsdk.rpc.winch.SubscribeStatusRequest) returns (stream mavsdk.rpc.winch.StatusResponse);
     */
    subscribeStatus(input: SubscribeStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStatusRequest, StatusResponse>;
    /**
     *
     * Allow motor to freewheel.
     *
     * @generated from protobuf rpc: Relax(mavsdk.rpc.winch.RelaxRequest) returns (mavsdk.rpc.winch.RelaxResponse);
     */
    relax(input: RelaxRequest, options?: RpcOptions): UnaryCall<RelaxRequest, RelaxResponse>;
    /**
     *
     * Wind or unwind specified length of line, optionally using specified rate.
     *
     * @generated from protobuf rpc: RelativeLengthControl(mavsdk.rpc.winch.RelativeLengthControlRequest) returns (mavsdk.rpc.winch.RelativeLengthControlResponse);
     */
    relativeLengthControl(input: RelativeLengthControlRequest, options?: RpcOptions): UnaryCall<RelativeLengthControlRequest, RelativeLengthControlResponse>;
    /**
     *
     * Wind or unwind line at specified rate.
     *
     * @generated from protobuf rpc: RateControl(mavsdk.rpc.winch.RateControlRequest) returns (mavsdk.rpc.winch.RateControlResponse);
     */
    rateControl(input: RateControlRequest, options?: RpcOptions): UnaryCall<RateControlRequest, RateControlResponse>;
    /**
     *
     * Perform the locking sequence to relieve motor while in the fully retracted position.
     *
     * @generated from protobuf rpc: Lock(mavsdk.rpc.winch.LockRequest) returns (mavsdk.rpc.winch.LockResponse);
     */
    lock(input: LockRequest, options?: RpcOptions): UnaryCall<LockRequest, LockResponse>;
    /**
     *
     * Sequence of drop, slow down, touch down, reel up, lock.
     *
     * @generated from protobuf rpc: Deliver(mavsdk.rpc.winch.DeliverRequest) returns (mavsdk.rpc.winch.DeliverResponse);
     */
    deliver(input: DeliverRequest, options?: RpcOptions): UnaryCall<DeliverRequest, DeliverResponse>;
    /**
     *
     * Engage motor and hold current position.
     *
     * @generated from protobuf rpc: Hold(mavsdk.rpc.winch.HoldRequest) returns (mavsdk.rpc.winch.HoldResponse);
     */
    hold(input: HoldRequest, options?: RpcOptions): UnaryCall<HoldRequest, HoldResponse>;
    /**
     *
     * Return the reel to the fully retracted position.
     *
     * @generated from protobuf rpc: Retract(mavsdk.rpc.winch.RetractRequest) returns (mavsdk.rpc.winch.RetractResponse);
     */
    retract(input: RetractRequest, options?: RpcOptions): UnaryCall<RetractRequest, RetractResponse>;
    /**
     *
     * Load the reel with line.
     *
     * The winch will calculate the total loaded length and stop when the tension exceeds a threshold.
     *
     * @generated from protobuf rpc: LoadLine(mavsdk.rpc.winch.LoadLineRequest) returns (mavsdk.rpc.winch.LoadLineResponse);
     */
    loadLine(input: LoadLineRequest, options?: RpcOptions): UnaryCall<LoadLineRequest, LoadLineResponse>;
    /**
     *
     * Spool out the entire length of the line.
     *
     * @generated from protobuf rpc: AbandonLine(mavsdk.rpc.winch.AbandonLineRequest) returns (mavsdk.rpc.winch.AbandonLineResponse);
     */
    abandonLine(input: AbandonLineRequest, options?: RpcOptions): UnaryCall<AbandonLineRequest, AbandonLineResponse>;
    /**
     *
     * Spools out just enough to present the hook to the user to load the payload.
     *
     * @generated from protobuf rpc: LoadPayload(mavsdk.rpc.winch.LoadPayloadRequest) returns (mavsdk.rpc.winch.LoadPayloadResponse);
     */
    loadPayload(input: LoadPayloadRequest, options?: RpcOptions): UnaryCall<LoadPayloadRequest, LoadPayloadResponse>;
}
/**
 *
 * Allows users to send winch actions, as well as receive status information from winch systems.
 *
 *
 * @generated from protobuf service mavsdk.rpc.winch.WinchService
 */
export class WinchServiceClient implements IWinchServiceClient, ServiceInfo {
    typeName = WinchService.typeName;
    methods = WinchService.methods;
    options = WinchService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Subscribe to 'winch status' updates.
     *
     * @generated from protobuf rpc: SubscribeStatus(mavsdk.rpc.winch.SubscribeStatusRequest) returns (stream mavsdk.rpc.winch.StatusResponse);
     */
    subscribeStatus(input: SubscribeStatusRequest, options?: RpcOptions): ServerStreamingCall<SubscribeStatusRequest, StatusResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeStatusRequest, StatusResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     *
     * Allow motor to freewheel.
     *
     * @generated from protobuf rpc: Relax(mavsdk.rpc.winch.RelaxRequest) returns (mavsdk.rpc.winch.RelaxResponse);
     */
    relax(input: RelaxRequest, options?: RpcOptions): UnaryCall<RelaxRequest, RelaxResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RelaxRequest, RelaxResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Wind or unwind specified length of line, optionally using specified rate.
     *
     * @generated from protobuf rpc: RelativeLengthControl(mavsdk.rpc.winch.RelativeLengthControlRequest) returns (mavsdk.rpc.winch.RelativeLengthControlResponse);
     */
    relativeLengthControl(input: RelativeLengthControlRequest, options?: RpcOptions): UnaryCall<RelativeLengthControlRequest, RelativeLengthControlResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RelativeLengthControlRequest, RelativeLengthControlResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Wind or unwind line at specified rate.
     *
     * @generated from protobuf rpc: RateControl(mavsdk.rpc.winch.RateControlRequest) returns (mavsdk.rpc.winch.RateControlResponse);
     */
    rateControl(input: RateControlRequest, options?: RpcOptions): UnaryCall<RateControlRequest, RateControlResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RateControlRequest, RateControlResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Perform the locking sequence to relieve motor while in the fully retracted position.
     *
     * @generated from protobuf rpc: Lock(mavsdk.rpc.winch.LockRequest) returns (mavsdk.rpc.winch.LockResponse);
     */
    lock(input: LockRequest, options?: RpcOptions): UnaryCall<LockRequest, LockResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<LockRequest, LockResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Sequence of drop, slow down, touch down, reel up, lock.
     *
     * @generated from protobuf rpc: Deliver(mavsdk.rpc.winch.DeliverRequest) returns (mavsdk.rpc.winch.DeliverResponse);
     */
    deliver(input: DeliverRequest, options?: RpcOptions): UnaryCall<DeliverRequest, DeliverResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeliverRequest, DeliverResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Engage motor and hold current position.
     *
     * @generated from protobuf rpc: Hold(mavsdk.rpc.winch.HoldRequest) returns (mavsdk.rpc.winch.HoldResponse);
     */
    hold(input: HoldRequest, options?: RpcOptions): UnaryCall<HoldRequest, HoldResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<HoldRequest, HoldResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Return the reel to the fully retracted position.
     *
     * @generated from protobuf rpc: Retract(mavsdk.rpc.winch.RetractRequest) returns (mavsdk.rpc.winch.RetractResponse);
     */
    retract(input: RetractRequest, options?: RpcOptions): UnaryCall<RetractRequest, RetractResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetractRequest, RetractResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Load the reel with line.
     *
     * The winch will calculate the total loaded length and stop when the tension exceeds a threshold.
     *
     * @generated from protobuf rpc: LoadLine(mavsdk.rpc.winch.LoadLineRequest) returns (mavsdk.rpc.winch.LoadLineResponse);
     */
    loadLine(input: LoadLineRequest, options?: RpcOptions): UnaryCall<LoadLineRequest, LoadLineResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoadLineRequest, LoadLineResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Spool out the entire length of the line.
     *
     * @generated from protobuf rpc: AbandonLine(mavsdk.rpc.winch.AbandonLineRequest) returns (mavsdk.rpc.winch.AbandonLineResponse);
     */
    abandonLine(input: AbandonLineRequest, options?: RpcOptions): UnaryCall<AbandonLineRequest, AbandonLineResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<AbandonLineRequest, AbandonLineResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Spools out just enough to present the hook to the user to load the payload.
     *
     * @generated from protobuf rpc: LoadPayload(mavsdk.rpc.winch.LoadPayloadRequest) returns (mavsdk.rpc.winch.LoadPayloadResponse);
     */
    loadPayload(input: LoadPayloadRequest, options?: RpcOptions): UnaryCall<LoadPayloadRequest, LoadPayloadResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoadPayloadRequest, LoadPayloadResponse>("unary", this._transport, method, opt, input);
    }
}
