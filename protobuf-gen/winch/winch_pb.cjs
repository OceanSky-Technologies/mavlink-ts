/* eslint-disable */

// source: winch/winch.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.winch.AbandonLineRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.AbandonLineResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.DeliverRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.DeliverResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.HoldRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.HoldResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.LoadLineRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.LoadLineResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.LoadPayloadRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.LoadPayloadResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.LockRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.LockResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.RateControlRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.RateControlResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.RelativeLengthControlRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.RelativeLengthControlResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.RelaxRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.RelaxResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.RetractRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.RetractResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.Status', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.StatusFlags', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.StatusResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.SubscribeStatusRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.WinchAction', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.WinchResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.winch.WinchResult.Result', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.SubscribeStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.SubscribeStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.SubscribeStatusRequest.displayName = 'proto.mavsdk.rpc.winch.SubscribeStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.StatusResponse.displayName = 'proto.mavsdk.rpc.winch.StatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.StatusFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.StatusFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.StatusFlags.displayName = 'proto.mavsdk.rpc.winch.StatusFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.Status.displayName = 'proto.mavsdk.rpc.winch.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.RelaxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.RelaxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.RelaxRequest.displayName = 'proto.mavsdk.rpc.winch.RelaxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.RelaxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.RelaxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.RelaxResponse.displayName = 'proto.mavsdk.rpc.winch.RelaxResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.RelativeLengthControlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.RelativeLengthControlRequest.displayName = 'proto.mavsdk.rpc.winch.RelativeLengthControlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.RelativeLengthControlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.RelativeLengthControlResponse.displayName = 'proto.mavsdk.rpc.winch.RelativeLengthControlResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.RateControlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.RateControlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.RateControlRequest.displayName = 'proto.mavsdk.rpc.winch.RateControlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.RateControlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.RateControlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.RateControlResponse.displayName = 'proto.mavsdk.rpc.winch.RateControlResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.LockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.LockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.LockRequest.displayName = 'proto.mavsdk.rpc.winch.LockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.LockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.LockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.LockResponse.displayName = 'proto.mavsdk.rpc.winch.LockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.DeliverRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.DeliverRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.DeliverRequest.displayName = 'proto.mavsdk.rpc.winch.DeliverRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.DeliverResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.DeliverResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.DeliverResponse.displayName = 'proto.mavsdk.rpc.winch.DeliverResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.HoldRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.HoldRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.HoldRequest.displayName = 'proto.mavsdk.rpc.winch.HoldRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.HoldResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.HoldResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.HoldResponse.displayName = 'proto.mavsdk.rpc.winch.HoldResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.RetractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.RetractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.RetractRequest.displayName = 'proto.mavsdk.rpc.winch.RetractRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.RetractResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.RetractResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.RetractResponse.displayName = 'proto.mavsdk.rpc.winch.RetractResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.LoadLineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.LoadLineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.LoadLineRequest.displayName = 'proto.mavsdk.rpc.winch.LoadLineRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.LoadLineResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.LoadLineResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.LoadLineResponse.displayName = 'proto.mavsdk.rpc.winch.LoadLineResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.AbandonLineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.AbandonLineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.AbandonLineRequest.displayName = 'proto.mavsdk.rpc.winch.AbandonLineRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.AbandonLineResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.AbandonLineResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.AbandonLineResponse.displayName = 'proto.mavsdk.rpc.winch.AbandonLineResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.LoadPayloadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.LoadPayloadRequest.displayName = 'proto.mavsdk.rpc.winch.LoadPayloadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.LoadPayloadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.LoadPayloadResponse.displayName = 'proto.mavsdk.rpc.winch.LoadPayloadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.winch.WinchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.winch.WinchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.winch.WinchResult.displayName = 'proto.mavsdk.rpc.winch.WinchResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.SubscribeStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.SubscribeStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.SubscribeStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.SubscribeStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.SubscribeStatusRequest}
 */
proto.mavsdk.rpc.winch.SubscribeStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.SubscribeStatusRequest;
  return proto.mavsdk.rpc.winch.SubscribeStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.SubscribeStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.SubscribeStatusRequest}
 */
proto.mavsdk.rpc.winch.SubscribeStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.SubscribeStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.SubscribeStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.SubscribeStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.SubscribeStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.mavsdk.rpc.winch.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.StatusResponse}
 */
proto.mavsdk.rpc.winch.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.StatusResponse;
  return proto.mavsdk.rpc.winch.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.StatusResponse}
 */
proto.mavsdk.rpc.winch.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.Status;
      reader.readMessage(value,proto.mavsdk.rpc.winch.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.mavsdk.rpc.winch.Status}
 */
proto.mavsdk.rpc.winch.StatusResponse.prototype.getStatus = function() {
  return /** @type{?proto.mavsdk.rpc.winch.Status} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.Status, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.Status|undefined} value
 * @return {!proto.mavsdk.rpc.winch.StatusResponse} returns this
*/
proto.mavsdk.rpc.winch.StatusResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.StatusResponse} returns this
 */
proto.mavsdk.rpc.winch.StatusResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.StatusFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.StatusFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.StatusFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthy: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    fullyRetracted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    moving: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    clutchEngaged: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    locked: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    dropping: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    arresting: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    groundSense: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    retracting: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    redeliver: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    abandonLine: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    locking: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    loadLine: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    loadPayload: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.StatusFlags}
 */
proto.mavsdk.rpc.winch.StatusFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.StatusFlags;
  return proto.mavsdk.rpc.winch.StatusFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.StatusFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.StatusFlags}
 */
proto.mavsdk.rpc.winch.StatusFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHealthy(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFullyRetracted(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMoving(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClutchEngaged(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDropping(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setArresting(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGroundSense(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRetracting(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRedeliver(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAbandonLine(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocking(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLoadLine(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLoadPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.StatusFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.StatusFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.StatusFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthy();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFullyRetracted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMoving();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getClutchEngaged();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLocked();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDropping();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getArresting();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getGroundSense();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRetracting();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getRedeliver();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getAbandonLine();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getLocking();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getLoadLine();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getLoadPayload();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional bool healthy = 1;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getHealthy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setHealthy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool fully_retracted = 2;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getFullyRetracted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setFullyRetracted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool moving = 3;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getMoving = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setMoving = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool clutch_engaged = 4;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getClutchEngaged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setClutchEngaged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool locked = 5;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setLocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool dropping = 6;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getDropping = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setDropping = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool arresting = 7;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getArresting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setArresting = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool ground_sense = 8;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getGroundSense = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setGroundSense = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool retracting = 9;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getRetracting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setRetracting = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool redeliver = 10;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getRedeliver = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setRedeliver = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool abandon_line = 11;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getAbandonLine = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setAbandonLine = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool locking = 12;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getLocking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setLocking = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool load_line = 13;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getLoadLine = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setLoadLine = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool load_payload = 14;
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.getLoadPayload = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.winch.StatusFlags} returns this
 */
proto.mavsdk.rpc.winch.StatusFlags.prototype.setLoadPayload = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeUsec: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lineLengthM: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    speedMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    tensionKg: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    voltageV: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    currentA: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    temperatureC: jspb.Message.getFieldWithDefault(msg, 7, 0),
    statusFlags: (f = msg.getStatusFlags()) && proto.mavsdk.rpc.winch.StatusFlags.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.Status}
 */
proto.mavsdk.rpc.winch.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.Status;
  return proto.mavsdk.rpc.winch.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.Status}
 */
proto.mavsdk.rpc.winch.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeUsec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLineLengthM(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeedMS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTensionKg(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltageV(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentA(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemperatureC(value);
      break;
    case 8:
      var value = new proto.mavsdk.rpc.winch.StatusFlags;
      reader.readMessage(value,proto.mavsdk.rpc.winch.StatusFlags.deserializeBinaryFromReader);
      msg.setStatusFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeUsec();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLineLengthM();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getSpeedMS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTensionKg();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getVoltageV();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getCurrentA();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getTemperatureC();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getStatusFlags();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.mavsdk.rpc.winch.StatusFlags.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 time_usec = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.Status.prototype.getTimeUsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
 */
proto.mavsdk.rpc.winch.Status.prototype.setTimeUsec = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float line_length_m = 2;
 * @return {number}
 */
proto.mavsdk.rpc.winch.Status.prototype.getLineLengthM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
 */
proto.mavsdk.rpc.winch.Status.prototype.setLineLengthM = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float speed_m_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.winch.Status.prototype.getSpeedMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
 */
proto.mavsdk.rpc.winch.Status.prototype.setSpeedMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float tension_kg = 4;
 * @return {number}
 */
proto.mavsdk.rpc.winch.Status.prototype.getTensionKg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
 */
proto.mavsdk.rpc.winch.Status.prototype.setTensionKg = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float voltage_v = 5;
 * @return {number}
 */
proto.mavsdk.rpc.winch.Status.prototype.getVoltageV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
 */
proto.mavsdk.rpc.winch.Status.prototype.setVoltageV = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float current_a = 6;
 * @return {number}
 */
proto.mavsdk.rpc.winch.Status.prototype.getCurrentA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
 */
proto.mavsdk.rpc.winch.Status.prototype.setCurrentA = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 temperature_c = 7;
 * @return {number}
 */
proto.mavsdk.rpc.winch.Status.prototype.getTemperatureC = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
 */
proto.mavsdk.rpc.winch.Status.prototype.setTemperatureC = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional StatusFlags status_flags = 8;
 * @return {?proto.mavsdk.rpc.winch.StatusFlags}
 */
proto.mavsdk.rpc.winch.Status.prototype.getStatusFlags = function() {
  return /** @type{?proto.mavsdk.rpc.winch.StatusFlags} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.StatusFlags, 8));
};


/**
 * @param {?proto.mavsdk.rpc.winch.StatusFlags|undefined} value
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
*/
proto.mavsdk.rpc.winch.Status.prototype.setStatusFlags = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.Status} returns this
 */
proto.mavsdk.rpc.winch.Status.prototype.clearStatusFlags = function() {
  return this.setStatusFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.Status.prototype.hasStatusFlags = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.RelaxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.RelaxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.RelaxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RelaxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.RelaxRequest}
 */
proto.mavsdk.rpc.winch.RelaxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.RelaxRequest;
  return proto.mavsdk.rpc.winch.RelaxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.RelaxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.RelaxRequest}
 */
proto.mavsdk.rpc.winch.RelaxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.RelaxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.RelaxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.RelaxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RelaxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.RelaxRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.RelaxRequest} returns this
 */
proto.mavsdk.rpc.winch.RelaxRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.RelaxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.RelaxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.RelaxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RelaxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.RelaxResponse}
 */
proto.mavsdk.rpc.winch.RelaxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.RelaxResponse;
  return proto.mavsdk.rpc.winch.RelaxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.RelaxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.RelaxResponse}
 */
proto.mavsdk.rpc.winch.RelaxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.RelaxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.RelaxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.RelaxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RelaxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.RelaxResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.RelaxResponse} returns this
*/
proto.mavsdk.rpc.winch.RelaxResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.RelaxResponse} returns this
 */
proto.mavsdk.rpc.winch.RelaxResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.RelaxResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.RelativeLengthControlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.RelativeLengthControlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lengthM: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    rateMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlRequest}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.RelativeLengthControlRequest;
  return proto.mavsdk.rpc.winch.RelativeLengthControlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.RelativeLengthControlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlRequest}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLengthM(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRateMS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.RelativeLengthControlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.RelativeLengthControlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLengthM();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRateMS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlRequest} returns this
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float length_m = 2;
 * @return {number}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.prototype.getLengthM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlRequest} returns this
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.prototype.setLengthM = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float rate_m_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.prototype.getRateMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlRequest} returns this
 */
proto.mavsdk.rpc.winch.RelativeLengthControlRequest.prototype.setRateMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.RelativeLengthControlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.RelativeLengthControlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlResponse}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.RelativeLengthControlResponse;
  return proto.mavsdk.rpc.winch.RelativeLengthControlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.RelativeLengthControlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlResponse}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.RelativeLengthControlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.RelativeLengthControlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlResponse} returns this
*/
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.RelativeLengthControlResponse} returns this
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.RelativeLengthControlResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.RateControlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.RateControlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.RateControlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RateControlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rateMS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.RateControlRequest}
 */
proto.mavsdk.rpc.winch.RateControlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.RateControlRequest;
  return proto.mavsdk.rpc.winch.RateControlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.RateControlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.RateControlRequest}
 */
proto.mavsdk.rpc.winch.RateControlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRateMS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.RateControlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.RateControlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.RateControlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RateControlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRateMS();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.RateControlRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.RateControlRequest} returns this
 */
proto.mavsdk.rpc.winch.RateControlRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float rate_m_s = 2;
 * @return {number}
 */
proto.mavsdk.rpc.winch.RateControlRequest.prototype.getRateMS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.RateControlRequest} returns this
 */
proto.mavsdk.rpc.winch.RateControlRequest.prototype.setRateMS = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.RateControlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.RateControlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.RateControlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RateControlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.RateControlResponse}
 */
proto.mavsdk.rpc.winch.RateControlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.RateControlResponse;
  return proto.mavsdk.rpc.winch.RateControlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.RateControlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.RateControlResponse}
 */
proto.mavsdk.rpc.winch.RateControlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.RateControlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.RateControlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.RateControlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RateControlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.RateControlResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.RateControlResponse} returns this
*/
proto.mavsdk.rpc.winch.RateControlResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.RateControlResponse} returns this
 */
proto.mavsdk.rpc.winch.RateControlResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.RateControlResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.LockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.LockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.LockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.LockRequest}
 */
proto.mavsdk.rpc.winch.LockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.LockRequest;
  return proto.mavsdk.rpc.winch.LockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.LockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.LockRequest}
 */
proto.mavsdk.rpc.winch.LockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.LockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.LockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.LockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.LockRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.LockRequest} returns this
 */
proto.mavsdk.rpc.winch.LockRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.LockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.LockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.LockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.LockResponse}
 */
proto.mavsdk.rpc.winch.LockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.LockResponse;
  return proto.mavsdk.rpc.winch.LockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.LockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.LockResponse}
 */
proto.mavsdk.rpc.winch.LockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.LockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.LockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.LockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.LockResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.LockResponse} returns this
*/
proto.mavsdk.rpc.winch.LockResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.LockResponse} returns this
 */
proto.mavsdk.rpc.winch.LockResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.LockResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.DeliverRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.DeliverRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.DeliverRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.DeliverRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.DeliverRequest}
 */
proto.mavsdk.rpc.winch.DeliverRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.DeliverRequest;
  return proto.mavsdk.rpc.winch.DeliverRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.DeliverRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.DeliverRequest}
 */
proto.mavsdk.rpc.winch.DeliverRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.DeliverRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.DeliverRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.DeliverRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.DeliverRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.DeliverRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.DeliverRequest} returns this
 */
proto.mavsdk.rpc.winch.DeliverRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.DeliverResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.DeliverResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.DeliverResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.DeliverResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.DeliverResponse}
 */
proto.mavsdk.rpc.winch.DeliverResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.DeliverResponse;
  return proto.mavsdk.rpc.winch.DeliverResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.DeliverResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.DeliverResponse}
 */
proto.mavsdk.rpc.winch.DeliverResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.DeliverResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.DeliverResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.DeliverResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.DeliverResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.DeliverResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.DeliverResponse} returns this
*/
proto.mavsdk.rpc.winch.DeliverResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.DeliverResponse} returns this
 */
proto.mavsdk.rpc.winch.DeliverResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.DeliverResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.HoldRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.HoldRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.HoldRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.HoldRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.HoldRequest}
 */
proto.mavsdk.rpc.winch.HoldRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.HoldRequest;
  return proto.mavsdk.rpc.winch.HoldRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.HoldRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.HoldRequest}
 */
proto.mavsdk.rpc.winch.HoldRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.HoldRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.HoldRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.HoldRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.HoldRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.HoldRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.HoldRequest} returns this
 */
proto.mavsdk.rpc.winch.HoldRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.HoldResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.HoldResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.HoldResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.HoldResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.HoldResponse}
 */
proto.mavsdk.rpc.winch.HoldResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.HoldResponse;
  return proto.mavsdk.rpc.winch.HoldResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.HoldResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.HoldResponse}
 */
proto.mavsdk.rpc.winch.HoldResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.HoldResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.HoldResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.HoldResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.HoldResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.HoldResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.HoldResponse} returns this
*/
proto.mavsdk.rpc.winch.HoldResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.HoldResponse} returns this
 */
proto.mavsdk.rpc.winch.HoldResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.HoldResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.RetractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.RetractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.RetractRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RetractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.RetractRequest}
 */
proto.mavsdk.rpc.winch.RetractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.RetractRequest;
  return proto.mavsdk.rpc.winch.RetractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.RetractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.RetractRequest}
 */
proto.mavsdk.rpc.winch.RetractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.RetractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.RetractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.RetractRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RetractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.RetractRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.RetractRequest} returns this
 */
proto.mavsdk.rpc.winch.RetractRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.RetractResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.RetractResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.RetractResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RetractResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.RetractResponse}
 */
proto.mavsdk.rpc.winch.RetractResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.RetractResponse;
  return proto.mavsdk.rpc.winch.RetractResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.RetractResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.RetractResponse}
 */
proto.mavsdk.rpc.winch.RetractResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.RetractResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.RetractResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.RetractResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.RetractResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.RetractResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.RetractResponse} returns this
*/
proto.mavsdk.rpc.winch.RetractResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.RetractResponse} returns this
 */
proto.mavsdk.rpc.winch.RetractResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.RetractResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.LoadLineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.LoadLineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.LoadLineRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LoadLineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.LoadLineRequest}
 */
proto.mavsdk.rpc.winch.LoadLineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.LoadLineRequest;
  return proto.mavsdk.rpc.winch.LoadLineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.LoadLineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.LoadLineRequest}
 */
proto.mavsdk.rpc.winch.LoadLineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.LoadLineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.LoadLineRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.LoadLineRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LoadLineRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.LoadLineRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.LoadLineRequest} returns this
 */
proto.mavsdk.rpc.winch.LoadLineRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.LoadLineResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.LoadLineResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.LoadLineResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LoadLineResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.LoadLineResponse}
 */
proto.mavsdk.rpc.winch.LoadLineResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.LoadLineResponse;
  return proto.mavsdk.rpc.winch.LoadLineResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.LoadLineResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.LoadLineResponse}
 */
proto.mavsdk.rpc.winch.LoadLineResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.LoadLineResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.LoadLineResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.LoadLineResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LoadLineResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.LoadLineResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.LoadLineResponse} returns this
*/
proto.mavsdk.rpc.winch.LoadLineResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.LoadLineResponse} returns this
 */
proto.mavsdk.rpc.winch.LoadLineResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.LoadLineResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.AbandonLineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.AbandonLineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.AbandonLineRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.AbandonLineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.AbandonLineRequest}
 */
proto.mavsdk.rpc.winch.AbandonLineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.AbandonLineRequest;
  return proto.mavsdk.rpc.winch.AbandonLineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.AbandonLineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.AbandonLineRequest}
 */
proto.mavsdk.rpc.winch.AbandonLineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.AbandonLineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.AbandonLineRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.AbandonLineRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.AbandonLineRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.AbandonLineRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.AbandonLineRequest} returns this
 */
proto.mavsdk.rpc.winch.AbandonLineRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.AbandonLineResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.AbandonLineResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.AbandonLineResponse}
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.AbandonLineResponse;
  return proto.mavsdk.rpc.winch.AbandonLineResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.AbandonLineResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.AbandonLineResponse}
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.AbandonLineResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.AbandonLineResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.AbandonLineResponse} returns this
*/
proto.mavsdk.rpc.winch.AbandonLineResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.AbandonLineResponse} returns this
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.AbandonLineResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.LoadPayloadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.LoadPayloadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.LoadPayloadRequest}
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.LoadPayloadRequest;
  return proto.mavsdk.rpc.winch.LoadPayloadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.LoadPayloadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.LoadPayloadRequest}
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.LoadPayloadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.LoadPayloadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 instance = 1;
 * @return {number}
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.winch.LoadPayloadRequest} returns this
 */
proto.mavsdk.rpc.winch.LoadPayloadRequest.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.LoadPayloadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.LoadPayloadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    winchResult: (f = msg.getWinchResult()) && proto.mavsdk.rpc.winch.WinchResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.LoadPayloadResponse}
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.LoadPayloadResponse;
  return proto.mavsdk.rpc.winch.LoadPayloadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.LoadPayloadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.LoadPayloadResponse}
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.winch.WinchResult;
      reader.readMessage(value,proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader);
      msg.setWinchResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.LoadPayloadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.LoadPayloadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinchResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WinchResult winch_result = 1;
 * @return {?proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.prototype.getWinchResult = function() {
  return /** @type{?proto.mavsdk.rpc.winch.WinchResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.winch.WinchResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.winch.WinchResult|undefined} value
 * @return {!proto.mavsdk.rpc.winch.LoadPayloadResponse} returns this
*/
proto.mavsdk.rpc.winch.LoadPayloadResponse.prototype.setWinchResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.winch.LoadPayloadResponse} returns this
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.prototype.clearWinchResult = function() {
  return this.setWinchResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.winch.LoadPayloadResponse.prototype.hasWinchResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.winch.WinchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.winch.WinchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.winch.WinchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.WinchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.WinchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.winch.WinchResult;
  return proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.winch.WinchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.winch.WinchResult}
 */
proto.mavsdk.rpc.winch.WinchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.winch.WinchResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.winch.WinchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.winch.WinchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.winch.WinchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.winch.WinchResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_NO_SYSTEM: 2,
  RESULT_BUSY: 3,
  RESULT_TIMEOUT: 4,
  RESULT_UNSUPPORTED: 5,
  RESULT_FAILED: 6
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.winch.WinchResult.Result}
 */
proto.mavsdk.rpc.winch.WinchResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.winch.WinchResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.winch.WinchResult.Result} value
 * @return {!proto.mavsdk.rpc.winch.WinchResult} returns this
 */
proto.mavsdk.rpc.winch.WinchResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.winch.WinchResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.winch.WinchResult} returns this
 */
proto.mavsdk.rpc.winch.WinchResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.winch.WinchAction = {
  WINCH_ACTION_RELAXED: 0,
  WINCH_ACTION_RELATIVE_LENGTH_CONTROL: 1,
  WINCH_ACTION_RATE_CONTROL: 2,
  WINCH_ACTION_LOCK: 3,
  WINCH_ACTION_DELIVER: 4,
  WINCH_ACTION_HOLD: 5,
  WINCH_ACTION_RETRACT: 6,
  WINCH_ACTION_LOAD_LINE: 7,
  WINCH_ACTION_ABANDON_LINE: 8,
  WINCH_ACTION_LOAD_PAYLOAD: 9
};

goog.object.extend(exports, proto.mavsdk.rpc.winch);


// fix autocompletion
module.exports = exports;
