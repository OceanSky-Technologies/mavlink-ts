/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "mission_raw_server/mission_raw_server.proto" (package "mavsdk.rpc.mission_raw_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.SubscribeIncomingMissionRequest
 */
export interface SubscribeIncomingMissionRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.IncomingMissionResponse
 */
export interface IncomingMissionResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw_server.MissionRawServerResult mission_raw_server_result = 1;
     */
    missionRawServerResult?: MissionRawServerResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw_server.MissionPlan mission_plan = 2;
     */
    missionPlan?: MissionPlan; // The mission plan
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.SubscribeCurrentItemChangedRequest
 */
export interface SubscribeCurrentItemChangedRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse
 */
export interface CurrentItemChangedResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw_server.MissionItem mission_item = 1;
     */
    missionItem?: MissionItem;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.SubscribeClearAllRequest
 */
export interface SubscribeClearAllRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.ClearAllResponse
 */
export interface ClearAllResponse {
    /**
     * @generated from protobuf field: uint32 clear_type = 1;
     */
    clearType: number;
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteRequest
 */
export interface SetCurrentItemCompleteRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteResponse
 */
export interface SetCurrentItemCompleteResponse {
}
/**
 * Mission item exactly identical to MAVLink MISSION_ITEM_INT.
 *
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.MissionItem
 */
export interface MissionItem {
    /**
     * @generated from protobuf field: uint32 seq = 1;
     */
    seq: number; // Sequence (uint16_t)
    /**
     * @generated from protobuf field: uint32 frame = 2;
     */
    frame: number; // The coordinate system of the waypoint (actually uint8_t)
    /**
     * @generated from protobuf field: uint32 command = 3;
     */
    command: number; // The scheduled action for the waypoint (actually uint16_t)
    /**
     * @generated from protobuf field: uint32 current = 4;
     */
    current: number; // false:0, true:1 (actually uint8_t)
    /**
     * @generated from protobuf field: uint32 autocontinue = 5;
     */
    autocontinue: number; // Autocontinue to next waypoint (actually uint8_t)
    /**
     * @generated from protobuf field: float param1 = 6;
     */
    param1: number; // PARAM1, see MAV_CMD enum
    /**
     * @generated from protobuf field: float param2 = 7;
     */
    param2: number; // PARAM2, see MAV_CMD enum
    /**
     * @generated from protobuf field: float param3 = 8;
     */
    param3: number; // PARAM3, see MAV_CMD enum
    /**
     * @generated from protobuf field: float param4 = 9;
     */
    param4: number; // PARAM4, see MAV_CMD enum
    /**
     * @generated from protobuf field: int32 x = 10;
     */
    x: number; // PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
    /**
     * @generated from protobuf field: int32 y = 11;
     */
    y: number; // PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7
    /**
     * @generated from protobuf field: float z = 12;
     */
    z: number; // PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame)
    /**
     * @generated from protobuf field: uint32 mission_type = 13;
     */
    missionType: number; // Mission type (actually uint8_t)
}
/**
 * Mission plan type
 *
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.MissionPlan
 */
export interface MissionPlan {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.mission_raw_server.MissionItem mission_items = 1;
     */
    missionItems: MissionItem[]; // The mission items
}
/**
 * Mission progress type.
 *
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.MissionProgress
 */
export interface MissionProgress {
    /**
     * @generated from protobuf field: int32 current = 1;
     */
    current: number; // Current mission item index (0-based), if equal to total, the mission is finished
    /**
     * @generated from protobuf field: int32 total = 2;
     */
    total: number; // Total number of mission items
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.mission_raw_server.MissionRawServerResult
 */
export interface MissionRawServerResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.mission_raw_server.MissionRawServerResult.Result result = 1;
     */
    result: MissionRawServerResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for action requests.
 *
 * @generated from protobuf enum mavsdk.rpc.mission_raw_server.MissionRawServerResult.Result
 */
export enum MissionRawServerResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Error
     *
     * @generated from protobuf enum value: RESULT_ERROR = 2;
     */
    ERROR = 2,
    /**
     * Too many mission items in the mission
     *
     * @generated from protobuf enum value: RESULT_TOO_MANY_MISSION_ITEMS = 3;
     */
    TOO_MANY_MISSION_ITEMS = 3,
    /**
     * Vehicle is busy
     *
     * @generated from protobuf enum value: RESULT_BUSY = 4;
     */
    BUSY = 4,
    /**
     * Request timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 5;
     */
    TIMEOUT = 5,
    /**
     * Invalid argument
     *
     * @generated from protobuf enum value: RESULT_INVALID_ARGUMENT = 6;
     */
    INVALID_ARGUMENT = 6,
    /**
     * Mission downloaded from the system is not supported
     *
     * @generated from protobuf enum value: RESULT_UNSUPPORTED = 7;
     */
    UNSUPPORTED = 7,
    /**
     * No mission available on the system
     *
     * @generated from protobuf enum value: RESULT_NO_MISSION_AVAILABLE = 8;
     */
    NO_MISSION_AVAILABLE = 8,
    /**
     * Unsupported mission command
     *
     * @generated from protobuf enum value: RESULT_UNSUPPORTED_MISSION_CMD = 11;
     */
    UNSUPPORTED_MISSION_CMD = 11,
    /**
     * Mission transfer (upload or download) has been cancelled
     *
     * @generated from protobuf enum value: RESULT_TRANSFER_CANCELLED = 12;
     */
    TRANSFER_CANCELLED = 12,
    /**
     * No system connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 13;
     */
    NO_SYSTEM = 13,
    /**
     * Intermediate message showing progress or instructions on the next steps
     *
     * @generated from protobuf enum value: RESULT_NEXT = 14;
     */
    NEXT = 14
}
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeIncomingMissionRequest$Type extends MessageType<SubscribeIncomingMissionRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.SubscribeIncomingMissionRequest", []);
    }
    create(value?: PartialMessage<SubscribeIncomingMissionRequest>): SubscribeIncomingMissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeIncomingMissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeIncomingMissionRequest): SubscribeIncomingMissionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeIncomingMissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.SubscribeIncomingMissionRequest
 */
export const SubscribeIncomingMissionRequest = new SubscribeIncomingMissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IncomingMissionResponse$Type extends MessageType<IncomingMissionResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.IncomingMissionResponse", [
            { no: 1, name: "mission_raw_server_result", kind: "message", T: () => MissionRawServerResult },
            { no: 2, name: "mission_plan", kind: "message", T: () => MissionPlan }
        ]);
    }
    create(value?: PartialMessage<IncomingMissionResponse>): IncomingMissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IncomingMissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IncomingMissionResponse): IncomingMissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw_server.MissionRawServerResult mission_raw_server_result */ 1:
                    message.missionRawServerResult = MissionRawServerResult.internalBinaryRead(reader, reader.uint32(), options, message.missionRawServerResult);
                    break;
                case /* mavsdk.rpc.mission_raw_server.MissionPlan mission_plan */ 2:
                    message.missionPlan = MissionPlan.internalBinaryRead(reader, reader.uint32(), options, message.missionPlan);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IncomingMissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw_server.MissionRawServerResult mission_raw_server_result = 1; */
        if (message.missionRawServerResult)
            MissionRawServerResult.internalBinaryWrite(message.missionRawServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.mission_raw_server.MissionPlan mission_plan = 2; */
        if (message.missionPlan)
            MissionPlan.internalBinaryWrite(message.missionPlan, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.IncomingMissionResponse
 */
export const IncomingMissionResponse = new IncomingMissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeCurrentItemChangedRequest$Type extends MessageType<SubscribeCurrentItemChangedRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.SubscribeCurrentItemChangedRequest", []);
    }
    create(value?: PartialMessage<SubscribeCurrentItemChangedRequest>): SubscribeCurrentItemChangedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeCurrentItemChangedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeCurrentItemChangedRequest): SubscribeCurrentItemChangedRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeCurrentItemChangedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.SubscribeCurrentItemChangedRequest
 */
export const SubscribeCurrentItemChangedRequest = new SubscribeCurrentItemChangedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CurrentItemChangedResponse$Type extends MessageType<CurrentItemChangedResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse", [
            { no: 1, name: "mission_item", kind: "message", T: () => MissionItem }
        ]);
    }
    create(value?: PartialMessage<CurrentItemChangedResponse>): CurrentItemChangedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CurrentItemChangedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CurrentItemChangedResponse): CurrentItemChangedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw_server.MissionItem mission_item */ 1:
                    message.missionItem = MissionItem.internalBinaryRead(reader, reader.uint32(), options, message.missionItem);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CurrentItemChangedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw_server.MissionItem mission_item = 1; */
        if (message.missionItem)
            MissionItem.internalBinaryWrite(message.missionItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.CurrentItemChangedResponse
 */
export const CurrentItemChangedResponse = new CurrentItemChangedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeClearAllRequest$Type extends MessageType<SubscribeClearAllRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.SubscribeClearAllRequest", []);
    }
    create(value?: PartialMessage<SubscribeClearAllRequest>): SubscribeClearAllRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeClearAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeClearAllRequest): SubscribeClearAllRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeClearAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.SubscribeClearAllRequest
 */
export const SubscribeClearAllRequest = new SubscribeClearAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearAllResponse$Type extends MessageType<ClearAllResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.ClearAllResponse", [
            { no: 1, name: "clear_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClearAllResponse>): ClearAllResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clearType = 0;
        if (value !== undefined)
            reflectionMergePartial<ClearAllResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearAllResponse): ClearAllResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 clear_type */ 1:
                    message.clearType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClearAllResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 clear_type = 1; */
        if (message.clearType !== 0)
            writer.tag(1, WireType.Varint).uint32(message.clearType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.ClearAllResponse
 */
export const ClearAllResponse = new ClearAllResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurrentItemCompleteRequest$Type extends MessageType<SetCurrentItemCompleteRequest> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteRequest", []);
    }
    create(value?: PartialMessage<SetCurrentItemCompleteRequest>): SetCurrentItemCompleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetCurrentItemCompleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCurrentItemCompleteRequest): SetCurrentItemCompleteRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetCurrentItemCompleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteRequest
 */
export const SetCurrentItemCompleteRequest = new SetCurrentItemCompleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurrentItemCompleteResponse$Type extends MessageType<SetCurrentItemCompleteResponse> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteResponse", []);
    }
    create(value?: PartialMessage<SetCurrentItemCompleteResponse>): SetCurrentItemCompleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetCurrentItemCompleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCurrentItemCompleteResponse): SetCurrentItemCompleteResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetCurrentItemCompleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.SetCurrentItemCompleteResponse
 */
export const SetCurrentItemCompleteResponse = new SetCurrentItemCompleteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionItem$Type extends MessageType<MissionItem> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.MissionItem", [
            { no: 1, name: "seq", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "frame", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "command", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "current", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "autocontinue", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "param1", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "param2", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "param3", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "param4", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "mission_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MissionItem>): MissionItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seq = 0;
        message.frame = 0;
        message.command = 0;
        message.current = 0;
        message.autocontinue = 0;
        message.param1 = 0;
        message.param2 = 0;
        message.param3 = 0;
        message.param4 = 0;
        message.x = 0;
        message.y = 0;
        message.z = 0;
        message.missionType = 0;
        if (value !== undefined)
            reflectionMergePartial<MissionItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionItem): MissionItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 seq */ 1:
                    message.seq = reader.uint32();
                    break;
                case /* uint32 frame */ 2:
                    message.frame = reader.uint32();
                    break;
                case /* uint32 command */ 3:
                    message.command = reader.uint32();
                    break;
                case /* uint32 current */ 4:
                    message.current = reader.uint32();
                    break;
                case /* uint32 autocontinue */ 5:
                    message.autocontinue = reader.uint32();
                    break;
                case /* float param1 */ 6:
                    message.param1 = reader.float();
                    break;
                case /* float param2 */ 7:
                    message.param2 = reader.float();
                    break;
                case /* float param3 */ 8:
                    message.param3 = reader.float();
                    break;
                case /* float param4 */ 9:
                    message.param4 = reader.float();
                    break;
                case /* int32 x */ 10:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 11:
                    message.y = reader.int32();
                    break;
                case /* float z */ 12:
                    message.z = reader.float();
                    break;
                case /* uint32 mission_type */ 13:
                    message.missionType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 seq = 1; */
        if (message.seq !== 0)
            writer.tag(1, WireType.Varint).uint32(message.seq);
        /* uint32 frame = 2; */
        if (message.frame !== 0)
            writer.tag(2, WireType.Varint).uint32(message.frame);
        /* uint32 command = 3; */
        if (message.command !== 0)
            writer.tag(3, WireType.Varint).uint32(message.command);
        /* uint32 current = 4; */
        if (message.current !== 0)
            writer.tag(4, WireType.Varint).uint32(message.current);
        /* uint32 autocontinue = 5; */
        if (message.autocontinue !== 0)
            writer.tag(5, WireType.Varint).uint32(message.autocontinue);
        /* float param1 = 6; */
        if (message.param1 !== 0)
            writer.tag(6, WireType.Bit32).float(message.param1);
        /* float param2 = 7; */
        if (message.param2 !== 0)
            writer.tag(7, WireType.Bit32).float(message.param2);
        /* float param3 = 8; */
        if (message.param3 !== 0)
            writer.tag(8, WireType.Bit32).float(message.param3);
        /* float param4 = 9; */
        if (message.param4 !== 0)
            writer.tag(9, WireType.Bit32).float(message.param4);
        /* int32 x = 10; */
        if (message.x !== 0)
            writer.tag(10, WireType.Varint).int32(message.x);
        /* int32 y = 11; */
        if (message.y !== 0)
            writer.tag(11, WireType.Varint).int32(message.y);
        /* float z = 12; */
        if (message.z !== 0)
            writer.tag(12, WireType.Bit32).float(message.z);
        /* uint32 mission_type = 13; */
        if (message.missionType !== 0)
            writer.tag(13, WireType.Varint).uint32(message.missionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.MissionItem
 */
export const MissionItem = new MissionItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionPlan$Type extends MessageType<MissionPlan> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.MissionPlan", [
            { no: 1, name: "mission_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissionItem }
        ]);
    }
    create(value?: PartialMessage<MissionPlan>): MissionPlan {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.missionItems = [];
        if (value !== undefined)
            reflectionMergePartial<MissionPlan>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionPlan): MissionPlan {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.mission_raw_server.MissionItem mission_items */ 1:
                    message.missionItems.push(MissionItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionPlan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.mission_raw_server.MissionItem mission_items = 1; */
        for (let i = 0; i < message.missionItems.length; i++)
            MissionItem.internalBinaryWrite(message.missionItems[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.MissionPlan
 */
export const MissionPlan = new MissionPlan$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionProgress$Type extends MessageType<MissionProgress> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.MissionProgress", [
            { no: 1, name: "current", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MissionProgress>): MissionProgress {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.current = 0;
        message.total = 0;
        if (value !== undefined)
            reflectionMergePartial<MissionProgress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionProgress): MissionProgress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 current */ 1:
                    message.current = reader.int32();
                    break;
                case /* int32 total */ 2:
                    message.total = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionProgress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 current = 1; */
        if (message.current !== 0)
            writer.tag(1, WireType.Varint).int32(message.current);
        /* int32 total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Varint).int32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.MissionProgress
 */
export const MissionProgress = new MissionProgress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissionRawServerResult$Type extends MessageType<MissionRawServerResult> {
    constructor() {
        super("mavsdk.rpc.mission_raw_server.MissionRawServerResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.mission_raw_server.MissionRawServerResult.Result", MissionRawServerResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MissionRawServerResult>): MissionRawServerResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<MissionRawServerResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MissionRawServerResult): MissionRawServerResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.mission_raw_server.MissionRawServerResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MissionRawServerResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.mission_raw_server.MissionRawServerResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.mission_raw_server.MissionRawServerResult
 */
export const MissionRawServerResult = new MissionRawServerResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.mission_raw_server.MissionRawServerService
 */
export const MissionRawServerService = new ServiceType("mavsdk.rpc.mission_raw_server.MissionRawServerService", [
    { name: "SubscribeIncomingMission", serverStreaming: true, options: {}, I: SubscribeIncomingMissionRequest, O: IncomingMissionResponse },
    { name: "SubscribeCurrentItemChanged", serverStreaming: true, options: {}, I: SubscribeCurrentItemChangedRequest, O: CurrentItemChangedResponse },
    { name: "SetCurrentItemComplete", options: { "mavsdk.options.async_type": "SYNC" }, I: SetCurrentItemCompleteRequest, O: SetCurrentItemCompleteResponse },
    { name: "SubscribeClearAll", serverStreaming: true, options: {}, I: SubscribeClearAllRequest, O: ClearAllResponse }
]);
