/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "calibration/calibration.proto" (package "mavsdk.rpc.calibration", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest
 */
export interface SubscribeCalibrateGyroRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.CalibrateGyroResponse
 */
export interface CalibrateGyroResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
     */
    calibrationResult?: CalibrationResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.ProgressData progress_data = 2;
     */
    progressData?: ProgressData; // Progress data
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest
 */
export interface SubscribeCalibrateAccelerometerRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.CalibrateAccelerometerResponse
 */
export interface CalibrateAccelerometerResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
     */
    calibrationResult?: CalibrationResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.ProgressData progress_data = 2;
     */
    progressData?: ProgressData; // Progress data
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest
 */
export interface SubscribeCalibrateMagnetometerRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.CalibrateMagnetometerResponse
 */
export interface CalibrateMagnetometerResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
     */
    calibrationResult?: CalibrationResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.ProgressData progress_data = 2;
     */
    progressData?: ProgressData; // Progress data
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest
 */
export interface SubscribeCalibrateLevelHorizonRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.CalibrateLevelHorizonResponse
 */
export interface CalibrateLevelHorizonResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
     */
    calibrationResult?: CalibrationResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.ProgressData progress_data = 2;
     */
    progressData?: ProgressData; // Progress data
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest
 */
export interface SubscribeCalibrateGimbalAccelerometerRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse
 */
export interface CalibrateGimbalAccelerometerResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
     */
    calibrationResult?: CalibrationResult;
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.ProgressData progress_data = 2;
     */
    progressData?: ProgressData; // Progress data
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.CancelRequest
 */
export interface CancelRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.calibration.CancelResponse
 */
export interface CancelResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
     */
    calibrationResult?: CalibrationResult;
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.calibration.CalibrationResult
 */
export interface CalibrationResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
     */
    result: CalibrationResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for calibration commands
 *
 * @generated from protobuf enum mavsdk.rpc.calibration.CalibrationResult.Result
 */
export enum CalibrationResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * The calibration succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Intermediate message showing progress or instructions on the next steps
     *
     * @generated from protobuf enum value: RESULT_NEXT = 2;
     */
    NEXT = 2,
    /**
     * Calibration failed
     *
     * @generated from protobuf enum value: RESULT_FAILED = 3;
     */
    FAILED = 3,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 4;
     */
    NO_SYSTEM = 4,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 5;
     */
    CONNECTION_ERROR = 5,
    /**
     * Vehicle is busy
     *
     * @generated from protobuf enum value: RESULT_BUSY = 6;
     */
    BUSY = 6,
    /**
     * Command refused by vehicle
     *
     * @generated from protobuf enum value: RESULT_COMMAND_DENIED = 7;
     */
    COMMAND_DENIED = 7,
    /**
     * Command timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 8;
     */
    TIMEOUT = 8,
    /**
     * Calibration process was cancelled
     *
     * @generated from protobuf enum value: RESULT_CANCELLED = 9;
     */
    CANCELLED = 9,
    /**
     * Calibration process failed since the vehicle is armed
     *
     * @generated from protobuf enum value: RESULT_FAILED_ARMED = 10;
     */
    FAILED_ARMED = 10,
    /**
     * Functionality not supported
     *
     * @generated from protobuf enum value: RESULT_UNSUPPORTED = 11;
     */
    UNSUPPORTED = 11
}
/**
 *
 * Progress data coming from calibration.
 *
 * Can be a progress percentage, or an instruction text.
 *
 * @generated from protobuf message mavsdk.rpc.calibration.ProgressData
 */
export interface ProgressData {
    /**
     * @generated from protobuf field: bool has_progress = 1;
     */
    hasProgress: boolean; // Whether this ProgressData contains a 'progress' status or not
    /**
     * @generated from protobuf field: float progress = 2;
     */
    progress: number; // Progress (percentage)
    /**
     * @generated from protobuf field: bool has_status_text = 3;
     */
    hasStatusText: boolean; // Whether this ProgressData contains a 'status_text' or not
    /**
     * @generated from protobuf field: string status_text = 4;
     */
    statusText: string; // Instruction text
}
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeCalibrateGyroRequest$Type extends MessageType<SubscribeCalibrateGyroRequest> {
    constructor() {
        super("mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest", []);
    }
    create(value?: PartialMessage<SubscribeCalibrateGyroRequest>): SubscribeCalibrateGyroRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeCalibrateGyroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeCalibrateGyroRequest): SubscribeCalibrateGyroRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeCalibrateGyroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest
 */
export const SubscribeCalibrateGyroRequest = new SubscribeCalibrateGyroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalibrateGyroResponse$Type extends MessageType<CalibrateGyroResponse> {
    constructor() {
        super("mavsdk.rpc.calibration.CalibrateGyroResponse", [
            { no: 1, name: "calibration_result", kind: "message", T: () => CalibrationResult },
            { no: 2, name: "progress_data", kind: "message", T: () => ProgressData }
        ]);
    }
    create(value?: PartialMessage<CalibrateGyroResponse>): CalibrateGyroResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CalibrateGyroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalibrateGyroResponse): CalibrateGyroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.calibration.CalibrationResult calibration_result */ 1:
                    message.calibrationResult = CalibrationResult.internalBinaryRead(reader, reader.uint32(), options, message.calibrationResult);
                    break;
                case /* mavsdk.rpc.calibration.ProgressData progress_data */ 2:
                    message.progressData = ProgressData.internalBinaryRead(reader, reader.uint32(), options, message.progressData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalibrateGyroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.calibration.CalibrationResult calibration_result = 1; */
        if (message.calibrationResult)
            CalibrationResult.internalBinaryWrite(message.calibrationResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.calibration.ProgressData progress_data = 2; */
        if (message.progressData)
            ProgressData.internalBinaryWrite(message.progressData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.CalibrateGyroResponse
 */
export const CalibrateGyroResponse = new CalibrateGyroResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeCalibrateAccelerometerRequest$Type extends MessageType<SubscribeCalibrateAccelerometerRequest> {
    constructor() {
        super("mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest", []);
    }
    create(value?: PartialMessage<SubscribeCalibrateAccelerometerRequest>): SubscribeCalibrateAccelerometerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeCalibrateAccelerometerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeCalibrateAccelerometerRequest): SubscribeCalibrateAccelerometerRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeCalibrateAccelerometerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest
 */
export const SubscribeCalibrateAccelerometerRequest = new SubscribeCalibrateAccelerometerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalibrateAccelerometerResponse$Type extends MessageType<CalibrateAccelerometerResponse> {
    constructor() {
        super("mavsdk.rpc.calibration.CalibrateAccelerometerResponse", [
            { no: 1, name: "calibration_result", kind: "message", T: () => CalibrationResult },
            { no: 2, name: "progress_data", kind: "message", T: () => ProgressData }
        ]);
    }
    create(value?: PartialMessage<CalibrateAccelerometerResponse>): CalibrateAccelerometerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CalibrateAccelerometerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalibrateAccelerometerResponse): CalibrateAccelerometerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.calibration.CalibrationResult calibration_result */ 1:
                    message.calibrationResult = CalibrationResult.internalBinaryRead(reader, reader.uint32(), options, message.calibrationResult);
                    break;
                case /* mavsdk.rpc.calibration.ProgressData progress_data */ 2:
                    message.progressData = ProgressData.internalBinaryRead(reader, reader.uint32(), options, message.progressData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalibrateAccelerometerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.calibration.CalibrationResult calibration_result = 1; */
        if (message.calibrationResult)
            CalibrationResult.internalBinaryWrite(message.calibrationResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.calibration.ProgressData progress_data = 2; */
        if (message.progressData)
            ProgressData.internalBinaryWrite(message.progressData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.CalibrateAccelerometerResponse
 */
export const CalibrateAccelerometerResponse = new CalibrateAccelerometerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeCalibrateMagnetometerRequest$Type extends MessageType<SubscribeCalibrateMagnetometerRequest> {
    constructor() {
        super("mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest", []);
    }
    create(value?: PartialMessage<SubscribeCalibrateMagnetometerRequest>): SubscribeCalibrateMagnetometerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeCalibrateMagnetometerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeCalibrateMagnetometerRequest): SubscribeCalibrateMagnetometerRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeCalibrateMagnetometerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest
 */
export const SubscribeCalibrateMagnetometerRequest = new SubscribeCalibrateMagnetometerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalibrateMagnetometerResponse$Type extends MessageType<CalibrateMagnetometerResponse> {
    constructor() {
        super("mavsdk.rpc.calibration.CalibrateMagnetometerResponse", [
            { no: 1, name: "calibration_result", kind: "message", T: () => CalibrationResult },
            { no: 2, name: "progress_data", kind: "message", T: () => ProgressData }
        ]);
    }
    create(value?: PartialMessage<CalibrateMagnetometerResponse>): CalibrateMagnetometerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CalibrateMagnetometerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalibrateMagnetometerResponse): CalibrateMagnetometerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.calibration.CalibrationResult calibration_result */ 1:
                    message.calibrationResult = CalibrationResult.internalBinaryRead(reader, reader.uint32(), options, message.calibrationResult);
                    break;
                case /* mavsdk.rpc.calibration.ProgressData progress_data */ 2:
                    message.progressData = ProgressData.internalBinaryRead(reader, reader.uint32(), options, message.progressData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalibrateMagnetometerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.calibration.CalibrationResult calibration_result = 1; */
        if (message.calibrationResult)
            CalibrationResult.internalBinaryWrite(message.calibrationResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.calibration.ProgressData progress_data = 2; */
        if (message.progressData)
            ProgressData.internalBinaryWrite(message.progressData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.CalibrateMagnetometerResponse
 */
export const CalibrateMagnetometerResponse = new CalibrateMagnetometerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeCalibrateLevelHorizonRequest$Type extends MessageType<SubscribeCalibrateLevelHorizonRequest> {
    constructor() {
        super("mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest", []);
    }
    create(value?: PartialMessage<SubscribeCalibrateLevelHorizonRequest>): SubscribeCalibrateLevelHorizonRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeCalibrateLevelHorizonRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeCalibrateLevelHorizonRequest): SubscribeCalibrateLevelHorizonRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeCalibrateLevelHorizonRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest
 */
export const SubscribeCalibrateLevelHorizonRequest = new SubscribeCalibrateLevelHorizonRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalibrateLevelHorizonResponse$Type extends MessageType<CalibrateLevelHorizonResponse> {
    constructor() {
        super("mavsdk.rpc.calibration.CalibrateLevelHorizonResponse", [
            { no: 1, name: "calibration_result", kind: "message", T: () => CalibrationResult },
            { no: 2, name: "progress_data", kind: "message", T: () => ProgressData }
        ]);
    }
    create(value?: PartialMessage<CalibrateLevelHorizonResponse>): CalibrateLevelHorizonResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CalibrateLevelHorizonResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalibrateLevelHorizonResponse): CalibrateLevelHorizonResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.calibration.CalibrationResult calibration_result */ 1:
                    message.calibrationResult = CalibrationResult.internalBinaryRead(reader, reader.uint32(), options, message.calibrationResult);
                    break;
                case /* mavsdk.rpc.calibration.ProgressData progress_data */ 2:
                    message.progressData = ProgressData.internalBinaryRead(reader, reader.uint32(), options, message.progressData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalibrateLevelHorizonResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.calibration.CalibrationResult calibration_result = 1; */
        if (message.calibrationResult)
            CalibrationResult.internalBinaryWrite(message.calibrationResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.calibration.ProgressData progress_data = 2; */
        if (message.progressData)
            ProgressData.internalBinaryWrite(message.progressData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.CalibrateLevelHorizonResponse
 */
export const CalibrateLevelHorizonResponse = new CalibrateLevelHorizonResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeCalibrateGimbalAccelerometerRequest$Type extends MessageType<SubscribeCalibrateGimbalAccelerometerRequest> {
    constructor() {
        super("mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest", []);
    }
    create(value?: PartialMessage<SubscribeCalibrateGimbalAccelerometerRequest>): SubscribeCalibrateGimbalAccelerometerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeCalibrateGimbalAccelerometerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeCalibrateGimbalAccelerometerRequest): SubscribeCalibrateGimbalAccelerometerRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeCalibrateGimbalAccelerometerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest
 */
export const SubscribeCalibrateGimbalAccelerometerRequest = new SubscribeCalibrateGimbalAccelerometerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalibrateGimbalAccelerometerResponse$Type extends MessageType<CalibrateGimbalAccelerometerResponse> {
    constructor() {
        super("mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse", [
            { no: 1, name: "calibration_result", kind: "message", T: () => CalibrationResult },
            { no: 2, name: "progress_data", kind: "message", T: () => ProgressData }
        ]);
    }
    create(value?: PartialMessage<CalibrateGimbalAccelerometerResponse>): CalibrateGimbalAccelerometerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CalibrateGimbalAccelerometerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalibrateGimbalAccelerometerResponse): CalibrateGimbalAccelerometerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.calibration.CalibrationResult calibration_result */ 1:
                    message.calibrationResult = CalibrationResult.internalBinaryRead(reader, reader.uint32(), options, message.calibrationResult);
                    break;
                case /* mavsdk.rpc.calibration.ProgressData progress_data */ 2:
                    message.progressData = ProgressData.internalBinaryRead(reader, reader.uint32(), options, message.progressData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalibrateGimbalAccelerometerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.calibration.CalibrationResult calibration_result = 1; */
        if (message.calibrationResult)
            CalibrationResult.internalBinaryWrite(message.calibrationResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mavsdk.rpc.calibration.ProgressData progress_data = 2; */
        if (message.progressData)
            ProgressData.internalBinaryWrite(message.progressData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse
 */
export const CalibrateGimbalAccelerometerResponse = new CalibrateGimbalAccelerometerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelRequest$Type extends MessageType<CancelRequest> {
    constructor() {
        super("mavsdk.rpc.calibration.CancelRequest", []);
    }
    create(value?: PartialMessage<CancelRequest>): CancelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CancelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelRequest): CancelRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CancelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.CancelRequest
 */
export const CancelRequest = new CancelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelResponse$Type extends MessageType<CancelResponse> {
    constructor() {
        super("mavsdk.rpc.calibration.CancelResponse", [
            { no: 1, name: "calibration_result", kind: "message", T: () => CalibrationResult }
        ]);
    }
    create(value?: PartialMessage<CancelResponse>): CancelResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CancelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelResponse): CancelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.calibration.CalibrationResult calibration_result */ 1:
                    message.calibrationResult = CalibrationResult.internalBinaryRead(reader, reader.uint32(), options, message.calibrationResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.calibration.CalibrationResult calibration_result = 1; */
        if (message.calibrationResult)
            CalibrationResult.internalBinaryWrite(message.calibrationResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.CancelResponse
 */
export const CancelResponse = new CancelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalibrationResult$Type extends MessageType<CalibrationResult> {
    constructor() {
        super("mavsdk.rpc.calibration.CalibrationResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.calibration.CalibrationResult.Result", CalibrationResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CalibrationResult>): CalibrationResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<CalibrationResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalibrationResult): CalibrationResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.calibration.CalibrationResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalibrationResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.calibration.CalibrationResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.CalibrationResult
 */
export const CalibrationResult = new CalibrationResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressData$Type extends MessageType<ProgressData> {
    constructor() {
        super("mavsdk.rpc.calibration.ProgressData", [
            { no: 1, name: "has_progress", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "mavsdk.options.default_value": "false" } },
            { no: 2, name: "progress", kind: "scalar", T: 2 /*ScalarType.FLOAT*/, options: { "mavsdk.options.default_value": "NaN" } },
            { no: 3, name: "has_status_text", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "mavsdk.options.default_value": "false" } },
            { no: 4, name: "status_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProgressData>): ProgressData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hasProgress = false;
        message.progress = 0;
        message.hasStatusText = false;
        message.statusText = "";
        if (value !== undefined)
            reflectionMergePartial<ProgressData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressData): ProgressData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool has_progress */ 1:
                    message.hasProgress = reader.bool();
                    break;
                case /* float progress */ 2:
                    message.progress = reader.float();
                    break;
                case /* bool has_status_text */ 3:
                    message.hasStatusText = reader.bool();
                    break;
                case /* string status_text */ 4:
                    message.statusText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProgressData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool has_progress = 1; */
        if (message.hasProgress !== false)
            writer.tag(1, WireType.Varint).bool(message.hasProgress);
        /* float progress = 2; */
        if (message.progress !== 0)
            writer.tag(2, WireType.Bit32).float(message.progress);
        /* bool has_status_text = 3; */
        if (message.hasStatusText !== false)
            writer.tag(3, WireType.Varint).bool(message.hasStatusText);
        /* string status_text = 4; */
        if (message.statusText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.statusText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.calibration.ProgressData
 */
export const ProgressData = new ProgressData$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.calibration.CalibrationService
 */
export const CalibrationService = new ServiceType("mavsdk.rpc.calibration.CalibrationService", [
    { name: "SubscribeCalibrateGyro", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC", "mavsdk.options.is_finite": true }, I: SubscribeCalibrateGyroRequest, O: CalibrateGyroResponse },
    { name: "SubscribeCalibrateAccelerometer", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC", "mavsdk.options.is_finite": true }, I: SubscribeCalibrateAccelerometerRequest, O: CalibrateAccelerometerResponse },
    { name: "SubscribeCalibrateMagnetometer", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC", "mavsdk.options.is_finite": true }, I: SubscribeCalibrateMagnetometerRequest, O: CalibrateMagnetometerResponse },
    { name: "SubscribeCalibrateLevelHorizon", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC", "mavsdk.options.is_finite": true }, I: SubscribeCalibrateLevelHorizonRequest, O: CalibrateLevelHorizonResponse },
    { name: "SubscribeCalibrateGimbalAccelerometer", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC", "mavsdk.options.is_finite": true }, I: SubscribeCalibrateGimbalAccelerometerRequest, O: CalibrateGimbalAccelerometerResponse },
    { name: "Cancel", options: { "mavsdk.options.async_type": "SYNC" }, I: CancelRequest, O: CancelResponse }
]);
