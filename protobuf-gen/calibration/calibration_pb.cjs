/* eslint-disable */

// source: calibration/calibration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CalibrateGyroResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CalibrationResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CalibrationResult.Result', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CancelRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.CancelResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.ProgressData', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.displayName = 'proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.CalibrateGyroResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.CalibrateGyroResponse.displayName = 'proto.mavsdk.rpc.calibration.CalibrateGyroResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.displayName = 'proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.displayName = 'proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.displayName = 'proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.displayName = 'proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.displayName = 'proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.displayName = 'proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.displayName = 'proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.displayName = 'proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.CancelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.CancelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.CancelRequest.displayName = 'proto.mavsdk.rpc.calibration.CancelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.CancelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.CancelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.CancelResponse.displayName = 'proto.mavsdk.rpc.calibration.CancelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.CalibrationResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.CalibrationResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.CalibrationResult.displayName = 'proto.mavsdk.rpc.calibration.CalibrationResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.calibration.ProgressData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.calibration.ProgressData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.calibration.ProgressData.displayName = 'proto.mavsdk.rpc.calibration.ProgressData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest;
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.CalibrateGyroResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    calibrationResult: (f = msg.getCalibrationResult()) && proto.mavsdk.rpc.calibration.CalibrationResult.toObject(includeInstance, f),
    progressData: (f = msg.getProgressData()) && proto.mavsdk.rpc.calibration.ProgressData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.CalibrateGyroResponse;
  return proto.mavsdk.rpc.calibration.CalibrateGyroResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.calibration.CalibrationResult;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinaryFromReader);
      msg.setCalibrationResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.calibration.ProgressData;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.ProgressData.deserializeBinaryFromReader);
      msg.setProgressData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.CalibrateGyroResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalibrationResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.calibration.CalibrationResult.serializeBinaryToWriter
    );
  }
  f = message.getProgressData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.calibration.ProgressData.serializeBinaryToWriter
    );
  }
};


/**
 * optional CalibrationResult calibration_result = 1;
 * @return {?proto.mavsdk.rpc.calibration.CalibrationResult}
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.getCalibrationResult = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.CalibrationResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.CalibrationResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.CalibrationResult|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.setCalibrationResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.clearCalibrationResult = function() {
  return this.setCalibrationResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.hasCalibrationResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProgressData progress_data = 2;
 * @return {?proto.mavsdk.rpc.calibration.ProgressData}
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.getProgressData = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.ProgressData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.ProgressData, 2));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.ProgressData|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.setProgressData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGyroResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.clearProgressData = function() {
  return this.setProgressData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateGyroResponse.prototype.hasProgressData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest;
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    calibrationResult: (f = msg.getCalibrationResult()) && proto.mavsdk.rpc.calibration.CalibrationResult.toObject(includeInstance, f),
    progressData: (f = msg.getProgressData()) && proto.mavsdk.rpc.calibration.ProgressData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse;
  return proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.calibration.CalibrationResult;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinaryFromReader);
      msg.setCalibrationResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.calibration.ProgressData;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.ProgressData.deserializeBinaryFromReader);
      msg.setProgressData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalibrationResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.calibration.CalibrationResult.serializeBinaryToWriter
    );
  }
  f = message.getProgressData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.calibration.ProgressData.serializeBinaryToWriter
    );
  }
};


/**
 * optional CalibrationResult calibration_result = 1;
 * @return {?proto.mavsdk.rpc.calibration.CalibrationResult}
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.getCalibrationResult = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.CalibrationResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.CalibrationResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.CalibrationResult|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.setCalibrationResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.clearCalibrationResult = function() {
  return this.setCalibrationResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.hasCalibrationResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProgressData progress_data = 2;
 * @return {?proto.mavsdk.rpc.calibration.ProgressData}
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.getProgressData = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.ProgressData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.ProgressData, 2));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.ProgressData|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.setProgressData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.clearProgressData = function() {
  return this.setProgressData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateAccelerometerResponse.prototype.hasProgressData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest;
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    calibrationResult: (f = msg.getCalibrationResult()) && proto.mavsdk.rpc.calibration.CalibrationResult.toObject(includeInstance, f),
    progressData: (f = msg.getProgressData()) && proto.mavsdk.rpc.calibration.ProgressData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse;
  return proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.calibration.CalibrationResult;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinaryFromReader);
      msg.setCalibrationResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.calibration.ProgressData;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.ProgressData.deserializeBinaryFromReader);
      msg.setProgressData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalibrationResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.calibration.CalibrationResult.serializeBinaryToWriter
    );
  }
  f = message.getProgressData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.calibration.ProgressData.serializeBinaryToWriter
    );
  }
};


/**
 * optional CalibrationResult calibration_result = 1;
 * @return {?proto.mavsdk.rpc.calibration.CalibrationResult}
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.getCalibrationResult = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.CalibrationResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.CalibrationResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.CalibrationResult|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.setCalibrationResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.clearCalibrationResult = function() {
  return this.setCalibrationResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.hasCalibrationResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProgressData progress_data = 2;
 * @return {?proto.mavsdk.rpc.calibration.ProgressData}
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.getProgressData = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.ProgressData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.ProgressData, 2));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.ProgressData|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.setProgressData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.clearProgressData = function() {
  return this.setProgressData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateMagnetometerResponse.prototype.hasProgressData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest;
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    calibrationResult: (f = msg.getCalibrationResult()) && proto.mavsdk.rpc.calibration.CalibrationResult.toObject(includeInstance, f),
    progressData: (f = msg.getProgressData()) && proto.mavsdk.rpc.calibration.ProgressData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse;
  return proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.calibration.CalibrationResult;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinaryFromReader);
      msg.setCalibrationResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.calibration.ProgressData;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.ProgressData.deserializeBinaryFromReader);
      msg.setProgressData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalibrationResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.calibration.CalibrationResult.serializeBinaryToWriter
    );
  }
  f = message.getProgressData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.calibration.ProgressData.serializeBinaryToWriter
    );
  }
};


/**
 * optional CalibrationResult calibration_result = 1;
 * @return {?proto.mavsdk.rpc.calibration.CalibrationResult}
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.getCalibrationResult = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.CalibrationResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.CalibrationResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.CalibrationResult|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.setCalibrationResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.clearCalibrationResult = function() {
  return this.setCalibrationResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.hasCalibrationResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProgressData progress_data = 2;
 * @return {?proto.mavsdk.rpc.calibration.ProgressData}
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.getProgressData = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.ProgressData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.ProgressData, 2));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.ProgressData|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.setProgressData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.clearProgressData = function() {
  return this.setProgressData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.prototype.hasProgressData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest;
  return proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    calibrationResult: (f = msg.getCalibrationResult()) && proto.mavsdk.rpc.calibration.CalibrationResult.toObject(includeInstance, f),
    progressData: (f = msg.getProgressData()) && proto.mavsdk.rpc.calibration.ProgressData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse;
  return proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse}
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.calibration.CalibrationResult;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinaryFromReader);
      msg.setCalibrationResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.calibration.ProgressData;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.ProgressData.deserializeBinaryFromReader);
      msg.setProgressData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalibrationResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.calibration.CalibrationResult.serializeBinaryToWriter
    );
  }
  f = message.getProgressData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.calibration.ProgressData.serializeBinaryToWriter
    );
  }
};


/**
 * optional CalibrationResult calibration_result = 1;
 * @return {?proto.mavsdk.rpc.calibration.CalibrationResult}
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.getCalibrationResult = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.CalibrationResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.CalibrationResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.CalibrationResult|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.setCalibrationResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.clearCalibrationResult = function() {
  return this.setCalibrationResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.hasCalibrationResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProgressData progress_data = 2;
 * @return {?proto.mavsdk.rpc.calibration.ProgressData}
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.getProgressData = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.ProgressData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.ProgressData, 2));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.ProgressData|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse} returns this
*/
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.setProgressData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse} returns this
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.clearProgressData = function() {
  return this.setProgressData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.prototype.hasProgressData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.CancelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.CancelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.CancelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CancelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.CancelRequest}
 */
proto.mavsdk.rpc.calibration.CancelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.CancelRequest;
  return proto.mavsdk.rpc.calibration.CancelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.CancelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.CancelRequest}
 */
proto.mavsdk.rpc.calibration.CancelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.CancelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.CancelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.CancelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CancelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.CancelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.CancelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.CancelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CancelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    calibrationResult: (f = msg.getCalibrationResult()) && proto.mavsdk.rpc.calibration.CalibrationResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.CancelResponse}
 */
proto.mavsdk.rpc.calibration.CancelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.CancelResponse;
  return proto.mavsdk.rpc.calibration.CancelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.CancelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.CancelResponse}
 */
proto.mavsdk.rpc.calibration.CancelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.calibration.CalibrationResult;
      reader.readMessage(value,proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinaryFromReader);
      msg.setCalibrationResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.CancelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.CancelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.CancelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CancelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalibrationResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.calibration.CalibrationResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional CalibrationResult calibration_result = 1;
 * @return {?proto.mavsdk.rpc.calibration.CalibrationResult}
 */
proto.mavsdk.rpc.calibration.CancelResponse.prototype.getCalibrationResult = function() {
  return /** @type{?proto.mavsdk.rpc.calibration.CalibrationResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.calibration.CalibrationResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.calibration.CalibrationResult|undefined} value
 * @return {!proto.mavsdk.rpc.calibration.CancelResponse} returns this
*/
proto.mavsdk.rpc.calibration.CancelResponse.prototype.setCalibrationResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.calibration.CancelResponse} returns this
 */
proto.mavsdk.rpc.calibration.CancelResponse.prototype.clearCalibrationResult = function() {
  return this.setCalibrationResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.CancelResponse.prototype.hasCalibrationResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.CalibrationResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.CalibrationResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.CalibrationResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrationResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.CalibrationResult}
 */
proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.CalibrationResult;
  return proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.CalibrationResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.CalibrationResult}
 */
proto.mavsdk.rpc.calibration.CalibrationResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.calibration.CalibrationResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.CalibrationResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.CalibrationResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.CalibrationResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.CalibrationResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.calibration.CalibrationResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_NEXT: 2,
  RESULT_FAILED: 3,
  RESULT_NO_SYSTEM: 4,
  RESULT_CONNECTION_ERROR: 5,
  RESULT_BUSY: 6,
  RESULT_COMMAND_DENIED: 7,
  RESULT_TIMEOUT: 8,
  RESULT_CANCELLED: 9,
  RESULT_FAILED_ARMED: 10,
  RESULT_UNSUPPORTED: 11
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.calibration.CalibrationResult.Result}
 */
proto.mavsdk.rpc.calibration.CalibrationResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.calibration.CalibrationResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.calibration.CalibrationResult.Result} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrationResult} returns this
 */
proto.mavsdk.rpc.calibration.CalibrationResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.calibration.CalibrationResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.calibration.CalibrationResult} returns this
 */
proto.mavsdk.rpc.calibration.CalibrationResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.calibration.ProgressData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.calibration.ProgressData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.ProgressData.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasProgress: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    progress: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    hasStatusText: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    statusText: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.calibration.ProgressData}
 */
proto.mavsdk.rpc.calibration.ProgressData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.calibration.ProgressData;
  return proto.mavsdk.rpc.calibration.ProgressData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.calibration.ProgressData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.calibration.ProgressData}
 */
proto.mavsdk.rpc.calibration.ProgressData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasProgress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProgress(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasStatusText(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.calibration.ProgressData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.calibration.ProgressData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.calibration.ProgressData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasProgress();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHasStatusText();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getStatusText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool has_progress = 1;
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.getHasProgress = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.calibration.ProgressData} returns this
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.setHasProgress = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional float progress = 2;
 * @return {number}
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.calibration.ProgressData} returns this
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.setProgress = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool has_status_text = 3;
 * @return {boolean}
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.getHasStatusText = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.calibration.ProgressData} returns this
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.setHasStatusText = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string status_text = 4;
 * @return {string}
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.getStatusText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.calibration.ProgressData} returns this
 */
proto.mavsdk.rpc.calibration.ProgressData.prototype.setStatusText = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.mavsdk.rpc.calibration);


// fix autocompletion
module.exports = exports;
