/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "shell/shell.proto" (package "mavsdk.rpc.shell", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.shell.SendRequest
 */
export interface SendRequest {
    /**
     * @generated from protobuf field: string command = 1;
     */
    command: string; // The command line to send
}
/**
 * @generated from protobuf message mavsdk.rpc.shell.SendResponse
 */
export interface SendResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.shell.ShellResult shell_result = 1;
     */
    shellResult?: ShellResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.shell.SubscribeReceiveRequest
 */
export interface SubscribeReceiveRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.shell.ReceiveResponse
 */
export interface ReceiveResponse {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string; // Received data.
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.shell.ShellResult
 */
export interface ShellResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.shell.ShellResult.Result result = 1;
     */
    result: ShellResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for shell requests
 *
 * @generated from protobuf enum mavsdk.rpc.shell.ShellResult.Result
 */
export enum ShellResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * No system is connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 2;
     */
    NO_SYSTEM = 2,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 3;
     */
    CONNECTION_ERROR = 3,
    /**
     * Response was not received
     *
     * @generated from protobuf enum value: RESULT_NO_RESPONSE = 4;
     */
    NO_RESPONSE = 4,
    /**
     * Shell busy (transfer in progress)
     *
     * @generated from protobuf enum value: RESULT_BUSY = 5;
     */
    BUSY = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class SendRequest$Type extends MessageType<SendRequest> {
    constructor() {
        super("mavsdk.rpc.shell.SendRequest", [
            { no: 1, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendRequest>): SendRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.command = "";
        if (value !== undefined)
            reflectionMergePartial<SendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendRequest): SendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string command */ 1:
                    message.command = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string command = 1; */
        if (message.command !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.command);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.shell.SendRequest
 */
export const SendRequest = new SendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendResponse$Type extends MessageType<SendResponse> {
    constructor() {
        super("mavsdk.rpc.shell.SendResponse", [
            { no: 1, name: "shell_result", kind: "message", T: () => ShellResult }
        ]);
    }
    create(value?: PartialMessage<SendResponse>): SendResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendResponse): SendResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.shell.ShellResult shell_result */ 1:
                    message.shellResult = ShellResult.internalBinaryRead(reader, reader.uint32(), options, message.shellResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.shell.ShellResult shell_result = 1; */
        if (message.shellResult)
            ShellResult.internalBinaryWrite(message.shellResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.shell.SendResponse
 */
export const SendResponse = new SendResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeReceiveRequest$Type extends MessageType<SubscribeReceiveRequest> {
    constructor() {
        super("mavsdk.rpc.shell.SubscribeReceiveRequest", []);
    }
    create(value?: PartialMessage<SubscribeReceiveRequest>): SubscribeReceiveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeReceiveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeReceiveRequest): SubscribeReceiveRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeReceiveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.shell.SubscribeReceiveRequest
 */
export const SubscribeReceiveRequest = new SubscribeReceiveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiveResponse$Type extends MessageType<ReceiveResponse> {
    constructor() {
        super("mavsdk.rpc.shell.ReceiveResponse", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReceiveResponse>): ReceiveResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = "";
        if (value !== undefined)
            reflectionMergePartial<ReceiveResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiveResponse): ReceiveResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiveResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.shell.ReceiveResponse
 */
export const ReceiveResponse = new ReceiveResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShellResult$Type extends MessageType<ShellResult> {
    constructor() {
        super("mavsdk.rpc.shell.ShellResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.shell.ShellResult.Result", ShellResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShellResult>): ShellResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<ShellResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShellResult): ShellResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.shell.ShellResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShellResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.shell.ShellResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.shell.ShellResult
 */
export const ShellResult = new ShellResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.shell.ShellService
 */
export const ShellService = new ServiceType("mavsdk.rpc.shell.ShellService", [
    { name: "Send", options: { "mavsdk.options.async_type": "SYNC" }, I: SendRequest, O: SendResponse },
    { name: "SubscribeReceive", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC" }, I: SubscribeReceiveRequest, O: ReceiveResponse }
]);
