/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "shell/shell.proto" (package "mavsdk.rpc.shell", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ShellService } from "./shell";
import type { ReceiveResponse } from "./shell";
import type { SubscribeReceiveRequest } from "./shell";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SendResponse } from "./shell";
import type { SendRequest } from "./shell";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * *
 * Allow to communicate with the vehicle's system shell.
 *
 * @generated from protobuf service mavsdk.rpc.shell.ShellService
 */
export interface IShellServiceClient {
    /**
     *
     * Send a command line.
     *
     * @generated from protobuf rpc: Send(mavsdk.rpc.shell.SendRequest) returns (mavsdk.rpc.shell.SendResponse);
     */
    send(input: SendRequest, options?: RpcOptions): UnaryCall<SendRequest, SendResponse>;
    /**
     *
     * Receive feedback from a sent command line.
     *
     * This subscription needs to be made before a command line is sent, otherwise, no response will be sent.
     *
     * @generated from protobuf rpc: SubscribeReceive(mavsdk.rpc.shell.SubscribeReceiveRequest) returns (stream mavsdk.rpc.shell.ReceiveResponse);
     */
    subscribeReceive(input: SubscribeReceiveRequest, options?: RpcOptions): ServerStreamingCall<SubscribeReceiveRequest, ReceiveResponse>;
}
/**
 * *
 * Allow to communicate with the vehicle's system shell.
 *
 * @generated from protobuf service mavsdk.rpc.shell.ShellService
 */
export class ShellServiceClient implements IShellServiceClient, ServiceInfo {
    typeName = ShellService.typeName;
    methods = ShellService.methods;
    options = ShellService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *
     * Send a command line.
     *
     * @generated from protobuf rpc: Send(mavsdk.rpc.shell.SendRequest) returns (mavsdk.rpc.shell.SendResponse);
     */
    send(input: SendRequest, options?: RpcOptions): UnaryCall<SendRequest, SendResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendRequest, SendResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Receive feedback from a sent command line.
     *
     * This subscription needs to be made before a command line is sent, otherwise, no response will be sent.
     *
     * @generated from protobuf rpc: SubscribeReceive(mavsdk.rpc.shell.SubscribeReceiveRequest) returns (stream mavsdk.rpc.shell.ReceiveResponse);
     */
    subscribeReceive(input: SubscribeReceiveRequest, options?: RpcOptions): ServerStreamingCall<SubscribeReceiveRequest, ReceiveResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeReceiveRequest, ReceiveResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
