/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "param/param.proto" (package "mavsdk.rpc.param", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.param.GetParamIntRequest
 */
export interface GetParamIntRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param.GetParamIntResponse
 */
export interface GetParamIntResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ParamResult param_result = 1;
     */
    paramResult?: ParamResult;
    /**
     * @generated from protobuf field: int32 value = 2;
     */
    value: number; // Value of the requested parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param.SetParamIntRequest
 */
export interface SetParamIntRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter to set
    /**
     * @generated from protobuf field: int32 value = 2;
     */
    value: number; // Value the parameter should be set to
}
/**
 * @generated from protobuf message mavsdk.rpc.param.SetParamIntResponse
 */
export interface SetParamIntResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ParamResult param_result = 1;
     */
    paramResult?: ParamResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.param.GetParamFloatRequest
 */
export interface GetParamFloatRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param.GetParamFloatResponse
 */
export interface GetParamFloatResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ParamResult param_result = 1;
     */
    paramResult?: ParamResult;
    /**
     * @generated from protobuf field: float value = 2;
     */
    value: number; // Value of the requested parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param.SetParamFloatRequest
 */
export interface SetParamFloatRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter to set
    /**
     * @generated from protobuf field: float value = 2;
     */
    value: number; // Value the parameter should be set to
}
/**
 * @generated from protobuf message mavsdk.rpc.param.SetParamFloatResponse
 */
export interface SetParamFloatResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ParamResult param_result = 1;
     */
    paramResult?: ParamResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.param.GetParamCustomRequest
 */
export interface GetParamCustomRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param.GetParamCustomResponse
 */
export interface GetParamCustomResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ParamResult param_result = 1;
     */
    paramResult?: ParamResult;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string; // Value of the requested parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param.SetParamCustomRequest
 */
export interface SetParamCustomRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter to set
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string; // Value the parameter should be set to
}
/**
 * @generated from protobuf message mavsdk.rpc.param.SetParamCustomResponse
 */
export interface SetParamCustomResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ParamResult param_result = 1;
     */
    paramResult?: ParamResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.param.GetAllParamsRequest
 */
export interface GetAllParamsRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.param.GetAllParamsResponse
 */
export interface GetAllParamsResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.AllParams params = 1;
     */
    params?: AllParams; // Collection of all parameters
}
/**
 * @generated from protobuf message mavsdk.rpc.param.SelectComponentResponse
 */
export interface SelectComponentResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ParamResult param_result = 1;
     */
    paramResult?: ParamResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.param.SelectComponentRequest
 */
export interface SelectComponentRequest {
    /**
     * @generated from protobuf field: int32 component_id = 1;
     */
    componentId: number; // MAVLink component Id of component to select
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ProtocolVersion protocol_version = 2;
     */
    protocolVersion: ProtocolVersion; // Protocol version
}
/**
 *
 * Type for integer parameters.
 *
 * @generated from protobuf message mavsdk.rpc.param.IntParam
 */
export interface IntParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
    /**
     * @generated from protobuf field: int32 value = 2;
     */
    value: number; // Value of the parameter
}
/**
 *
 * Type for float parameters.
 *
 * @generated from protobuf message mavsdk.rpc.param.FloatParam
 */
export interface FloatParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
    /**
     * @generated from protobuf field: float value = 2;
     */
    value: number; // Value of the parameter
}
/**
 *
 * Type for custom parameters
 *
 * @generated from protobuf message mavsdk.rpc.param.CustomParam
 */
export interface CustomParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string; // Value of the parameter (max len 128 bytes)
}
/**
 *
 * Type collecting all integer, float, and custom parameters.
 *
 * @generated from protobuf message mavsdk.rpc.param.AllParams
 */
export interface AllParams {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.param.IntParam int_params = 1;
     */
    intParams: IntParam[]; // Collection of all parameter names and values of type int
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.param.FloatParam float_params = 2;
     */
    floatParams: FloatParam[]; // Collection of all parameter names and values of type float
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.param.CustomParam custom_params = 3;
     */
    customParams: CustomParam[]; // Collection of all parameter names and values of type custom
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.param.ParamResult
 */
export interface ParamResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.param.ParamResult.Result result = 1;
     */
    result: ParamResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for param requests.
 *
 * @generated from protobuf enum mavsdk.rpc.param.ParamResult.Result
 */
export enum ParamResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Request timed out
     *
     * @generated from protobuf enum value: RESULT_TIMEOUT = 2;
     */
    TIMEOUT = 2,
    /**
     * Connection error
     *
     * @generated from protobuf enum value: RESULT_CONNECTION_ERROR = 3;
     */
    CONNECTION_ERROR = 3,
    /**
     * Wrong type
     *
     * @generated from protobuf enum value: RESULT_WRONG_TYPE = 4;
     */
    WRONG_TYPE = 4,
    /**
     * Parameter name too long (> 16)
     *
     * @generated from protobuf enum value: RESULT_PARAM_NAME_TOO_LONG = 5;
     */
    PARAM_NAME_TOO_LONG = 5,
    /**
     * No system connected
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 6;
     */
    NO_SYSTEM = 6,
    /**
     * Param value too long (> 128)
     *
     * @generated from protobuf enum value: RESULT_PARAM_VALUE_TOO_LONG = 7;
     */
    PARAM_VALUE_TOO_LONG = 7,
    /**
     * Operation failed.
     *
     * @generated from protobuf enum value: RESULT_FAILED = 8;
     */
    FAILED = 8
}
/**
 * Parameter version
 *
 * @generated from protobuf enum mavsdk.rpc.param.ProtocolVersion
 */
export enum ProtocolVersion {
    /**
     * Original v1 version
     *
     * @generated from protobuf enum value: PROTOCOL_VERSION_V1 = 0;
     */
    V1 = 0,
    /**
     * Extended param version
     *
     * @generated from protobuf enum value: PROTOCOL_VERSION_EXT = 1;
     */
    EXT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class GetParamIntRequest$Type extends MessageType<GetParamIntRequest> {
    constructor() {
        super("mavsdk.rpc.param.GetParamIntRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetParamIntRequest>): GetParamIntRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<GetParamIntRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParamIntRequest): GetParamIntRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParamIntRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.GetParamIntRequest
 */
export const GetParamIntRequest = new GetParamIntRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParamIntResponse$Type extends MessageType<GetParamIntResponse> {
    constructor() {
        super("mavsdk.rpc.param.GetParamIntResponse", [
            { no: 1, name: "param_result", kind: "message", T: () => ParamResult },
            { no: 2, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetParamIntResponse>): GetParamIntResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<GetParamIntResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParamIntResponse): GetParamIntResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.ParamResult param_result */ 1:
                    message.paramResult = ParamResult.internalBinaryRead(reader, reader.uint32(), options, message.paramResult);
                    break;
                case /* int32 value */ 2:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParamIntResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.ParamResult param_result = 1; */
        if (message.paramResult)
            ParamResult.internalBinaryWrite(message.paramResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.GetParamIntResponse
 */
export const GetParamIntResponse = new GetParamIntResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetParamIntRequest$Type extends MessageType<SetParamIntRequest> {
    constructor() {
        super("mavsdk.rpc.param.SetParamIntRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetParamIntRequest>): SetParamIntRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<SetParamIntRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetParamIntRequest): SetParamIntRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 value */ 2:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetParamIntRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.SetParamIntRequest
 */
export const SetParamIntRequest = new SetParamIntRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetParamIntResponse$Type extends MessageType<SetParamIntResponse> {
    constructor() {
        super("mavsdk.rpc.param.SetParamIntResponse", [
            { no: 1, name: "param_result", kind: "message", T: () => ParamResult }
        ]);
    }
    create(value?: PartialMessage<SetParamIntResponse>): SetParamIntResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetParamIntResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetParamIntResponse): SetParamIntResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.ParamResult param_result */ 1:
                    message.paramResult = ParamResult.internalBinaryRead(reader, reader.uint32(), options, message.paramResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetParamIntResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.ParamResult param_result = 1; */
        if (message.paramResult)
            ParamResult.internalBinaryWrite(message.paramResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.SetParamIntResponse
 */
export const SetParamIntResponse = new SetParamIntResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParamFloatRequest$Type extends MessageType<GetParamFloatRequest> {
    constructor() {
        super("mavsdk.rpc.param.GetParamFloatRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetParamFloatRequest>): GetParamFloatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<GetParamFloatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParamFloatRequest): GetParamFloatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParamFloatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.GetParamFloatRequest
 */
export const GetParamFloatRequest = new GetParamFloatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParamFloatResponse$Type extends MessageType<GetParamFloatResponse> {
    constructor() {
        super("mavsdk.rpc.param.GetParamFloatResponse", [
            { no: 1, name: "param_result", kind: "message", T: () => ParamResult },
            { no: 2, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<GetParamFloatResponse>): GetParamFloatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<GetParamFloatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParamFloatResponse): GetParamFloatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.ParamResult param_result */ 1:
                    message.paramResult = ParamResult.internalBinaryRead(reader, reader.uint32(), options, message.paramResult);
                    break;
                case /* float value */ 2:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParamFloatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.ParamResult param_result = 1; */
        if (message.paramResult)
            ParamResult.internalBinaryWrite(message.paramResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.GetParamFloatResponse
 */
export const GetParamFloatResponse = new GetParamFloatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetParamFloatRequest$Type extends MessageType<SetParamFloatRequest> {
    constructor() {
        super("mavsdk.rpc.param.SetParamFloatRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SetParamFloatRequest>): SetParamFloatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<SetParamFloatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetParamFloatRequest): SetParamFloatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* float value */ 2:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetParamFloatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* float value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.SetParamFloatRequest
 */
export const SetParamFloatRequest = new SetParamFloatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetParamFloatResponse$Type extends MessageType<SetParamFloatResponse> {
    constructor() {
        super("mavsdk.rpc.param.SetParamFloatResponse", [
            { no: 1, name: "param_result", kind: "message", T: () => ParamResult }
        ]);
    }
    create(value?: PartialMessage<SetParamFloatResponse>): SetParamFloatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetParamFloatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetParamFloatResponse): SetParamFloatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.ParamResult param_result */ 1:
                    message.paramResult = ParamResult.internalBinaryRead(reader, reader.uint32(), options, message.paramResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetParamFloatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.ParamResult param_result = 1; */
        if (message.paramResult)
            ParamResult.internalBinaryWrite(message.paramResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.SetParamFloatResponse
 */
export const SetParamFloatResponse = new SetParamFloatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParamCustomRequest$Type extends MessageType<GetParamCustomRequest> {
    constructor() {
        super("mavsdk.rpc.param.GetParamCustomRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetParamCustomRequest>): GetParamCustomRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<GetParamCustomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParamCustomRequest): GetParamCustomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParamCustomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.GetParamCustomRequest
 */
export const GetParamCustomRequest = new GetParamCustomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParamCustomResponse$Type extends MessageType<GetParamCustomResponse> {
    constructor() {
        super("mavsdk.rpc.param.GetParamCustomResponse", [
            { no: 1, name: "param_result", kind: "message", T: () => ParamResult },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetParamCustomResponse>): GetParamCustomResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<GetParamCustomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParamCustomResponse): GetParamCustomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.ParamResult param_result */ 1:
                    message.paramResult = ParamResult.internalBinaryRead(reader, reader.uint32(), options, message.paramResult);
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParamCustomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.ParamResult param_result = 1; */
        if (message.paramResult)
            ParamResult.internalBinaryWrite(message.paramResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.GetParamCustomResponse
 */
export const GetParamCustomResponse = new GetParamCustomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetParamCustomRequest$Type extends MessageType<SetParamCustomRequest> {
    constructor() {
        super("mavsdk.rpc.param.SetParamCustomRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetParamCustomRequest>): SetParamCustomRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<SetParamCustomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetParamCustomRequest): SetParamCustomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetParamCustomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.SetParamCustomRequest
 */
export const SetParamCustomRequest = new SetParamCustomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetParamCustomResponse$Type extends MessageType<SetParamCustomResponse> {
    constructor() {
        super("mavsdk.rpc.param.SetParamCustomResponse", [
            { no: 1, name: "param_result", kind: "message", T: () => ParamResult }
        ]);
    }
    create(value?: PartialMessage<SetParamCustomResponse>): SetParamCustomResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetParamCustomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetParamCustomResponse): SetParamCustomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.ParamResult param_result */ 1:
                    message.paramResult = ParamResult.internalBinaryRead(reader, reader.uint32(), options, message.paramResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetParamCustomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.ParamResult param_result = 1; */
        if (message.paramResult)
            ParamResult.internalBinaryWrite(message.paramResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.SetParamCustomResponse
 */
export const SetParamCustomResponse = new SetParamCustomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllParamsRequest$Type extends MessageType<GetAllParamsRequest> {
    constructor() {
        super("mavsdk.rpc.param.GetAllParamsRequest", []);
    }
    create(value?: PartialMessage<GetAllParamsRequest>): GetAllParamsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAllParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllParamsRequest): GetAllParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.GetAllParamsRequest
 */
export const GetAllParamsRequest = new GetAllParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllParamsResponse$Type extends MessageType<GetAllParamsResponse> {
    constructor() {
        super("mavsdk.rpc.param.GetAllParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => AllParams }
        ]);
    }
    create(value?: PartialMessage<GetAllParamsResponse>): GetAllParamsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAllParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllParamsResponse): GetAllParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.AllParams params */ 1:
                    message.params = AllParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.AllParams params = 1; */
        if (message.params)
            AllParams.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.GetAllParamsResponse
 */
export const GetAllParamsResponse = new GetAllParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectComponentResponse$Type extends MessageType<SelectComponentResponse> {
    constructor() {
        super("mavsdk.rpc.param.SelectComponentResponse", [
            { no: 1, name: "param_result", kind: "message", T: () => ParamResult }
        ]);
    }
    create(value?: PartialMessage<SelectComponentResponse>): SelectComponentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SelectComponentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectComponentResponse): SelectComponentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.ParamResult param_result */ 1:
                    message.paramResult = ParamResult.internalBinaryRead(reader, reader.uint32(), options, message.paramResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectComponentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.ParamResult param_result = 1; */
        if (message.paramResult)
            ParamResult.internalBinaryWrite(message.paramResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.SelectComponentResponse
 */
export const SelectComponentResponse = new SelectComponentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectComponentRequest$Type extends MessageType<SelectComponentRequest> {
    constructor() {
        super("mavsdk.rpc.param.SelectComponentRequest", [
            { no: 1, name: "component_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "protocol_version", kind: "enum", T: () => ["mavsdk.rpc.param.ProtocolVersion", ProtocolVersion, "PROTOCOL_VERSION_"] }
        ]);
    }
    create(value?: PartialMessage<SelectComponentRequest>): SelectComponentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.componentId = 0;
        message.protocolVersion = 0;
        if (value !== undefined)
            reflectionMergePartial<SelectComponentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectComponentRequest): SelectComponentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 component_id */ 1:
                    message.componentId = reader.int32();
                    break;
                case /* mavsdk.rpc.param.ProtocolVersion protocol_version */ 2:
                    message.protocolVersion = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectComponentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 component_id = 1; */
        if (message.componentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.componentId);
        /* mavsdk.rpc.param.ProtocolVersion protocol_version = 2; */
        if (message.protocolVersion !== 0)
            writer.tag(2, WireType.Varint).int32(message.protocolVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.SelectComponentRequest
 */
export const SelectComponentRequest = new SelectComponentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntParam$Type extends MessageType<IntParam> {
    constructor() {
        super("mavsdk.rpc.param.IntParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IntParam>): IntParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<IntParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntParam): IntParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 value */ 2:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.IntParam
 */
export const IntParam = new IntParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FloatParam$Type extends MessageType<FloatParam> {
    constructor() {
        super("mavsdk.rpc.param.FloatParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<FloatParam>): FloatParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<FloatParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FloatParam): FloatParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* float value */ 2:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FloatParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* float value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.FloatParam
 */
export const FloatParam = new FloatParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomParam$Type extends MessageType<CustomParam> {
    constructor() {
        super("mavsdk.rpc.param.CustomParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomParam>): CustomParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CustomParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomParam): CustomParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.CustomParam
 */
export const CustomParam = new CustomParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllParams$Type extends MessageType<AllParams> {
    constructor() {
        super("mavsdk.rpc.param.AllParams", [
            { no: 1, name: "int_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IntParam },
            { no: 2, name: "float_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FloatParam },
            { no: 3, name: "custom_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomParam }
        ]);
    }
    create(value?: PartialMessage<AllParams>): AllParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.intParams = [];
        message.floatParams = [];
        message.customParams = [];
        if (value !== undefined)
            reflectionMergePartial<AllParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllParams): AllParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.param.IntParam int_params */ 1:
                    message.intParams.push(IntParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mavsdk.rpc.param.FloatParam float_params */ 2:
                    message.floatParams.push(FloatParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mavsdk.rpc.param.CustomParam custom_params */ 3:
                    message.customParams.push(CustomParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.param.IntParam int_params = 1; */
        for (let i = 0; i < message.intParams.length; i++)
            IntParam.internalBinaryWrite(message.intParams[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated mavsdk.rpc.param.FloatParam float_params = 2; */
        for (let i = 0; i < message.floatParams.length; i++)
            FloatParam.internalBinaryWrite(message.floatParams[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated mavsdk.rpc.param.CustomParam custom_params = 3; */
        for (let i = 0; i < message.customParams.length; i++)
            CustomParam.internalBinaryWrite(message.customParams[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.AllParams
 */
export const AllParams = new AllParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParamResult$Type extends MessageType<ParamResult> {
    constructor() {
        super("mavsdk.rpc.param.ParamResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.param.ParamResult.Result", ParamResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ParamResult>): ParamResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<ParamResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParamResult): ParamResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param.ParamResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParamResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param.ParamResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param.ParamResult
 */
export const ParamResult = new ParamResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.param.ParamService
 */
export const ParamService = new ServiceType("mavsdk.rpc.param.ParamService", [
    { name: "GetParamInt", options: { "mavsdk.options.async_type": "SYNC" }, I: GetParamIntRequest, O: GetParamIntResponse },
    { name: "SetParamInt", options: { "mavsdk.options.async_type": "SYNC" }, I: SetParamIntRequest, O: SetParamIntResponse },
    { name: "GetParamFloat", options: { "mavsdk.options.async_type": "SYNC" }, I: GetParamFloatRequest, O: GetParamFloatResponse },
    { name: "SetParamFloat", options: { "mavsdk.options.async_type": "SYNC" }, I: SetParamFloatRequest, O: SetParamFloatResponse },
    { name: "GetParamCustom", options: { "mavsdk.options.async_type": "SYNC" }, I: GetParamCustomRequest, O: GetParamCustomResponse },
    { name: "SetParamCustom", options: { "mavsdk.options.async_type": "SYNC" }, I: SetParamCustomRequest, O: SetParamCustomResponse },
    { name: "GetAllParams", options: { "mavsdk.options.async_type": "SYNC" }, I: GetAllParamsRequest, O: GetAllParamsResponse },
    { name: "SelectComponent", options: { "mavsdk.options.async_type": "SYNC" }, I: SelectComponentRequest, O: SelectComponentResponse }
]);
