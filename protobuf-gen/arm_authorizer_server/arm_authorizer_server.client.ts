/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "arm_authorizer_server/arm_authorizer_server.proto" (package "mavsdk.rpc.arm_authorizer_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ArmAuthorizerServerService } from "./arm_authorizer_server";
import type { RejectArmAuthorizationResponse } from "./arm_authorizer_server";
import type { RejectArmAuthorizationRequest } from "./arm_authorizer_server";
import type { AcceptArmAuthorizationResponse } from "./arm_authorizer_server";
import type { AcceptArmAuthorizationRequest } from "./arm_authorizer_server";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ArmAuthorizationResponse } from "./arm_authorizer_server";
import type { SubscribeArmAuthorizationRequest } from "./arm_authorizer_server";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService
 */
export interface IArmAuthorizerServerServiceClient {
    /**
     * Subscribe to arm authorization request messages. Each request received should respond to using RespondArmAuthorization
     *
     * @generated from protobuf rpc: SubscribeArmAuthorization(mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest) returns (stream mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse);
     */
    subscribeArmAuthorization(input: SubscribeArmAuthorizationRequest, options?: RpcOptions): ServerStreamingCall<SubscribeArmAuthorizationRequest, ArmAuthorizationResponse>;
    /**
     * Authorize arm for the specific time
     *
     * @generated from protobuf rpc: AcceptArmAuthorization(mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest) returns (mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse);
     */
    acceptArmAuthorization(input: AcceptArmAuthorizationRequest, options?: RpcOptions): UnaryCall<AcceptArmAuthorizationRequest, AcceptArmAuthorizationResponse>;
    /**
     * Reject arm authorization request
     *
     * @generated from protobuf rpc: RejectArmAuthorization(mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest) returns (mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse);
     */
    rejectArmAuthorization(input: RejectArmAuthorizationRequest, options?: RpcOptions): UnaryCall<RejectArmAuthorizationRequest, RejectArmAuthorizationResponse>;
}
/**
 * @generated from protobuf service mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService
 */
export class ArmAuthorizerServerServiceClient implements IArmAuthorizerServerServiceClient, ServiceInfo {
    typeName = ArmAuthorizerServerService.typeName;
    methods = ArmAuthorizerServerService.methods;
    options = ArmAuthorizerServerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Subscribe to arm authorization request messages. Each request received should respond to using RespondArmAuthorization
     *
     * @generated from protobuf rpc: SubscribeArmAuthorization(mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest) returns (stream mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse);
     */
    subscribeArmAuthorization(input: SubscribeArmAuthorizationRequest, options?: RpcOptions): ServerStreamingCall<SubscribeArmAuthorizationRequest, ArmAuthorizationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeArmAuthorizationRequest, ArmAuthorizationResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Authorize arm for the specific time
     *
     * @generated from protobuf rpc: AcceptArmAuthorization(mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest) returns (mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse);
     */
    acceptArmAuthorization(input: AcceptArmAuthorizationRequest, options?: RpcOptions): UnaryCall<AcceptArmAuthorizationRequest, AcceptArmAuthorizationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AcceptArmAuthorizationRequest, AcceptArmAuthorizationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Reject arm authorization request
     *
     * @generated from protobuf rpc: RejectArmAuthorization(mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest) returns (mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse);
     */
    rejectArmAuthorization(input: RejectArmAuthorizationRequest, options?: RpcOptions): UnaryCall<RejectArmAuthorizationRequest, RejectArmAuthorizationResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RejectArmAuthorizationRequest, RejectArmAuthorizationResponse>("unary", this._transport, method, opt, input);
    }
}
