/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "arm_authorizer_server/arm_authorizer_server.proto" (package "mavsdk.rpc.arm_authorizer_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Messages for SubscribeArmAuthorization
 *
 * @generated from protobuf message mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest
 */
export interface SubscribeArmAuthorizationRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse
 */
export interface ArmAuthorizationResponse {
    /**
     * @generated from protobuf field: uint32 system_id = 1;
     */
    systemId: number; // vehicle system id
}
/**
 * Messages for RespondArmAuthorization
 *
 * @generated from protobuf message mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest
 */
export interface AcceptArmAuthorizationRequest {
    /**
     * @generated from protobuf field: int32 valid_time_s = 1;
     */
    validTimeS: number; // Time in seconds for which this authorization is valid
}
/**
 * Result type
 *
 * @generated from protobuf message mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse
 */
export interface AcceptArmAuthorizationResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1;
     */
    armAuthorizerServerResult?: ArmAuthorizerServerResult; // Result enum value
}
/**
 * Messages for RespondArmAuthorization
 *
 * @generated from protobuf message mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest
 */
export interface RejectArmAuthorizationRequest {
    /**
     * @generated from protobuf field: bool temporarily = 1;
     */
    temporarily: boolean; // True if the answer should be TEMPORARILY_REJECTED, false for DENIED
    /**
     * @generated from protobuf field: mavsdk.rpc.arm_authorizer_server.RejectionReason reason = 2;
     */
    reason: RejectionReason; // Reason for the arm to be rejected
    /**
     * @generated from protobuf field: int32 extra_info = 3;
     */
    extraInfo: number; // Extra information specific to the rejection reason (see https://mavlink.io/en/services/arm_authorization.html)
}
/**
 * Result type
 *
 * @generated from protobuf message mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse
 */
export interface RejectArmAuthorizationResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1;
     */
    armAuthorizerServerResult?: ArmAuthorizerServerResult; // Result enum value
}
/**
 * @generated from protobuf message mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult
 */
export interface ArmAuthorizerServerResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result result = 1;
     */
    result: ArmAuthorizerServerResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * @generated from protobuf enum mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result
 */
export enum ArmAuthorizerServerResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Command accepted
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Command failed
     *
     * @generated from protobuf enum value: RESULT_FAILED = 2;
     */
    FAILED = 2
}
/**
 * @generated from protobuf enum mavsdk.rpc.arm_authorizer_server.RejectionReason
 */
export enum RejectionReason {
    /**
     * Not a specific reason
     *
     * @generated from protobuf enum value: REJECTION_REASON_GENERIC = 0;
     */
    GENERIC = 0,
    /**
     * Authorizer will send the error as string to GCS
     *
     * @generated from protobuf enum value: REJECTION_REASON_NONE = 1;
     */
    NONE = 1,
    /**
     * At least one waypoint have a invalid value
     *
     * @generated from protobuf enum value: REJECTION_REASON_INVALID_WAYPOINT = 2;
     */
    INVALID_WAYPOINT = 2,
    /**
     * Timeout in the authorizer process(in case it depends on network)
     *
     * @generated from protobuf enum value: REJECTION_REASON_TIMEOUT = 3;
     */
    TIMEOUT = 3,
    /**
     * Airspace of the mission in use by another vehicle, second result parameter can have the waypoint id that caused it to be denied.
     *
     * @generated from protobuf enum value: REJECTION_REASON_AIRSPACE_IN_USE = 4;
     */
    AIRSPACE_IN_USE = 4,
    /**
     * Weather is not good to fly
     *
     * @generated from protobuf enum value: REJECTION_REASON_BAD_WEATHER = 5;
     */
    BAD_WEATHER = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeArmAuthorizationRequest$Type extends MessageType<SubscribeArmAuthorizationRequest> {
    constructor() {
        super("mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest", []);
    }
    create(value?: PartialMessage<SubscribeArmAuthorizationRequest>): SubscribeArmAuthorizationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeArmAuthorizationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeArmAuthorizationRequest): SubscribeArmAuthorizationRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeArmAuthorizationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest
 */
export const SubscribeArmAuthorizationRequest = new SubscribeArmAuthorizationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArmAuthorizationResponse$Type extends MessageType<ArmAuthorizationResponse> {
    constructor() {
        super("mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse", [
            { no: 1, name: "system_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ArmAuthorizationResponse>): ArmAuthorizationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.systemId = 0;
        if (value !== undefined)
            reflectionMergePartial<ArmAuthorizationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmAuthorizationResponse): ArmAuthorizationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 system_id */ 1:
                    message.systemId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArmAuthorizationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 system_id = 1; */
        if (message.systemId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.systemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse
 */
export const ArmAuthorizationResponse = new ArmAuthorizationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AcceptArmAuthorizationRequest$Type extends MessageType<AcceptArmAuthorizationRequest> {
    constructor() {
        super("mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest", [
            { no: 1, name: "valid_time_s", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AcceptArmAuthorizationRequest>): AcceptArmAuthorizationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.validTimeS = 0;
        if (value !== undefined)
            reflectionMergePartial<AcceptArmAuthorizationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptArmAuthorizationRequest): AcceptArmAuthorizationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 valid_time_s */ 1:
                    message.validTimeS = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AcceptArmAuthorizationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 valid_time_s = 1; */
        if (message.validTimeS !== 0)
            writer.tag(1, WireType.Varint).int32(message.validTimeS);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest
 */
export const AcceptArmAuthorizationRequest = new AcceptArmAuthorizationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AcceptArmAuthorizationResponse$Type extends MessageType<AcceptArmAuthorizationResponse> {
    constructor() {
        super("mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse", [
            { no: 1, name: "arm_authorizer_server_result", kind: "message", T: () => ArmAuthorizerServerResult }
        ]);
    }
    create(value?: PartialMessage<AcceptArmAuthorizationResponse>): AcceptArmAuthorizationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AcceptArmAuthorizationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptArmAuthorizationResponse): AcceptArmAuthorizationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result */ 1:
                    message.armAuthorizerServerResult = ArmAuthorizerServerResult.internalBinaryRead(reader, reader.uint32(), options, message.armAuthorizerServerResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AcceptArmAuthorizationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1; */
        if (message.armAuthorizerServerResult)
            ArmAuthorizerServerResult.internalBinaryWrite(message.armAuthorizerServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse
 */
export const AcceptArmAuthorizationResponse = new AcceptArmAuthorizationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectArmAuthorizationRequest$Type extends MessageType<RejectArmAuthorizationRequest> {
    constructor() {
        super("mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest", [
            { no: 1, name: "temporarily", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "reason", kind: "enum", T: () => ["mavsdk.rpc.arm_authorizer_server.RejectionReason", RejectionReason, "REJECTION_REASON_"] },
            { no: 3, name: "extra_info", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RejectArmAuthorizationRequest>): RejectArmAuthorizationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.temporarily = false;
        message.reason = 0;
        message.extraInfo = 0;
        if (value !== undefined)
            reflectionMergePartial<RejectArmAuthorizationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RejectArmAuthorizationRequest): RejectArmAuthorizationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool temporarily */ 1:
                    message.temporarily = reader.bool();
                    break;
                case /* mavsdk.rpc.arm_authorizer_server.RejectionReason reason */ 2:
                    message.reason = reader.int32();
                    break;
                case /* int32 extra_info */ 3:
                    message.extraInfo = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RejectArmAuthorizationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool temporarily = 1; */
        if (message.temporarily !== false)
            writer.tag(1, WireType.Varint).bool(message.temporarily);
        /* mavsdk.rpc.arm_authorizer_server.RejectionReason reason = 2; */
        if (message.reason !== 0)
            writer.tag(2, WireType.Varint).int32(message.reason);
        /* int32 extra_info = 3; */
        if (message.extraInfo !== 0)
            writer.tag(3, WireType.Varint).int32(message.extraInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest
 */
export const RejectArmAuthorizationRequest = new RejectArmAuthorizationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectArmAuthorizationResponse$Type extends MessageType<RejectArmAuthorizationResponse> {
    constructor() {
        super("mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse", [
            { no: 1, name: "arm_authorizer_server_result", kind: "message", T: () => ArmAuthorizerServerResult }
        ]);
    }
    create(value?: PartialMessage<RejectArmAuthorizationResponse>): RejectArmAuthorizationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RejectArmAuthorizationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RejectArmAuthorizationResponse): RejectArmAuthorizationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result */ 1:
                    message.armAuthorizerServerResult = ArmAuthorizerServerResult.internalBinaryRead(reader, reader.uint32(), options, message.armAuthorizerServerResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RejectArmAuthorizationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult arm_authorizer_server_result = 1; */
        if (message.armAuthorizerServerResult)
            ArmAuthorizerServerResult.internalBinaryWrite(message.armAuthorizerServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse
 */
export const RejectArmAuthorizationResponse = new RejectArmAuthorizationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArmAuthorizerServerResult$Type extends MessageType<ArmAuthorizerServerResult> {
    constructor() {
        super("mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result", ArmAuthorizerServerResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ArmAuthorizerServerResult>): ArmAuthorizerServerResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<ArmAuthorizerServerResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmAuthorizerServerResult): ArmAuthorizerServerResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArmAuthorizerServerResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult
 */
export const ArmAuthorizerServerResult = new ArmAuthorizerServerResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService
 */
export const ArmAuthorizerServerService = new ServiceType("mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService", [
    { name: "SubscribeArmAuthorization", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC" }, I: SubscribeArmAuthorizationRequest, O: ArmAuthorizationResponse },
    { name: "AcceptArmAuthorization", options: { "mavsdk.options.async_type": "SYNC" }, I: AcceptArmAuthorizationRequest, O: AcceptArmAuthorizationResponse },
    { name: "RejectArmAuthorization", options: { "mavsdk.options.async_type": "SYNC" }, I: RejectArmAuthorizationRequest, O: RejectArmAuthorizationResponse }
]);
