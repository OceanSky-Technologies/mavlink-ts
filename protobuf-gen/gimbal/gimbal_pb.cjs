/* eslint-disable */

// source: gimbal/gimbal.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.AngularVelocityBody', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.Attitude', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.AttitudeResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.ControlMode', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.ControlStatus', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.ControlStatusResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.EulerAngle', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GetAttitudeRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GetAttitudeResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GetControlStatusRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GetControlStatusResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GimbalItem', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GimbalList', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GimbalListResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GimbalMode', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GimbalResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.GimbalResult.Result', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.Quaternion', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.ReleaseControlRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.ReleaseControlResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SendMode', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SetAnglesRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SetAnglesResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SetAngularRatesRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SetAngularRatesResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SetRoiLocationRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SetRoiLocationResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.TakeControlRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.gimbal.TakeControlResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SetAnglesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SetAnglesRequest.displayName = 'proto.mavsdk.rpc.gimbal.SetAnglesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SetAnglesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SetAnglesResponse.displayName = 'proto.mavsdk.rpc.gimbal.SetAnglesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SetAngularRatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.displayName = 'proto.mavsdk.rpc.gimbal.SetAngularRatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SetAngularRatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.displayName = 'proto.mavsdk.rpc.gimbal.SetAngularRatesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SetRoiLocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.displayName = 'proto.mavsdk.rpc.gimbal.SetRoiLocationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SetRoiLocationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.displayName = 'proto.mavsdk.rpc.gimbal.SetRoiLocationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.TakeControlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.TakeControlRequest.displayName = 'proto.mavsdk.rpc.gimbal.TakeControlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.TakeControlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.TakeControlResponse.displayName = 'proto.mavsdk.rpc.gimbal.TakeControlResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.ReleaseControlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.ReleaseControlRequest.displayName = 'proto.mavsdk.rpc.gimbal.ReleaseControlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.ReleaseControlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.ReleaseControlResponse.displayName = 'proto.mavsdk.rpc.gimbal.ReleaseControlResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.displayName = 'proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.ControlStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.ControlStatusResponse.displayName = 'proto.mavsdk.rpc.gimbal.ControlStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.GetControlStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.GetControlStatusRequest.displayName = 'proto.mavsdk.rpc.gimbal.GetControlStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.GetControlStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.GetControlStatusResponse.displayName = 'proto.mavsdk.rpc.gimbal.GetControlStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.Quaternion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.Quaternion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.Quaternion.displayName = 'proto.mavsdk.rpc.gimbal.Quaternion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.EulerAngle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.EulerAngle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.EulerAngle.displayName = 'proto.mavsdk.rpc.gimbal.EulerAngle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.AngularVelocityBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.AngularVelocityBody.displayName = 'proto.mavsdk.rpc.gimbal.AngularVelocityBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.Attitude = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.Attitude, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.Attitude.displayName = 'proto.mavsdk.rpc.gimbal.Attitude';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.displayName = 'proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.AttitudeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.AttitudeResponse.displayName = 'proto.mavsdk.rpc.gimbal.AttitudeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.GetAttitudeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.GetAttitudeRequest.displayName = 'proto.mavsdk.rpc.gimbal.GetAttitudeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.GetAttitudeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.GetAttitudeResponse.displayName = 'proto.mavsdk.rpc.gimbal.GetAttitudeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.displayName = 'proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.GimbalListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.GimbalListResponse.displayName = 'proto.mavsdk.rpc.gimbal.GimbalListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.GimbalItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.GimbalItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.GimbalItem.displayName = 'proto.mavsdk.rpc.gimbal.GimbalItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.GimbalList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.gimbal.GimbalList.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.GimbalList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.GimbalList.displayName = 'proto.mavsdk.rpc.gimbal.GimbalList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.ControlStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.ControlStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.ControlStatus.displayName = 'proto.mavsdk.rpc.gimbal.ControlStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.gimbal.GimbalResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.gimbal.GimbalResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.gimbal.GimbalResult.displayName = 'proto.mavsdk.rpc.gimbal.GimbalResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SetAnglesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rollDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pitchDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    yawDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    gimbalMode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sendMode: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesRequest}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SetAnglesRequest;
  return proto.mavsdk.rpc.gimbal.SetAnglesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesRequest}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollDeg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchDeg(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawDeg(value);
      break;
    case 5:
      var value = /** @type {!proto.mavsdk.rpc.gimbal.GimbalMode} */ (reader.readEnum());
      msg.setGimbalMode(value);
      break;
    case 6:
      var value = /** @type {!proto.mavsdk.rpc.gimbal.SendMode} */ (reader.readEnum());
      msg.setSendMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SetAnglesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRollDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPitchDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getYawDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getGimbalMode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSendMode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float roll_deg = 2;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.getRollDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.setRollDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float pitch_deg = 3;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.getPitchDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.setPitchDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float yaw_deg = 4;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.getYawDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.setYawDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional GimbalMode gimbal_mode = 5;
 * @return {!proto.mavsdk.rpc.gimbal.GimbalMode}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.getGimbalMode = function() {
  return /** @type {!proto.mavsdk.rpc.gimbal.GimbalMode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mavsdk.rpc.gimbal.GimbalMode} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.setGimbalMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional SendMode send_mode = 6;
 * @return {!proto.mavsdk.rpc.gimbal.SendMode}
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.getSendMode = function() {
  return /** @type {!proto.mavsdk.rpc.gimbal.SendMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.mavsdk.rpc.gimbal.SendMode} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAnglesRequest.prototype.setSendMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SetAnglesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SetAnglesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalResult: (f = msg.getGimbalResult()) && proto.mavsdk.rpc.gimbal.GimbalResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesResponse}
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SetAnglesResponse;
  return proto.mavsdk.rpc.gimbal.SetAnglesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SetAnglesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesResponse}
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalResult;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader);
      msg.setGimbalResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SetAnglesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SetAnglesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional GimbalResult gimbal_result = 1;
 * @return {?proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.prototype.getGimbalResult = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.GimbalResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.GimbalResult|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesResponse} returns this
*/
proto.mavsdk.rpc.gimbal.SetAnglesResponse.prototype.setGimbalResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.SetAnglesResponse} returns this
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.prototype.clearGimbalResult = function() {
  return this.setGimbalResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.SetAnglesResponse.prototype.hasGimbalResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rollRateDegS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pitchRateDegS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    yawRateDegS: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    gimbalMode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sendMode: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SetAngularRatesRequest;
  return proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollRateDegS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchRateDegS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawRateDegS(value);
      break;
    case 5:
      var value = /** @type {!proto.mavsdk.rpc.gimbal.GimbalMode} */ (reader.readEnum());
      msg.setGimbalMode(value);
      break;
    case 6:
      var value = /** @type {!proto.mavsdk.rpc.gimbal.SendMode} */ (reader.readEnum());
      msg.setSendMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRollRateDegS();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPitchRateDegS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getYawRateDegS();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getGimbalMode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSendMode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float roll_rate_deg_s = 2;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.getRollRateDegS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.setRollRateDegS = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float pitch_rate_deg_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.getPitchRateDegS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.setPitchRateDegS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float yaw_rate_deg_s = 4;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.getYawRateDegS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.setYawRateDegS = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional GimbalMode gimbal_mode = 5;
 * @return {!proto.mavsdk.rpc.gimbal.GimbalMode}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.getGimbalMode = function() {
  return /** @type {!proto.mavsdk.rpc.gimbal.GimbalMode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mavsdk.rpc.gimbal.GimbalMode} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.setGimbalMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional SendMode send_mode = 6;
 * @return {!proto.mavsdk.rpc.gimbal.SendMode}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.getSendMode = function() {
  return /** @type {!proto.mavsdk.rpc.gimbal.SendMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.mavsdk.rpc.gimbal.SendMode} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesRequest.prototype.setSendMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SetAngularRatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalResult: (f = msg.getGimbalResult()) && proto.mavsdk.rpc.gimbal.GimbalResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesResponse}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SetAngularRatesResponse;
  return proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SetAngularRatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesResponse}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalResult;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader);
      msg.setGimbalResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SetAngularRatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional GimbalResult gimbal_result = 1;
 * @return {?proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.prototype.getGimbalResult = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.GimbalResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.GimbalResult|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesResponse} returns this
*/
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.prototype.setGimbalResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.SetAngularRatesResponse} returns this
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.prototype.clearGimbalResult = function() {
  return this.setGimbalResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.SetAngularRatesResponse.prototype.hasGimbalResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    latitudeDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    longitudeDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    altitudeM: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SetRoiLocationRequest;
  return proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitudeDeg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeDeg(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitudeM(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLatitudeDeg();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLongitudeDeg();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAltitudeM();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double latitude_deg = 2;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.getLatitudeDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.setLatitudeDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double longitude_deg = 3;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.getLongitudeDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.setLongitudeDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float altitude_m = 4;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.getAltitudeM = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationRequest} returns this
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationRequest.prototype.setAltitudeM = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SetRoiLocationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalResult: (f = msg.getGimbalResult()) && proto.mavsdk.rpc.gimbal.GimbalResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationResponse}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SetRoiLocationResponse;
  return proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SetRoiLocationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationResponse}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalResult;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader);
      msg.setGimbalResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SetRoiLocationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional GimbalResult gimbal_result = 1;
 * @return {?proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.prototype.getGimbalResult = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.GimbalResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.GimbalResult|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationResponse} returns this
*/
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.prototype.setGimbalResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.SetRoiLocationResponse} returns this
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.prototype.clearGimbalResult = function() {
  return this.setGimbalResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.SetRoiLocationResponse.prototype.hasGimbalResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.TakeControlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.TakeControlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    controlMode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.TakeControlRequest}
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.TakeControlRequest;
  return proto.mavsdk.rpc.gimbal.TakeControlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.TakeControlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.TakeControlRequest}
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    case 2:
      var value = /** @type {!proto.mavsdk.rpc.gimbal.ControlMode} */ (reader.readEnum());
      msg.setControlMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.TakeControlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.TakeControlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getControlMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.TakeControlRequest} returns this
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ControlMode control_mode = 2;
 * @return {!proto.mavsdk.rpc.gimbal.ControlMode}
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.prototype.getControlMode = function() {
  return /** @type {!proto.mavsdk.rpc.gimbal.ControlMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mavsdk.rpc.gimbal.ControlMode} value
 * @return {!proto.mavsdk.rpc.gimbal.TakeControlRequest} returns this
 */
proto.mavsdk.rpc.gimbal.TakeControlRequest.prototype.setControlMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.TakeControlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.TakeControlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalResult: (f = msg.getGimbalResult()) && proto.mavsdk.rpc.gimbal.GimbalResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.TakeControlResponse}
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.TakeControlResponse;
  return proto.mavsdk.rpc.gimbal.TakeControlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.TakeControlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.TakeControlResponse}
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalResult;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader);
      msg.setGimbalResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.TakeControlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.TakeControlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional GimbalResult gimbal_result = 1;
 * @return {?proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.prototype.getGimbalResult = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.GimbalResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.GimbalResult|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.TakeControlResponse} returns this
*/
proto.mavsdk.rpc.gimbal.TakeControlResponse.prototype.setGimbalResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.TakeControlResponse} returns this
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.prototype.clearGimbalResult = function() {
  return this.setGimbalResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.TakeControlResponse.prototype.hasGimbalResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.ReleaseControlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.ReleaseControlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.ReleaseControlRequest}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.ReleaseControlRequest;
  return proto.mavsdk.rpc.gimbal.ReleaseControlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.ReleaseControlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.ReleaseControlRequest}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.ReleaseControlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.ReleaseControlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.ReleaseControlRequest} returns this
 */
proto.mavsdk.rpc.gimbal.ReleaseControlRequest.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.ReleaseControlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.ReleaseControlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalResult: (f = msg.getGimbalResult()) && proto.mavsdk.rpc.gimbal.GimbalResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.ReleaseControlResponse}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.ReleaseControlResponse;
  return proto.mavsdk.rpc.gimbal.ReleaseControlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.ReleaseControlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.ReleaseControlResponse}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalResult;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader);
      msg.setGimbalResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.ReleaseControlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.ReleaseControlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional GimbalResult gimbal_result = 1;
 * @return {?proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.prototype.getGimbalResult = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.GimbalResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.GimbalResult|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.ReleaseControlResponse} returns this
*/
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.prototype.setGimbalResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.ReleaseControlResponse} returns this
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.prototype.clearGimbalResult = function() {
  return this.setGimbalResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.ReleaseControlResponse.prototype.hasGimbalResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest}
 */
proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest;
  return proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest}
 */
proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SubscribeControlStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.ControlStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.ControlStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlStatus: (f = msg.getControlStatus()) && proto.mavsdk.rpc.gimbal.ControlStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatusResponse}
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.ControlStatusResponse;
  return proto.mavsdk.rpc.gimbal.ControlStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.ControlStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatusResponse}
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.ControlStatus;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.ControlStatus.deserializeBinaryFromReader);
      msg.setControlStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.ControlStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.ControlStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.ControlStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ControlStatus control_status = 1;
 * @return {?proto.mavsdk.rpc.gimbal.ControlStatus}
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.prototype.getControlStatus = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.ControlStatus} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.ControlStatus, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.ControlStatus|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatusResponse} returns this
*/
proto.mavsdk.rpc.gimbal.ControlStatusResponse.prototype.setControlStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatusResponse} returns this
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.prototype.clearControlStatus = function() {
  return this.setControlStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.ControlStatusResponse.prototype.hasControlStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.GetControlStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.GetControlStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusRequest}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.GetControlStatusRequest;
  return proto.mavsdk.rpc.gimbal.GetControlStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.GetControlStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusRequest}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.GetControlStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.GetControlStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusRequest} returns this
 */
proto.mavsdk.rpc.gimbal.GetControlStatusRequest.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.GetControlStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalResult: (f = msg.getGimbalResult()) && proto.mavsdk.rpc.gimbal.GimbalResult.toObject(includeInstance, f),
    controlStatus: (f = msg.getControlStatus()) && proto.mavsdk.rpc.gimbal.ControlStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.GetControlStatusResponse;
  return proto.mavsdk.rpc.gimbal.GetControlStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalResult;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader);
      msg.setGimbalResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.gimbal.ControlStatus;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.ControlStatus.deserializeBinaryFromReader);
      msg.setControlStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.GetControlStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter
    );
  }
  f = message.getControlStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.gimbal.ControlStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional GimbalResult gimbal_result = 1;
 * @return {?proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.getGimbalResult = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.GimbalResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.GimbalResult|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse} returns this
*/
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.setGimbalResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse} returns this
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.clearGimbalResult = function() {
  return this.setGimbalResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.hasGimbalResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ControlStatus control_status = 2;
 * @return {?proto.mavsdk.rpc.gimbal.ControlStatus}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.getControlStatus = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.ControlStatus} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.ControlStatus, 2));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.ControlStatus|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse} returns this
*/
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.setControlStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.GetControlStatusResponse} returns this
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.clearControlStatus = function() {
  return this.setControlStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.GetControlStatusResponse.prototype.hasControlStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.Quaternion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.Quaternion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.Quaternion.toObject = function(includeInstance, msg) {
  var f, obj = {
    w: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.Quaternion}
 */
proto.mavsdk.rpc.gimbal.Quaternion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.Quaternion;
  return proto.mavsdk.rpc.gimbal.Quaternion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.Quaternion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.Quaternion}
 */
proto.mavsdk.rpc.gimbal.Quaternion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setW(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.Quaternion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.Quaternion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.Quaternion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getW();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float w = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.Quaternion} returns this
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.setW = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.Quaternion} returns this
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.Quaternion} returns this
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float z = 4;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.Quaternion} returns this
 */
proto.mavsdk.rpc.gimbal.Quaternion.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.EulerAngle.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.EulerAngle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.EulerAngle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.EulerAngle.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitchDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    yawDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.EulerAngle}
 */
proto.mavsdk.rpc.gimbal.EulerAngle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.EulerAngle;
  return proto.mavsdk.rpc.gimbal.EulerAngle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.EulerAngle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.EulerAngle}
 */
proto.mavsdk.rpc.gimbal.EulerAngle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollDeg(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchDeg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawDeg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.EulerAngle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.EulerAngle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.EulerAngle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.EulerAngle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRollDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPitchDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getYawDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float roll_deg = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.EulerAngle.prototype.getRollDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.EulerAngle} returns this
 */
proto.mavsdk.rpc.gimbal.EulerAngle.prototype.setRollDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float pitch_deg = 2;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.EulerAngle.prototype.getPitchDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.EulerAngle} returns this
 */
proto.mavsdk.rpc.gimbal.EulerAngle.prototype.setPitchDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float yaw_deg = 3;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.EulerAngle.prototype.getYawDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.EulerAngle} returns this
 */
proto.mavsdk.rpc.gimbal.EulerAngle.prototype.setYawDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.AngularVelocityBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.AngularVelocityBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollRadS: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitchRadS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    yawRadS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.AngularVelocityBody}
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.AngularVelocityBody;
  return proto.mavsdk.rpc.gimbal.AngularVelocityBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.AngularVelocityBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.AngularVelocityBody}
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollRadS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchRadS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawRadS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.AngularVelocityBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.AngularVelocityBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRollRadS();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPitchRadS();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getYawRadS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float roll_rad_s = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.prototype.getRollRadS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.AngularVelocityBody} returns this
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.prototype.setRollRadS = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float pitch_rad_s = 2;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.prototype.getPitchRadS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.AngularVelocityBody} returns this
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.prototype.setPitchRadS = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float yaw_rad_s = 3;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.prototype.getYawRadS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.AngularVelocityBody} returns this
 */
proto.mavsdk.rpc.gimbal.AngularVelocityBody.prototype.setYawRadS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.Attitude.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.Attitude} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.Attitude.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eulerAngleForward: (f = msg.getEulerAngleForward()) && proto.mavsdk.rpc.gimbal.EulerAngle.toObject(includeInstance, f),
    quaternionForward: (f = msg.getQuaternionForward()) && proto.mavsdk.rpc.gimbal.Quaternion.toObject(includeInstance, f),
    eulerAngleNorth: (f = msg.getEulerAngleNorth()) && proto.mavsdk.rpc.gimbal.EulerAngle.toObject(includeInstance, f),
    quaternionNorth: (f = msg.getQuaternionNorth()) && proto.mavsdk.rpc.gimbal.Quaternion.toObject(includeInstance, f),
    angularVelocity: (f = msg.getAngularVelocity()) && proto.mavsdk.rpc.gimbal.AngularVelocityBody.toObject(includeInstance, f),
    timestampUs: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.Attitude}
 */
proto.mavsdk.rpc.gimbal.Attitude.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.Attitude;
  return proto.mavsdk.rpc.gimbal.Attitude.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.Attitude} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.Attitude}
 */
proto.mavsdk.rpc.gimbal.Attitude.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.gimbal.EulerAngle;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.EulerAngle.deserializeBinaryFromReader);
      msg.setEulerAngleForward(value);
      break;
    case 3:
      var value = new proto.mavsdk.rpc.gimbal.Quaternion;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.Quaternion.deserializeBinaryFromReader);
      msg.setQuaternionForward(value);
      break;
    case 4:
      var value = new proto.mavsdk.rpc.gimbal.EulerAngle;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.EulerAngle.deserializeBinaryFromReader);
      msg.setEulerAngleNorth(value);
      break;
    case 5:
      var value = new proto.mavsdk.rpc.gimbal.Quaternion;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.Quaternion.deserializeBinaryFromReader);
      msg.setQuaternionNorth(value);
      break;
    case 6:
      var value = new proto.mavsdk.rpc.gimbal.AngularVelocityBody;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.AngularVelocityBody.deserializeBinaryFromReader);
      msg.setAngularVelocity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampUs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.Attitude.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.Attitude} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.Attitude.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEulerAngleForward();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.gimbal.EulerAngle.serializeBinaryToWriter
    );
  }
  f = message.getQuaternionForward();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mavsdk.rpc.gimbal.Quaternion.serializeBinaryToWriter
    );
  }
  f = message.getEulerAngleNorth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mavsdk.rpc.gimbal.EulerAngle.serializeBinaryToWriter
    );
  }
  f = message.getQuaternionNorth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mavsdk.rpc.gimbal.Quaternion.serializeBinaryToWriter
    );
  }
  f = message.getAngularVelocity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.mavsdk.rpc.gimbal.AngularVelocityBody.serializeBinaryToWriter
    );
  }
  f = message.getTimestampUs();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EulerAngle euler_angle_forward = 2;
 * @return {?proto.mavsdk.rpc.gimbal.EulerAngle}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.getEulerAngleForward = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.EulerAngle} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.EulerAngle, 2));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.EulerAngle|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
*/
proto.mavsdk.rpc.gimbal.Attitude.prototype.setEulerAngleForward = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.clearEulerAngleForward = function() {
  return this.setEulerAngleForward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.hasEulerAngleForward = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Quaternion quaternion_forward = 3;
 * @return {?proto.mavsdk.rpc.gimbal.Quaternion}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.getQuaternionForward = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.Quaternion} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.Quaternion, 3));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.Quaternion|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
*/
proto.mavsdk.rpc.gimbal.Attitude.prototype.setQuaternionForward = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.clearQuaternionForward = function() {
  return this.setQuaternionForward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.hasQuaternionForward = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EulerAngle euler_angle_north = 4;
 * @return {?proto.mavsdk.rpc.gimbal.EulerAngle}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.getEulerAngleNorth = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.EulerAngle} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.EulerAngle, 4));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.EulerAngle|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
*/
proto.mavsdk.rpc.gimbal.Attitude.prototype.setEulerAngleNorth = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.clearEulerAngleNorth = function() {
  return this.setEulerAngleNorth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.hasEulerAngleNorth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Quaternion quaternion_north = 5;
 * @return {?proto.mavsdk.rpc.gimbal.Quaternion}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.getQuaternionNorth = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.Quaternion} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.Quaternion, 5));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.Quaternion|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
*/
proto.mavsdk.rpc.gimbal.Attitude.prototype.setQuaternionNorth = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.clearQuaternionNorth = function() {
  return this.setQuaternionNorth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.hasQuaternionNorth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AngularVelocityBody angular_velocity = 6;
 * @return {?proto.mavsdk.rpc.gimbal.AngularVelocityBody}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.getAngularVelocity = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.AngularVelocityBody} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.AngularVelocityBody, 6));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.AngularVelocityBody|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
*/
proto.mavsdk.rpc.gimbal.Attitude.prototype.setAngularVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.clearAngularVelocity = function() {
  return this.setAngularVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.hasAngularVelocity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 timestamp_us = 7;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.getTimestampUs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.Attitude} returns this
 */
proto.mavsdk.rpc.gimbal.Attitude.prototype.setTimestampUs = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest}
 */
proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest;
  return proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest}
 */
proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SubscribeAttitudeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.AttitudeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.AttitudeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    attitude: (f = msg.getAttitude()) && proto.mavsdk.rpc.gimbal.Attitude.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.AttitudeResponse}
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.AttitudeResponse;
  return proto.mavsdk.rpc.gimbal.AttitudeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.AttitudeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.AttitudeResponse}
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.Attitude;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.Attitude.deserializeBinaryFromReader);
      msg.setAttitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.AttitudeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.AttitudeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttitude();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.Attitude.serializeBinaryToWriter
    );
  }
};


/**
 * optional Attitude attitude = 1;
 * @return {?proto.mavsdk.rpc.gimbal.Attitude}
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.prototype.getAttitude = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.Attitude} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.Attitude, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.Attitude|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.AttitudeResponse} returns this
*/
proto.mavsdk.rpc.gimbal.AttitudeResponse.prototype.setAttitude = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.AttitudeResponse} returns this
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.prototype.clearAttitude = function() {
  return this.setAttitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.AttitudeResponse.prototype.hasAttitude = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.GetAttitudeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.GetAttitudeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeRequest}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.GetAttitudeRequest;
  return proto.mavsdk.rpc.gimbal.GetAttitudeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.GetAttitudeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeRequest}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.GetAttitudeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.GetAttitudeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeRequest} returns this
 */
proto.mavsdk.rpc.gimbal.GetAttitudeRequest.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.GetAttitudeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalResult: (f = msg.getGimbalResult()) && proto.mavsdk.rpc.gimbal.GimbalResult.toObject(includeInstance, f),
    attitude: (f = msg.getAttitude()) && proto.mavsdk.rpc.gimbal.Attitude.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.GetAttitudeResponse;
  return proto.mavsdk.rpc.gimbal.GetAttitudeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalResult;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader);
      msg.setGimbalResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.gimbal.Attitude;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.Attitude.deserializeBinaryFromReader);
      msg.setAttitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.GetAttitudeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter
    );
  }
  f = message.getAttitude();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.gimbal.Attitude.serializeBinaryToWriter
    );
  }
};


/**
 * optional GimbalResult gimbal_result = 1;
 * @return {?proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.getGimbalResult = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.GimbalResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.GimbalResult|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse} returns this
*/
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.setGimbalResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse} returns this
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.clearGimbalResult = function() {
  return this.setGimbalResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.hasGimbalResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Attitude attitude = 2;
 * @return {?proto.mavsdk.rpc.gimbal.Attitude}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.getAttitude = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.Attitude} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.Attitude, 2));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.Attitude|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse} returns this
*/
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.setAttitude = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.GetAttitudeResponse} returns this
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.clearAttitude = function() {
  return this.setAttitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.GetAttitudeResponse.prototype.hasAttitude = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest}
 */
proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest;
  return proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest}
 */
proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.SubscribeGimbalListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.GimbalListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.GimbalListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalList: (f = msg.getGimbalList()) && proto.mavsdk.rpc.gimbal.GimbalList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalListResponse}
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.GimbalListResponse;
  return proto.mavsdk.rpc.gimbal.GimbalListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.GimbalListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalListResponse}
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalList;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalList.deserializeBinaryFromReader);
      msg.setGimbalList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.GimbalListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.GimbalListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalList();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalList.serializeBinaryToWriter
    );
  }
};


/**
 * optional GimbalList gimbal_list = 1;
 * @return {?proto.mavsdk.rpc.gimbal.GimbalList}
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.prototype.getGimbalList = function() {
  return /** @type{?proto.mavsdk.rpc.gimbal.GimbalList} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalList, 1));
};


/**
 * @param {?proto.mavsdk.rpc.gimbal.GimbalList|undefined} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalListResponse} returns this
*/
proto.mavsdk.rpc.gimbal.GimbalListResponse.prototype.setGimbalList = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalListResponse} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.prototype.clearGimbalList = function() {
  return this.setGimbalList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.gimbal.GimbalListResponse.prototype.hasGimbalList = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.GimbalItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.GimbalItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GimbalItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vendorName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    modelName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    customName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gimbalManagerComponentId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gimbalDeviceId: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.GimbalItem;
  return proto.mavsdk.rpc.gimbal.GimbalItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.GimbalItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendorName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalManagerComponentId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.GimbalItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.GimbalItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GimbalItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVendorName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCustomName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGimbalManagerComponentId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGimbalDeviceId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string vendor_name = 2;
 * @return {string}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.getVendorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.setVendorName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string model_name = 3;
 * @return {string}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.setModelName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string custom_name = 4;
 * @return {string}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.getCustomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.setCustomName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 gimbal_manager_component_id = 5;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.getGimbalManagerComponentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.setGimbalManagerComponentId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 gimbal_device_id = 6;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.getGimbalDeviceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalItem.prototype.setGimbalDeviceId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.gimbal.GimbalList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.GimbalList.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.GimbalList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.GimbalList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GimbalList.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalsList: jspb.Message.toObjectList(msg.getGimbalsList(),
    proto.mavsdk.rpc.gimbal.GimbalItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalList}
 */
proto.mavsdk.rpc.gimbal.GimbalList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.GimbalList;
  return proto.mavsdk.rpc.gimbal.GimbalList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.GimbalList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalList}
 */
proto.mavsdk.rpc.gimbal.GimbalList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.gimbal.GimbalItem;
      reader.readMessage(value,proto.mavsdk.rpc.gimbal.GimbalItem.deserializeBinaryFromReader);
      msg.addGimbals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.GimbalList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.GimbalList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.GimbalList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GimbalList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mavsdk.rpc.gimbal.GimbalItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GimbalItem gimbals = 1;
 * @return {!Array<!proto.mavsdk.rpc.gimbal.GimbalItem>}
 */
proto.mavsdk.rpc.gimbal.GimbalList.prototype.getGimbalsList = function() {
  return /** @type{!Array<!proto.mavsdk.rpc.gimbal.GimbalItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mavsdk.rpc.gimbal.GimbalItem, 1));
};


/**
 * @param {!Array<!proto.mavsdk.rpc.gimbal.GimbalItem>} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalList} returns this
*/
proto.mavsdk.rpc.gimbal.GimbalList.prototype.setGimbalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mavsdk.rpc.gimbal.GimbalItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.gimbal.GimbalItem}
 */
proto.mavsdk.rpc.gimbal.GimbalList.prototype.addGimbals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mavsdk.rpc.gimbal.GimbalItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalList} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalList.prototype.clearGimbalsList = function() {
  return this.setGimbalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.ControlStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.ControlStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.ControlStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    gimbalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    controlMode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sysidPrimaryControl: jspb.Message.getFieldWithDefault(msg, 3, 0),
    compidPrimaryControl: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sysidSecondaryControl: jspb.Message.getFieldWithDefault(msg, 5, 0),
    compidSecondaryControl: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatus}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.ControlStatus;
  return proto.mavsdk.rpc.gimbal.ControlStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.ControlStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatus}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGimbalId(value);
      break;
    case 2:
      var value = /** @type {!proto.mavsdk.rpc.gimbal.ControlMode} */ (reader.readEnum());
      msg.setControlMode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSysidPrimaryControl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompidPrimaryControl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSysidSecondaryControl(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompidSecondaryControl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.ControlStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.ControlStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.ControlStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGimbalId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getControlMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSysidPrimaryControl();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCompidPrimaryControl();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSysidSecondaryControl();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCompidSecondaryControl();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 gimbal_id = 1;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.getGimbalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatus} returns this
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.setGimbalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ControlMode control_mode = 2;
 * @return {!proto.mavsdk.rpc.gimbal.ControlMode}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.getControlMode = function() {
  return /** @type {!proto.mavsdk.rpc.gimbal.ControlMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mavsdk.rpc.gimbal.ControlMode} value
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatus} returns this
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.setControlMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 sysid_primary_control = 3;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.getSysidPrimaryControl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatus} returns this
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.setSysidPrimaryControl = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 compid_primary_control = 4;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.getCompidPrimaryControl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatus} returns this
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.setCompidPrimaryControl = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 sysid_secondary_control = 5;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.getSysidSecondaryControl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatus} returns this
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.setSysidSecondaryControl = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 compid_secondary_control = 6;
 * @return {number}
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.getCompidSecondaryControl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.gimbal.ControlStatus} returns this
 */
proto.mavsdk.rpc.gimbal.ControlStatus.prototype.setCompidSecondaryControl = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.gimbal.GimbalResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.gimbal.GimbalResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.gimbal.GimbalResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GimbalResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.gimbal.GimbalResult;
  return proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.gimbal.GimbalResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.gimbal.GimbalResult}
 */
proto.mavsdk.rpc.gimbal.GimbalResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.gimbal.GimbalResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.gimbal.GimbalResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.gimbal.GimbalResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.gimbal.GimbalResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.gimbal.GimbalResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_ERROR: 2,
  RESULT_TIMEOUT: 3,
  RESULT_UNSUPPORTED: 4,
  RESULT_NO_SYSTEM: 5,
  RESULT_INVALID_ARGUMENT: 6
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.gimbal.GimbalResult.Result}
 */
proto.mavsdk.rpc.gimbal.GimbalResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.gimbal.GimbalResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.gimbal.GimbalResult.Result} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalResult} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.gimbal.GimbalResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.gimbal.GimbalResult} returns this
 */
proto.mavsdk.rpc.gimbal.GimbalResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.gimbal.GimbalMode = {
  GIMBAL_MODE_YAW_FOLLOW: 0,
  GIMBAL_MODE_YAW_LOCK: 1
};

/**
 * @enum {number}
 */
proto.mavsdk.rpc.gimbal.ControlMode = {
  CONTROL_MODE_NONE: 0,
  CONTROL_MODE_PRIMARY: 1,
  CONTROL_MODE_SECONDARY: 2
};

/**
 * @enum {number}
 */
proto.mavsdk.rpc.gimbal.SendMode = {
  SEND_MODE_ONCE: 0,
  SEND_MODE_STREAM: 1
};

goog.object.extend(exports, proto.mavsdk.rpc.gimbal);


// fix autocompletion
module.exports = exports;
