/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "param_server/param_server.proto" (package "mavsdk.rpc.param_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ParamServerService } from "./param_server";
import type { ChangedParamCustomResponse } from "./param_server";
import type { SubscribeChangedParamCustomRequest } from "./param_server";
import type { ChangedParamFloatResponse } from "./param_server";
import type { SubscribeChangedParamFloatRequest } from "./param_server";
import type { ChangedParamIntResponse } from "./param_server";
import type { SubscribeChangedParamIntRequest } from "./param_server";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RetrieveAllParamsResponse } from "./param_server";
import type { RetrieveAllParamsRequest } from "./param_server";
import type { ProvideParamCustomResponse } from "./param_server";
import type { ProvideParamCustomRequest } from "./param_server";
import type { RetrieveParamCustomResponse } from "./param_server";
import type { RetrieveParamCustomRequest } from "./param_server";
import type { ProvideParamFloatResponse } from "./param_server";
import type { ProvideParamFloatRequest } from "./param_server";
import type { RetrieveParamFloatResponse } from "./param_server";
import type { RetrieveParamFloatRequest } from "./param_server";
import type { ProvideParamIntResponse } from "./param_server";
import type { ProvideParamIntRequest } from "./param_server";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RetrieveParamIntResponse } from "./param_server";
import type { RetrieveParamIntRequest } from "./param_server";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Provide raw access to retrieve and provide server parameters.
 *
 * @generated from protobuf service mavsdk.rpc.param_server.ParamServerService
 */
export interface IParamServerServiceClient {
    /**
     *
     * Retrieve an int parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: RetrieveParamInt(mavsdk.rpc.param_server.RetrieveParamIntRequest) returns (mavsdk.rpc.param_server.RetrieveParamIntResponse);
     */
    retrieveParamInt(input: RetrieveParamIntRequest, options?: RpcOptions): UnaryCall<RetrieveParamIntRequest, RetrieveParamIntResponse>;
    /**
     *
     * Provide an int parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: ProvideParamInt(mavsdk.rpc.param_server.ProvideParamIntRequest) returns (mavsdk.rpc.param_server.ProvideParamIntResponse);
     */
    provideParamInt(input: ProvideParamIntRequest, options?: RpcOptions): UnaryCall<ProvideParamIntRequest, ProvideParamIntResponse>;
    /**
     *
     * Retrieve a float parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: RetrieveParamFloat(mavsdk.rpc.param_server.RetrieveParamFloatRequest) returns (mavsdk.rpc.param_server.RetrieveParamFloatResponse);
     */
    retrieveParamFloat(input: RetrieveParamFloatRequest, options?: RpcOptions): UnaryCall<RetrieveParamFloatRequest, RetrieveParamFloatResponse>;
    /**
     *
     * Provide a float parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: ProvideParamFloat(mavsdk.rpc.param_server.ProvideParamFloatRequest) returns (mavsdk.rpc.param_server.ProvideParamFloatResponse);
     */
    provideParamFloat(input: ProvideParamFloatRequest, options?: RpcOptions): UnaryCall<ProvideParamFloatRequest, ProvideParamFloatResponse>;
    /**
     *
     * Retrieve a custom parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: RetrieveParamCustom(mavsdk.rpc.param_server.RetrieveParamCustomRequest) returns (mavsdk.rpc.param_server.RetrieveParamCustomResponse);
     */
    retrieveParamCustom(input: RetrieveParamCustomRequest, options?: RpcOptions): UnaryCall<RetrieveParamCustomRequest, RetrieveParamCustomResponse>;
    /**
     *
     * Provide a custom parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: ProvideParamCustom(mavsdk.rpc.param_server.ProvideParamCustomRequest) returns (mavsdk.rpc.param_server.ProvideParamCustomResponse);
     */
    provideParamCustom(input: ProvideParamCustomRequest, options?: RpcOptions): UnaryCall<ProvideParamCustomRequest, ProvideParamCustomResponse>;
    /**
     *
     * Retrieve all parameters.
     *
     * @generated from protobuf rpc: RetrieveAllParams(mavsdk.rpc.param_server.RetrieveAllParamsRequest) returns (mavsdk.rpc.param_server.RetrieveAllParamsResponse);
     */
    retrieveAllParams(input: RetrieveAllParamsRequest, options?: RpcOptions): UnaryCall<RetrieveAllParamsRequest, RetrieveAllParamsResponse>;
    /**
     * Subscribe to changed int param.
     *
     * @generated from protobuf rpc: SubscribeChangedParamInt(mavsdk.rpc.param_server.SubscribeChangedParamIntRequest) returns (stream mavsdk.rpc.param_server.ChangedParamIntResponse);
     */
    subscribeChangedParamInt(input: SubscribeChangedParamIntRequest, options?: RpcOptions): ServerStreamingCall<SubscribeChangedParamIntRequest, ChangedParamIntResponse>;
    /**
     * Subscribe to changed float param.
     *
     * @generated from protobuf rpc: SubscribeChangedParamFloat(mavsdk.rpc.param_server.SubscribeChangedParamFloatRequest) returns (stream mavsdk.rpc.param_server.ChangedParamFloatResponse);
     */
    subscribeChangedParamFloat(input: SubscribeChangedParamFloatRequest, options?: RpcOptions): ServerStreamingCall<SubscribeChangedParamFloatRequest, ChangedParamFloatResponse>;
    /**
     * Subscribe to changed custom param.
     *
     * @generated from protobuf rpc: SubscribeChangedParamCustom(mavsdk.rpc.param_server.SubscribeChangedParamCustomRequest) returns (stream mavsdk.rpc.param_server.ChangedParamCustomResponse);
     */
    subscribeChangedParamCustom(input: SubscribeChangedParamCustomRequest, options?: RpcOptions): ServerStreamingCall<SubscribeChangedParamCustomRequest, ChangedParamCustomResponse>;
}
/**
 * Provide raw access to retrieve and provide server parameters.
 *
 * @generated from protobuf service mavsdk.rpc.param_server.ParamServerService
 */
export class ParamServerServiceClient implements IParamServerServiceClient, ServiceInfo {
    typeName = ParamServerService.typeName;
    methods = ParamServerService.methods;
    options = ParamServerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *
     * Retrieve an int parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: RetrieveParamInt(mavsdk.rpc.param_server.RetrieveParamIntRequest) returns (mavsdk.rpc.param_server.RetrieveParamIntResponse);
     */
    retrieveParamInt(input: RetrieveParamIntRequest, options?: RpcOptions): UnaryCall<RetrieveParamIntRequest, RetrieveParamIntResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveParamIntRequest, RetrieveParamIntResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Provide an int parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: ProvideParamInt(mavsdk.rpc.param_server.ProvideParamIntRequest) returns (mavsdk.rpc.param_server.ProvideParamIntResponse);
     */
    provideParamInt(input: ProvideParamIntRequest, options?: RpcOptions): UnaryCall<ProvideParamIntRequest, ProvideParamIntResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProvideParamIntRequest, ProvideParamIntResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Retrieve a float parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: RetrieveParamFloat(mavsdk.rpc.param_server.RetrieveParamFloatRequest) returns (mavsdk.rpc.param_server.RetrieveParamFloatResponse);
     */
    retrieveParamFloat(input: RetrieveParamFloatRequest, options?: RpcOptions): UnaryCall<RetrieveParamFloatRequest, RetrieveParamFloatResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveParamFloatRequest, RetrieveParamFloatResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Provide a float parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: ProvideParamFloat(mavsdk.rpc.param_server.ProvideParamFloatRequest) returns (mavsdk.rpc.param_server.ProvideParamFloatResponse);
     */
    provideParamFloat(input: ProvideParamFloatRequest, options?: RpcOptions): UnaryCall<ProvideParamFloatRequest, ProvideParamFloatResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProvideParamFloatRequest, ProvideParamFloatResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Retrieve a custom parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: RetrieveParamCustom(mavsdk.rpc.param_server.RetrieveParamCustomRequest) returns (mavsdk.rpc.param_server.RetrieveParamCustomResponse);
     */
    retrieveParamCustom(input: RetrieveParamCustomRequest, options?: RpcOptions): UnaryCall<RetrieveParamCustomRequest, RetrieveParamCustomResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveParamCustomRequest, RetrieveParamCustomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Provide a custom parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     *
     * @generated from protobuf rpc: ProvideParamCustom(mavsdk.rpc.param_server.ProvideParamCustomRequest) returns (mavsdk.rpc.param_server.ProvideParamCustomResponse);
     */
    provideParamCustom(input: ProvideParamCustomRequest, options?: RpcOptions): UnaryCall<ProvideParamCustomRequest, ProvideParamCustomResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProvideParamCustomRequest, ProvideParamCustomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *
     * Retrieve all parameters.
     *
     * @generated from protobuf rpc: RetrieveAllParams(mavsdk.rpc.param_server.RetrieveAllParamsRequest) returns (mavsdk.rpc.param_server.RetrieveAllParamsResponse);
     */
    retrieveAllParams(input: RetrieveAllParamsRequest, options?: RpcOptions): UnaryCall<RetrieveAllParamsRequest, RetrieveAllParamsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetrieveAllParamsRequest, RetrieveAllParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to changed int param.
     *
     * @generated from protobuf rpc: SubscribeChangedParamInt(mavsdk.rpc.param_server.SubscribeChangedParamIntRequest) returns (stream mavsdk.rpc.param_server.ChangedParamIntResponse);
     */
    subscribeChangedParamInt(input: SubscribeChangedParamIntRequest, options?: RpcOptions): ServerStreamingCall<SubscribeChangedParamIntRequest, ChangedParamIntResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeChangedParamIntRequest, ChangedParamIntResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to changed float param.
     *
     * @generated from protobuf rpc: SubscribeChangedParamFloat(mavsdk.rpc.param_server.SubscribeChangedParamFloatRequest) returns (stream mavsdk.rpc.param_server.ChangedParamFloatResponse);
     */
    subscribeChangedParamFloat(input: SubscribeChangedParamFloatRequest, options?: RpcOptions): ServerStreamingCall<SubscribeChangedParamFloatRequest, ChangedParamFloatResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeChangedParamFloatRequest, ChangedParamFloatResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to changed custom param.
     *
     * @generated from protobuf rpc: SubscribeChangedParamCustom(mavsdk.rpc.param_server.SubscribeChangedParamCustomRequest) returns (stream mavsdk.rpc.param_server.ChangedParamCustomResponse);
     */
    subscribeChangedParamCustom(input: SubscribeChangedParamCustomRequest, options?: RpcOptions): ServerStreamingCall<SubscribeChangedParamCustomRequest, ChangedParamCustomResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeChangedParamCustomRequest, ChangedParamCustomResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
