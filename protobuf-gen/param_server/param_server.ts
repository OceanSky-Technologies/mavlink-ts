/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck,eslint_disable
// @generated from protobuf file "param_server/param_server.proto" (package "mavsdk.rpc.param_server", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mavsdk.rpc.param_server.RetrieveParamIntRequest
 */
export interface RetrieveParamIntRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.RetrieveParamIntResponse
 */
export interface RetrieveParamIntResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.ParamServerResult param_server_result = 1;
     */
    paramServerResult?: ParamServerResult;
    /**
     * @generated from protobuf field: int32 value = 2;
     */
    value: number; // Value of the requested parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ProvideParamIntRequest
 */
export interface ProvideParamIntRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter to provide
    /**
     * @generated from protobuf field: int32 value = 2;
     */
    value: number; // Value the parameter should be set to
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ProvideParamIntResponse
 */
export interface ProvideParamIntResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.ParamServerResult param_server_result = 1;
     */
    paramServerResult?: ParamServerResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.RetrieveParamFloatRequest
 */
export interface RetrieveParamFloatRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.RetrieveParamFloatResponse
 */
export interface RetrieveParamFloatResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.ParamServerResult param_server_result = 1;
     */
    paramServerResult?: ParamServerResult;
    /**
     * @generated from protobuf field: float value = 2;
     */
    value: number; // Value of the requested parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ProvideParamFloatRequest
 */
export interface ProvideParamFloatRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter to provide
    /**
     * @generated from protobuf field: float value = 2;
     */
    value: number; // Value the parameter should be set to
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ProvideParamFloatResponse
 */
export interface ProvideParamFloatResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.ParamServerResult param_server_result = 1;
     */
    paramServerResult?: ParamServerResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.RetrieveParamCustomRequest
 */
export interface RetrieveParamCustomRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.RetrieveParamCustomResponse
 */
export interface RetrieveParamCustomResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.ParamServerResult param_server_result = 1;
     */
    paramServerResult?: ParamServerResult;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string; // Value of the requested parameter
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ProvideParamCustomRequest
 */
export interface ProvideParamCustomRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter to provide
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string; // Value the parameter should be set to
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ProvideParamCustomResponse
 */
export interface ProvideParamCustomResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.ParamServerResult param_server_result = 1;
     */
    paramServerResult?: ParamServerResult;
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.RetrieveAllParamsRequest
 */
export interface RetrieveAllParamsRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.RetrieveAllParamsResponse
 */
export interface RetrieveAllParamsResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.AllParams params = 1;
     */
    params?: AllParams; // Collection of all parameters
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.SubscribeChangedParamIntRequest
 */
export interface SubscribeChangedParamIntRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ChangedParamIntResponse
 */
export interface ChangedParamIntResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.IntParam param = 1;
     */
    param?: IntParam; // Param that changed
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.SubscribeChangedParamFloatRequest
 */
export interface SubscribeChangedParamFloatRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ChangedParamFloatResponse
 */
export interface ChangedParamFloatResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.FloatParam param = 1;
     */
    param?: FloatParam; // Param that changed
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.SubscribeChangedParamCustomRequest
 */
export interface SubscribeChangedParamCustomRequest {
}
/**
 * @generated from protobuf message mavsdk.rpc.param_server.ChangedParamCustomResponse
 */
export interface ChangedParamCustomResponse {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.CustomParam param = 1;
     */
    param?: CustomParam; // Param that changed
}
/**
 *
 * Type for integer parameters.
 *
 * @generated from protobuf message mavsdk.rpc.param_server.IntParam
 */
export interface IntParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
    /**
     * @generated from protobuf field: int32 value = 2;
     */
    value: number; // Value of the parameter
}
/**
 *
 * Type for float parameters.
 *
 * @generated from protobuf message mavsdk.rpc.param_server.FloatParam
 */
export interface FloatParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
    /**
     * @generated from protobuf field: float value = 2;
     */
    value: number; // Value of the parameter
}
/**
 *
 * Type for float parameters.
 *
 * @generated from protobuf message mavsdk.rpc.param_server.CustomParam
 */
export interface CustomParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the parameter
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string; // Value of the parameter
}
/**
 *
 * Type collecting all integer, float, and custom parameters.
 *
 * @generated from protobuf message mavsdk.rpc.param_server.AllParams
 */
export interface AllParams {
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.param_server.IntParam int_params = 1;
     */
    intParams: IntParam[]; // Collection of all parameter names and values of type int
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.param_server.FloatParam float_params = 2;
     */
    floatParams: FloatParam[]; // Collection of all parameter names and values of type float
    /**
     * @generated from protobuf field: repeated mavsdk.rpc.param_server.CustomParam custom_params = 3;
     */
    customParams: CustomParam[]; // Collection of all parameter names and values of type custom
}
/**
 * Result type.
 *
 * @generated from protobuf message mavsdk.rpc.param_server.ParamServerResult
 */
export interface ParamServerResult {
    /**
     * @generated from protobuf field: mavsdk.rpc.param_server.ParamServerResult.Result result = 1;
     */
    result: ParamServerResult_Result; // Result enum value
    /**
     * @generated from protobuf field: string result_str = 2;
     */
    resultStr: string; // Human-readable English string describing the result
}
/**
 * Possible results returned for param requests.
 *
 * @generated from protobuf enum mavsdk.rpc.param_server.ParamServerResult.Result
 */
export enum ParamServerResult_Result {
    /**
     * Unknown result
     *
     * @generated from protobuf enum value: RESULT_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Request succeeded
     *
     * @generated from protobuf enum value: RESULT_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * Not Found
     *
     * @generated from protobuf enum value: RESULT_NOT_FOUND = 2;
     */
    NOT_FOUND = 2,
    /**
     * Wrong type
     *
     * @generated from protobuf enum value: RESULT_WRONG_TYPE = 3;
     */
    WRONG_TYPE = 3,
    /**
     * Parameter name too long (> 16)
     *
     * @generated from protobuf enum value: RESULT_PARAM_NAME_TOO_LONG = 4;
     */
    PARAM_NAME_TOO_LONG = 4,
    /**
     * No system available
     *
     * @generated from protobuf enum value: RESULT_NO_SYSTEM = 5;
     */
    NO_SYSTEM = 5,
    /**
     * Parameter name too long (> 128)
     *
     * @generated from protobuf enum value: RESULT_PARAM_VALUE_TOO_LONG = 6;
     */
    PARAM_VALUE_TOO_LONG = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveParamIntRequest$Type extends MessageType<RetrieveParamIntRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.RetrieveParamIntRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveParamIntRequest>): RetrieveParamIntRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveParamIntRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveParamIntRequest): RetrieveParamIntRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveParamIntRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.RetrieveParamIntRequest
 */
export const RetrieveParamIntRequest = new RetrieveParamIntRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveParamIntResponse$Type extends MessageType<RetrieveParamIntResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.RetrieveParamIntResponse", [
            { no: 1, name: "param_server_result", kind: "message", T: () => ParamServerResult },
            { no: 2, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveParamIntResponse>): RetrieveParamIntResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<RetrieveParamIntResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveParamIntResponse): RetrieveParamIntResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.ParamServerResult param_server_result */ 1:
                    message.paramServerResult = ParamServerResult.internalBinaryRead(reader, reader.uint32(), options, message.paramServerResult);
                    break;
                case /* int32 value */ 2:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveParamIntResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.ParamServerResult param_server_result = 1; */
        if (message.paramServerResult)
            ParamServerResult.internalBinaryWrite(message.paramServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.RetrieveParamIntResponse
 */
export const RetrieveParamIntResponse = new RetrieveParamIntResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProvideParamIntRequest$Type extends MessageType<ProvideParamIntRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.ProvideParamIntRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProvideParamIntRequest>): ProvideParamIntRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<ProvideParamIntRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProvideParamIntRequest): ProvideParamIntRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 value */ 2:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProvideParamIntRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ProvideParamIntRequest
 */
export const ProvideParamIntRequest = new ProvideParamIntRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProvideParamIntResponse$Type extends MessageType<ProvideParamIntResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.ProvideParamIntResponse", [
            { no: 1, name: "param_server_result", kind: "message", T: () => ParamServerResult }
        ]);
    }
    create(value?: PartialMessage<ProvideParamIntResponse>): ProvideParamIntResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProvideParamIntResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProvideParamIntResponse): ProvideParamIntResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.ParamServerResult param_server_result */ 1:
                    message.paramServerResult = ParamServerResult.internalBinaryRead(reader, reader.uint32(), options, message.paramServerResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProvideParamIntResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.ParamServerResult param_server_result = 1; */
        if (message.paramServerResult)
            ParamServerResult.internalBinaryWrite(message.paramServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ProvideParamIntResponse
 */
export const ProvideParamIntResponse = new ProvideParamIntResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveParamFloatRequest$Type extends MessageType<RetrieveParamFloatRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.RetrieveParamFloatRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveParamFloatRequest>): RetrieveParamFloatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveParamFloatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveParamFloatRequest): RetrieveParamFloatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveParamFloatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.RetrieveParamFloatRequest
 */
export const RetrieveParamFloatRequest = new RetrieveParamFloatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveParamFloatResponse$Type extends MessageType<RetrieveParamFloatResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.RetrieveParamFloatResponse", [
            { no: 1, name: "param_server_result", kind: "message", T: () => ParamServerResult },
            { no: 2, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveParamFloatResponse>): RetrieveParamFloatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<RetrieveParamFloatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveParamFloatResponse): RetrieveParamFloatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.ParamServerResult param_server_result */ 1:
                    message.paramServerResult = ParamServerResult.internalBinaryRead(reader, reader.uint32(), options, message.paramServerResult);
                    break;
                case /* float value */ 2:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveParamFloatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.ParamServerResult param_server_result = 1; */
        if (message.paramServerResult)
            ParamServerResult.internalBinaryWrite(message.paramServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.RetrieveParamFloatResponse
 */
export const RetrieveParamFloatResponse = new RetrieveParamFloatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProvideParamFloatRequest$Type extends MessageType<ProvideParamFloatRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.ProvideParamFloatRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<ProvideParamFloatRequest>): ProvideParamFloatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<ProvideParamFloatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProvideParamFloatRequest): ProvideParamFloatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* float value */ 2:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProvideParamFloatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* float value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ProvideParamFloatRequest
 */
export const ProvideParamFloatRequest = new ProvideParamFloatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProvideParamFloatResponse$Type extends MessageType<ProvideParamFloatResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.ProvideParamFloatResponse", [
            { no: 1, name: "param_server_result", kind: "message", T: () => ParamServerResult }
        ]);
    }
    create(value?: PartialMessage<ProvideParamFloatResponse>): ProvideParamFloatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProvideParamFloatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProvideParamFloatResponse): ProvideParamFloatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.ParamServerResult param_server_result */ 1:
                    message.paramServerResult = ParamServerResult.internalBinaryRead(reader, reader.uint32(), options, message.paramServerResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProvideParamFloatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.ParamServerResult param_server_result = 1; */
        if (message.paramServerResult)
            ParamServerResult.internalBinaryWrite(message.paramServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ProvideParamFloatResponse
 */
export const ProvideParamFloatResponse = new ProvideParamFloatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveParamCustomRequest$Type extends MessageType<RetrieveParamCustomRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.RetrieveParamCustomRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveParamCustomRequest>): RetrieveParamCustomRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveParamCustomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveParamCustomRequest): RetrieveParamCustomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveParamCustomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.RetrieveParamCustomRequest
 */
export const RetrieveParamCustomRequest = new RetrieveParamCustomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveParamCustomResponse$Type extends MessageType<RetrieveParamCustomResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.RetrieveParamCustomResponse", [
            { no: 1, name: "param_server_result", kind: "message", T: () => ParamServerResult },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RetrieveParamCustomResponse>): RetrieveParamCustomResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<RetrieveParamCustomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveParamCustomResponse): RetrieveParamCustomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.ParamServerResult param_server_result */ 1:
                    message.paramServerResult = ParamServerResult.internalBinaryRead(reader, reader.uint32(), options, message.paramServerResult);
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveParamCustomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.ParamServerResult param_server_result = 1; */
        if (message.paramServerResult)
            ParamServerResult.internalBinaryWrite(message.paramServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.RetrieveParamCustomResponse
 */
export const RetrieveParamCustomResponse = new RetrieveParamCustomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProvideParamCustomRequest$Type extends MessageType<ProvideParamCustomRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.ProvideParamCustomRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProvideParamCustomRequest>): ProvideParamCustomRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<ProvideParamCustomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProvideParamCustomRequest): ProvideParamCustomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProvideParamCustomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ProvideParamCustomRequest
 */
export const ProvideParamCustomRequest = new ProvideParamCustomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProvideParamCustomResponse$Type extends MessageType<ProvideParamCustomResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.ProvideParamCustomResponse", [
            { no: 1, name: "param_server_result", kind: "message", T: () => ParamServerResult }
        ]);
    }
    create(value?: PartialMessage<ProvideParamCustomResponse>): ProvideParamCustomResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProvideParamCustomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProvideParamCustomResponse): ProvideParamCustomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.ParamServerResult param_server_result */ 1:
                    message.paramServerResult = ParamServerResult.internalBinaryRead(reader, reader.uint32(), options, message.paramServerResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProvideParamCustomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.ParamServerResult param_server_result = 1; */
        if (message.paramServerResult)
            ParamServerResult.internalBinaryWrite(message.paramServerResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ProvideParamCustomResponse
 */
export const ProvideParamCustomResponse = new ProvideParamCustomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveAllParamsRequest$Type extends MessageType<RetrieveAllParamsRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.RetrieveAllParamsRequest", []);
    }
    create(value?: PartialMessage<RetrieveAllParamsRequest>): RetrieveAllParamsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RetrieveAllParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveAllParamsRequest): RetrieveAllParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RetrieveAllParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.RetrieveAllParamsRequest
 */
export const RetrieveAllParamsRequest = new RetrieveAllParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetrieveAllParamsResponse$Type extends MessageType<RetrieveAllParamsResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.RetrieveAllParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => AllParams }
        ]);
    }
    create(value?: PartialMessage<RetrieveAllParamsResponse>): RetrieveAllParamsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RetrieveAllParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetrieveAllParamsResponse): RetrieveAllParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.AllParams params */ 1:
                    message.params = AllParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetrieveAllParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.AllParams params = 1; */
        if (message.params)
            AllParams.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.RetrieveAllParamsResponse
 */
export const RetrieveAllParamsResponse = new RetrieveAllParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeChangedParamIntRequest$Type extends MessageType<SubscribeChangedParamIntRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.SubscribeChangedParamIntRequest", []);
    }
    create(value?: PartialMessage<SubscribeChangedParamIntRequest>): SubscribeChangedParamIntRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeChangedParamIntRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeChangedParamIntRequest): SubscribeChangedParamIntRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeChangedParamIntRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.SubscribeChangedParamIntRequest
 */
export const SubscribeChangedParamIntRequest = new SubscribeChangedParamIntRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangedParamIntResponse$Type extends MessageType<ChangedParamIntResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.ChangedParamIntResponse", [
            { no: 1, name: "param", kind: "message", T: () => IntParam }
        ]);
    }
    create(value?: PartialMessage<ChangedParamIntResponse>): ChangedParamIntResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChangedParamIntResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangedParamIntResponse): ChangedParamIntResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.IntParam param */ 1:
                    message.param = IntParam.internalBinaryRead(reader, reader.uint32(), options, message.param);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangedParamIntResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.IntParam param = 1; */
        if (message.param)
            IntParam.internalBinaryWrite(message.param, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ChangedParamIntResponse
 */
export const ChangedParamIntResponse = new ChangedParamIntResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeChangedParamFloatRequest$Type extends MessageType<SubscribeChangedParamFloatRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.SubscribeChangedParamFloatRequest", []);
    }
    create(value?: PartialMessage<SubscribeChangedParamFloatRequest>): SubscribeChangedParamFloatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeChangedParamFloatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeChangedParamFloatRequest): SubscribeChangedParamFloatRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeChangedParamFloatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.SubscribeChangedParamFloatRequest
 */
export const SubscribeChangedParamFloatRequest = new SubscribeChangedParamFloatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangedParamFloatResponse$Type extends MessageType<ChangedParamFloatResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.ChangedParamFloatResponse", [
            { no: 1, name: "param", kind: "message", T: () => FloatParam }
        ]);
    }
    create(value?: PartialMessage<ChangedParamFloatResponse>): ChangedParamFloatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChangedParamFloatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangedParamFloatResponse): ChangedParamFloatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.FloatParam param */ 1:
                    message.param = FloatParam.internalBinaryRead(reader, reader.uint32(), options, message.param);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangedParamFloatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.FloatParam param = 1; */
        if (message.param)
            FloatParam.internalBinaryWrite(message.param, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ChangedParamFloatResponse
 */
export const ChangedParamFloatResponse = new ChangedParamFloatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeChangedParamCustomRequest$Type extends MessageType<SubscribeChangedParamCustomRequest> {
    constructor() {
        super("mavsdk.rpc.param_server.SubscribeChangedParamCustomRequest", []);
    }
    create(value?: PartialMessage<SubscribeChangedParamCustomRequest>): SubscribeChangedParamCustomRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeChangedParamCustomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeChangedParamCustomRequest): SubscribeChangedParamCustomRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeChangedParamCustomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.SubscribeChangedParamCustomRequest
 */
export const SubscribeChangedParamCustomRequest = new SubscribeChangedParamCustomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangedParamCustomResponse$Type extends MessageType<ChangedParamCustomResponse> {
    constructor() {
        super("mavsdk.rpc.param_server.ChangedParamCustomResponse", [
            { no: 1, name: "param", kind: "message", T: () => CustomParam }
        ]);
    }
    create(value?: PartialMessage<ChangedParamCustomResponse>): ChangedParamCustomResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChangedParamCustomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangedParamCustomResponse): ChangedParamCustomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.CustomParam param */ 1:
                    message.param = CustomParam.internalBinaryRead(reader, reader.uint32(), options, message.param);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangedParamCustomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.CustomParam param = 1; */
        if (message.param)
            CustomParam.internalBinaryWrite(message.param, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ChangedParamCustomResponse
 */
export const ChangedParamCustomResponse = new ChangedParamCustomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntParam$Type extends MessageType<IntParam> {
    constructor() {
        super("mavsdk.rpc.param_server.IntParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IntParam>): IntParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<IntParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntParam): IntParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 value */ 2:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.IntParam
 */
export const IntParam = new IntParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FloatParam$Type extends MessageType<FloatParam> {
    constructor() {
        super("mavsdk.rpc.param_server.FloatParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<FloatParam>): FloatParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<FloatParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FloatParam): FloatParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* float value */ 2:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FloatParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* float value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.FloatParam
 */
export const FloatParam = new FloatParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomParam$Type extends MessageType<CustomParam> {
    constructor() {
        super("mavsdk.rpc.param_server.CustomParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomParam>): CustomParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CustomParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomParam): CustomParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.CustomParam
 */
export const CustomParam = new CustomParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllParams$Type extends MessageType<AllParams> {
    constructor() {
        super("mavsdk.rpc.param_server.AllParams", [
            { no: 1, name: "int_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IntParam },
            { no: 2, name: "float_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FloatParam },
            { no: 3, name: "custom_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomParam }
        ]);
    }
    create(value?: PartialMessage<AllParams>): AllParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.intParams = [];
        message.floatParams = [];
        message.customParams = [];
        if (value !== undefined)
            reflectionMergePartial<AllParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllParams): AllParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mavsdk.rpc.param_server.IntParam int_params */ 1:
                    message.intParams.push(IntParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mavsdk.rpc.param_server.FloatParam float_params */ 2:
                    message.floatParams.push(FloatParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mavsdk.rpc.param_server.CustomParam custom_params */ 3:
                    message.customParams.push(CustomParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mavsdk.rpc.param_server.IntParam int_params = 1; */
        for (let i = 0; i < message.intParams.length; i++)
            IntParam.internalBinaryWrite(message.intParams[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated mavsdk.rpc.param_server.FloatParam float_params = 2; */
        for (let i = 0; i < message.floatParams.length; i++)
            FloatParam.internalBinaryWrite(message.floatParams[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated mavsdk.rpc.param_server.CustomParam custom_params = 3; */
        for (let i = 0; i < message.customParams.length; i++)
            CustomParam.internalBinaryWrite(message.customParams[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.AllParams
 */
export const AllParams = new AllParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParamServerResult$Type extends MessageType<ParamServerResult> {
    constructor() {
        super("mavsdk.rpc.param_server.ParamServerResult", [
            { no: 1, name: "result", kind: "enum", T: () => ["mavsdk.rpc.param_server.ParamServerResult.Result", ParamServerResult_Result, "RESULT_"] },
            { no: 2, name: "result_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ParamServerResult>): ParamServerResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        message.resultStr = "";
        if (value !== undefined)
            reflectionMergePartial<ParamServerResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParamServerResult): ParamServerResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mavsdk.rpc.param_server.ParamServerResult.Result result */ 1:
                    message.result = reader.int32();
                    break;
                case /* string result_str */ 2:
                    message.resultStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParamServerResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mavsdk.rpc.param_server.ParamServerResult.Result result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* string result_str = 2; */
        if (message.resultStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resultStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mavsdk.rpc.param_server.ParamServerResult
 */
export const ParamServerResult = new ParamServerResult$Type();
/**
 * @generated ServiceType for protobuf service mavsdk.rpc.param_server.ParamServerService
 */
export const ParamServerService = new ServiceType("mavsdk.rpc.param_server.ParamServerService", [
    { name: "RetrieveParamInt", options: { "mavsdk.options.async_type": "SYNC" }, I: RetrieveParamIntRequest, O: RetrieveParamIntResponse },
    { name: "ProvideParamInt", options: { "mavsdk.options.async_type": "SYNC" }, I: ProvideParamIntRequest, O: ProvideParamIntResponse },
    { name: "RetrieveParamFloat", options: { "mavsdk.options.async_type": "SYNC" }, I: RetrieveParamFloatRequest, O: RetrieveParamFloatResponse },
    { name: "ProvideParamFloat", options: { "mavsdk.options.async_type": "SYNC" }, I: ProvideParamFloatRequest, O: ProvideParamFloatResponse },
    { name: "RetrieveParamCustom", options: { "mavsdk.options.async_type": "SYNC" }, I: RetrieveParamCustomRequest, O: RetrieveParamCustomResponse },
    { name: "ProvideParamCustom", options: { "mavsdk.options.async_type": "SYNC" }, I: ProvideParamCustomRequest, O: ProvideParamCustomResponse },
    { name: "RetrieveAllParams", options: { "mavsdk.options.async_type": "SYNC" }, I: RetrieveAllParamsRequest, O: RetrieveAllParamsResponse },
    { name: "SubscribeChangedParamInt", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC" }, I: SubscribeChangedParamIntRequest, O: ChangedParamIntResponse },
    { name: "SubscribeChangedParamFloat", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC" }, I: SubscribeChangedParamFloatRequest, O: ChangedParamFloatResponse },
    { name: "SubscribeChangedParamCustom", serverStreaming: true, options: { "mavsdk.options.async_type": "ASYNC" }, I: SubscribeChangedParamCustomRequest, O: ChangedParamCustomResponse }
]);
