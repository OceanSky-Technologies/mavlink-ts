/* eslint-disable */

// source: ftp/ftp.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var mavsdk_options_pb = require('../mavsdk_options_pb.cjs');
goog.object.extend(proto, mavsdk_options_pb);
goog.exportSymbol('proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.CreateDirectoryRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.CreateDirectoryResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.DownloadResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.FtpResult', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.FtpResult.Result', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.ListDirectoryData', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.ListDirectoryRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.ListDirectoryResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.ProgressData', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.RemoveDirectoryRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.RemoveDirectoryResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.RemoveFileRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.RemoveFileResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.RenameRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.RenameResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.SetTargetCompidRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.SetTargetCompidResponse', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.SubscribeDownloadRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.SubscribeUploadRequest', null, global);
goog.exportSymbol('proto.mavsdk.rpc.ftp.UploadResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.SubscribeDownloadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.displayName = 'proto.mavsdk.rpc.ftp.SubscribeDownloadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.DownloadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.DownloadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.DownloadResponse.displayName = 'proto.mavsdk.rpc.ftp.DownloadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.SubscribeUploadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.SubscribeUploadRequest.displayName = 'proto.mavsdk.rpc.ftp.SubscribeUploadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.UploadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.UploadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.UploadResponse.displayName = 'proto.mavsdk.rpc.ftp.UploadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.ListDirectoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.ListDirectoryRequest.displayName = 'proto.mavsdk.rpc.ftp.ListDirectoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.ListDirectoryData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mavsdk.rpc.ftp.ListDirectoryData.repeatedFields_, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.ListDirectoryData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.ListDirectoryData.displayName = 'proto.mavsdk.rpc.ftp.ListDirectoryData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.ListDirectoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.ListDirectoryResponse.displayName = 'proto.mavsdk.rpc.ftp.ListDirectoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.CreateDirectoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.CreateDirectoryRequest.displayName = 'proto.mavsdk.rpc.ftp.CreateDirectoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.CreateDirectoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.CreateDirectoryResponse.displayName = 'proto.mavsdk.rpc.ftp.CreateDirectoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.RemoveDirectoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.displayName = 'proto.mavsdk.rpc.ftp.RemoveDirectoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.RemoveDirectoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.displayName = 'proto.mavsdk.rpc.ftp.RemoveDirectoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.RemoveFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.RemoveFileRequest.displayName = 'proto.mavsdk.rpc.ftp.RemoveFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.RemoveFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.RemoveFileResponse.displayName = 'proto.mavsdk.rpc.ftp.RemoveFileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.RenameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.RenameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.RenameRequest.displayName = 'proto.mavsdk.rpc.ftp.RenameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.RenameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.RenameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.RenameResponse.displayName = 'proto.mavsdk.rpc.ftp.RenameResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.displayName = 'proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.displayName = 'proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.SetTargetCompidRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.SetTargetCompidRequest.displayName = 'proto.mavsdk.rpc.ftp.SetTargetCompidRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.SetTargetCompidResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.SetTargetCompidResponse.displayName = 'proto.mavsdk.rpc.ftp.SetTargetCompidResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.ProgressData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.ProgressData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.ProgressData.displayName = 'proto.mavsdk.rpc.ftp.ProgressData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mavsdk.rpc.ftp.FtpResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mavsdk.rpc.ftp.FtpResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mavsdk.rpc.ftp.FtpResult.displayName = 'proto.mavsdk.rpc.ftp.FtpResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.SubscribeDownloadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    localDir: jspb.Message.getFieldWithDefault(msg, 2, ""),
    useBurst: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.SubscribeDownloadRequest}
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.SubscribeDownloadRequest;
  return proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.SubscribeDownloadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.SubscribeDownloadRequest}
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalDir(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseBurst(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.SubscribeDownloadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocalDir();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUseBurst();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string remote_file_path = 1;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.prototype.getRemoteFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.SubscribeDownloadRequest} returns this
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.prototype.setRemoteFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string local_dir = 2;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.prototype.getLocalDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.SubscribeDownloadRequest} returns this
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.prototype.setLocalDir = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool use_burst = 3;
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.prototype.getUseBurst = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.ftp.SubscribeDownloadRequest} returns this
 */
proto.mavsdk.rpc.ftp.SubscribeDownloadRequest.prototype.setUseBurst = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.DownloadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.DownloadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.DownloadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f),
    progressData: (f = msg.getProgressData()) && proto.mavsdk.rpc.ftp.ProgressData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.DownloadResponse}
 */
proto.mavsdk.rpc.ftp.DownloadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.DownloadResponse;
  return proto.mavsdk.rpc.ftp.DownloadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.DownloadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.DownloadResponse}
 */
proto.mavsdk.rpc.ftp.DownloadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.ftp.ProgressData;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.ProgressData.deserializeBinaryFromReader);
      msg.setProgressData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.DownloadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.DownloadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.DownloadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
  f = message.getProgressData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.ftp.ProgressData.serializeBinaryToWriter
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.DownloadResponse} returns this
*/
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.DownloadResponse} returns this
 */
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProgressData progress_data = 2;
 * @return {?proto.mavsdk.rpc.ftp.ProgressData}
 */
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.getProgressData = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.ProgressData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.ProgressData, 2));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.ProgressData|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.DownloadResponse} returns this
*/
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.setProgressData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.DownloadResponse} returns this
 */
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.clearProgressData = function() {
  return this.setProgressData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.DownloadResponse.prototype.hasProgressData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.SubscribeUploadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.SubscribeUploadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    localFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    remoteDir: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.SubscribeUploadRequest}
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.SubscribeUploadRequest;
  return proto.mavsdk.rpc.ftp.SubscribeUploadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.SubscribeUploadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.SubscribeUploadRequest}
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.SubscribeUploadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.SubscribeUploadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRemoteDir();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string local_file_path = 1;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.prototype.getLocalFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.SubscribeUploadRequest} returns this
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.prototype.setLocalFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string remote_dir = 2;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.prototype.getRemoteDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.SubscribeUploadRequest} returns this
 */
proto.mavsdk.rpc.ftp.SubscribeUploadRequest.prototype.setRemoteDir = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.UploadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.UploadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.UploadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.UploadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f),
    progressData: (f = msg.getProgressData()) && proto.mavsdk.rpc.ftp.ProgressData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.UploadResponse}
 */
proto.mavsdk.rpc.ftp.UploadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.UploadResponse;
  return proto.mavsdk.rpc.ftp.UploadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.UploadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.UploadResponse}
 */
proto.mavsdk.rpc.ftp.UploadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.ftp.ProgressData;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.ProgressData.deserializeBinaryFromReader);
      msg.setProgressData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.UploadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.UploadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.UploadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.UploadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
  f = message.getProgressData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.ftp.ProgressData.serializeBinaryToWriter
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.UploadResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.UploadResponse} returns this
*/
proto.mavsdk.rpc.ftp.UploadResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.UploadResponse} returns this
 */
proto.mavsdk.rpc.ftp.UploadResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.UploadResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProgressData progress_data = 2;
 * @return {?proto.mavsdk.rpc.ftp.ProgressData}
 */
proto.mavsdk.rpc.ftp.UploadResponse.prototype.getProgressData = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.ProgressData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.ProgressData, 2));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.ProgressData|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.UploadResponse} returns this
*/
proto.mavsdk.rpc.ftp.UploadResponse.prototype.setProgressData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.UploadResponse} returns this
 */
proto.mavsdk.rpc.ftp.UploadResponse.prototype.clearProgressData = function() {
  return this.setProgressData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.UploadResponse.prototype.hasProgressData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.ListDirectoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteDir: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryRequest}
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.ListDirectoryRequest;
  return proto.mavsdk.rpc.ftp.ListDirectoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryRequest}
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.ListDirectoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteDir();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string remote_dir = 1;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest.prototype.getRemoteDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryRequest} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryRequest.prototype.setRemoteDir = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.ListDirectoryData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dirsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    filesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryData}
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.ListDirectoryData;
  return proto.mavsdk.rpc.ftp.ListDirectoryData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryData}
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDirs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.ListDirectoryData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string dirs = 1;
 * @return {!Array<string>}
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.getDirsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryData} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.setDirsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryData} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.addDirs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryData} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.clearDirsList = function() {
  return this.setDirsList([]);
};


/**
 * repeated string files = 2;
 * @return {!Array<string>}
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.getFilesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryData} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.setFilesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryData} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.addFiles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryData} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryData.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.ListDirectoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.mavsdk.rpc.ftp.ListDirectoryData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryResponse}
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.ListDirectoryResponse;
  return proto.mavsdk.rpc.ftp.ListDirectoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryResponse}
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    case 2:
      var value = new proto.mavsdk.rpc.ftp.ListDirectoryData;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.ListDirectoryData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.ListDirectoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.ListDirectoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mavsdk.rpc.ftp.ListDirectoryData.serializeBinaryToWriter
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryResponse} returns this
*/
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryResponse} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ListDirectoryData data = 2;
 * @return {?proto.mavsdk.rpc.ftp.ListDirectoryData}
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.getData = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.ListDirectoryData} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.ListDirectoryData, 2));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.ListDirectoryData|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryResponse} returns this
*/
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.ListDirectoryResponse} returns this
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.ListDirectoryResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.CreateDirectoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.CreateDirectoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteDir: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.CreateDirectoryRequest}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.CreateDirectoryRequest;
  return proto.mavsdk.rpc.ftp.CreateDirectoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.CreateDirectoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.CreateDirectoryRequest}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.CreateDirectoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.CreateDirectoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteDir();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string remote_dir = 1;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest.prototype.getRemoteDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.CreateDirectoryRequest} returns this
 */
proto.mavsdk.rpc.ftp.CreateDirectoryRequest.prototype.setRemoteDir = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.CreateDirectoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.CreateDirectoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.CreateDirectoryResponse}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.CreateDirectoryResponse;
  return proto.mavsdk.rpc.ftp.CreateDirectoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.CreateDirectoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.CreateDirectoryResponse}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.CreateDirectoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.CreateDirectoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.CreateDirectoryResponse} returns this
*/
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.CreateDirectoryResponse} returns this
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.CreateDirectoryResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.RemoveDirectoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteDir: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.RemoveDirectoryRequest}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.RemoveDirectoryRequest;
  return proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.RemoveDirectoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.RemoveDirectoryRequest}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.RemoveDirectoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteDir();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string remote_dir = 1;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.prototype.getRemoteDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.RemoveDirectoryRequest} returns this
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryRequest.prototype.setRemoteDir = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.RemoveDirectoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.RemoveDirectoryResponse}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.RemoveDirectoryResponse;
  return proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.RemoveDirectoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.RemoveDirectoryResponse}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.RemoveDirectoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.RemoveDirectoryResponse} returns this
*/
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.RemoveDirectoryResponse} returns this
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.RemoveDirectoryResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.RemoveFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.RemoveFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteFilePath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.RemoveFileRequest}
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.RemoveFileRequest;
  return proto.mavsdk.rpc.ftp.RemoveFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.RemoveFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.RemoveFileRequest}
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteFilePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.RemoveFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.RemoveFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string remote_file_path = 1;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest.prototype.getRemoteFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.RemoveFileRequest} returns this
 */
proto.mavsdk.rpc.ftp.RemoveFileRequest.prototype.setRemoteFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.RemoveFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.RemoveFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.RemoveFileResponse}
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.RemoveFileResponse;
  return proto.mavsdk.rpc.ftp.RemoveFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.RemoveFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.RemoveFileResponse}
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.RemoveFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.RemoveFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.RemoveFileResponse} returns this
*/
proto.mavsdk.rpc.ftp.RemoveFileResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.RemoveFileResponse} returns this
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.RemoveFileResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.RenameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.RenameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.RenameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RenameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteFromPath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    remoteToPath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.RenameRequest}
 */
proto.mavsdk.rpc.ftp.RenameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.RenameRequest;
  return proto.mavsdk.rpc.ftp.RenameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.RenameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.RenameRequest}
 */
proto.mavsdk.rpc.ftp.RenameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteFromPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteToPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.RenameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.RenameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.RenameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RenameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteFromPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRemoteToPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string remote_from_path = 1;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.RenameRequest.prototype.getRemoteFromPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.RenameRequest} returns this
 */
proto.mavsdk.rpc.ftp.RenameRequest.prototype.setRemoteFromPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string remote_to_path = 2;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.RenameRequest.prototype.getRemoteToPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.RenameRequest} returns this
 */
proto.mavsdk.rpc.ftp.RenameRequest.prototype.setRemoteToPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.RenameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.RenameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.RenameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RenameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.RenameResponse}
 */
proto.mavsdk.rpc.ftp.RenameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.RenameResponse;
  return proto.mavsdk.rpc.ftp.RenameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.RenameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.RenameResponse}
 */
proto.mavsdk.rpc.ftp.RenameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.RenameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.RenameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.RenameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.RenameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.RenameResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.RenameResponse} returns this
*/
proto.mavsdk.rpc.ftp.RenameResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.RenameResponse} returns this
 */
proto.mavsdk.rpc.ftp.RenameResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.RenameResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    localFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    remoteFilePath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest;
  return proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteFilePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRemoteFilePath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string local_file_path = 1;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.prototype.getLocalFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest} returns this
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.prototype.setLocalFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string remote_file_path = 2;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.prototype.getRemoteFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest} returns this
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalRequest.prototype.setRemoteFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f),
    areIdentical: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse;
  return proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAreIdentical(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
  f = message.getAreIdentical();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse} returns this
*/
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse} returns this
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool are_identical = 2;
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.prototype.getAreIdentical = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse} returns this
 */
proto.mavsdk.rpc.ftp.AreFilesIdenticalResponse.prototype.setAreIdentical = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.SetTargetCompidRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.SetTargetCompidRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    compid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.SetTargetCompidRequest}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.SetTargetCompidRequest;
  return proto.mavsdk.rpc.ftp.SetTargetCompidRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.SetTargetCompidRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.SetTargetCompidRequest}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCompid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.SetTargetCompidRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.SetTargetCompidRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 compid = 1;
 * @return {number}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest.prototype.getCompid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.ftp.SetTargetCompidRequest} returns this
 */
proto.mavsdk.rpc.ftp.SetTargetCompidRequest.prototype.setCompid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.SetTargetCompidResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.SetTargetCompidResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ftpResult: (f = msg.getFtpResult()) && proto.mavsdk.rpc.ftp.FtpResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.SetTargetCompidResponse}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.SetTargetCompidResponse;
  return proto.mavsdk.rpc.ftp.SetTargetCompidResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.SetTargetCompidResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.SetTargetCompidResponse}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mavsdk.rpc.ftp.FtpResult;
      reader.readMessage(value,proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader);
      msg.setFtpResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.SetTargetCompidResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.SetTargetCompidResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFtpResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional FtpResult ftp_result = 1;
 * @return {?proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.prototype.getFtpResult = function() {
  return /** @type{?proto.mavsdk.rpc.ftp.FtpResult} */ (
    jspb.Message.getWrapperField(this, proto.mavsdk.rpc.ftp.FtpResult, 1));
};


/**
 * @param {?proto.mavsdk.rpc.ftp.FtpResult|undefined} value
 * @return {!proto.mavsdk.rpc.ftp.SetTargetCompidResponse} returns this
*/
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.prototype.setFtpResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mavsdk.rpc.ftp.SetTargetCompidResponse} returns this
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.prototype.clearFtpResult = function() {
  return this.setFtpResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mavsdk.rpc.ftp.SetTargetCompidResponse.prototype.hasFtpResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.ProgressData.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.ProgressData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.ProgressData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.ProgressData.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytesTransferred: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalBytes: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.ProgressData}
 */
proto.mavsdk.rpc.ftp.ProgressData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.ProgressData;
  return proto.mavsdk.rpc.ftp.ProgressData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.ProgressData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.ProgressData}
 */
proto.mavsdk.rpc.ftp.ProgressData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBytesTransferred(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.ProgressData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.ProgressData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.ProgressData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.ProgressData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytesTransferred();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTotalBytes();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 bytes_transferred = 1;
 * @return {number}
 */
proto.mavsdk.rpc.ftp.ProgressData.prototype.getBytesTransferred = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.ftp.ProgressData} returns this
 */
proto.mavsdk.rpc.ftp.ProgressData.prototype.setBytesTransferred = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 total_bytes = 2;
 * @return {number}
 */
proto.mavsdk.rpc.ftp.ProgressData.prototype.getTotalBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mavsdk.rpc.ftp.ProgressData} returns this
 */
proto.mavsdk.rpc.ftp.ProgressData.prototype.setTotalBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mavsdk.rpc.ftp.FtpResult.prototype.toObject = function(opt_includeInstance) {
  return proto.mavsdk.rpc.ftp.FtpResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mavsdk.rpc.ftp.FtpResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.FtpResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultStr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.FtpResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mavsdk.rpc.ftp.FtpResult;
  return proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mavsdk.rpc.ftp.FtpResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mavsdk.rpc.ftp.FtpResult}
 */
proto.mavsdk.rpc.ftp.FtpResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mavsdk.rpc.ftp.FtpResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mavsdk.rpc.ftp.FtpResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mavsdk.rpc.ftp.FtpResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mavsdk.rpc.ftp.FtpResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultStr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.mavsdk.rpc.ftp.FtpResult.Result = {
  RESULT_UNKNOWN: 0,
  RESULT_SUCCESS: 1,
  RESULT_NEXT: 2,
  RESULT_TIMEOUT: 3,
  RESULT_BUSY: 4,
  RESULT_FILE_IO_ERROR: 5,
  RESULT_FILE_EXISTS: 6,
  RESULT_FILE_DOES_NOT_EXIST: 7,
  RESULT_FILE_PROTECTED: 8,
  RESULT_INVALID_PARAMETER: 9,
  RESULT_UNSUPPORTED: 10,
  RESULT_PROTOCOL_ERROR: 11,
  RESULT_NO_SYSTEM: 12
};

/**
 * optional Result result = 1;
 * @return {!proto.mavsdk.rpc.ftp.FtpResult.Result}
 */
proto.mavsdk.rpc.ftp.FtpResult.prototype.getResult = function() {
  return /** @type {!proto.mavsdk.rpc.ftp.FtpResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mavsdk.rpc.ftp.FtpResult.Result} value
 * @return {!proto.mavsdk.rpc.ftp.FtpResult} returns this
 */
proto.mavsdk.rpc.ftp.FtpResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string result_str = 2;
 * @return {string}
 */
proto.mavsdk.rpc.ftp.FtpResult.prototype.getResultStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mavsdk.rpc.ftp.FtpResult} returns this
 */
proto.mavsdk.rpc.ftp.FtpResult.prototype.setResultStr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.mavsdk.rpc.ftp);


// fix autocompletion
module.exports = exports;
